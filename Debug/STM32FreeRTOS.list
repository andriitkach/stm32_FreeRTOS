
STM32FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034e0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08003670  08003670  00013670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800372c  0800372c  0001372c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08003734  08003734  00013734  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08003738  08003738  00013738  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000010  20000000  0800373c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
  8 .bss          00004aa8  20000010  20000010  00020010  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20004ab8  20004ab8  00020010  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001c199  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00003780  00000000  00000000  0003c1d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000d0de  00000000  00000000  0003f959  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001028  00000000  00000000  0004ca38  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001510  00000000  00000000  0004da60  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   000086b8  00000000  00000000  0004ef70  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00006c68  00000000  00000000  00057628  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0005e290  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00003008  00000000  00000000  0005e30c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003658 	.word	0x08003658

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08003658 	.word	0x08003658

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e4:	f000 b97a 	b.w	80004dc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	468c      	mov	ip, r1
 8000206:	460d      	mov	r5, r1
 8000208:	4604      	mov	r4, r0
 800020a:	9e08      	ldr	r6, [sp, #32]
 800020c:	2b00      	cmp	r3, #0
 800020e:	d151      	bne.n	80002b4 <__udivmoddi4+0xb4>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d96d      	bls.n	80002f2 <__udivmoddi4+0xf2>
 8000216:	fab2 fe82 	clz	lr, r2
 800021a:	f1be 0f00 	cmp.w	lr, #0
 800021e:	d00b      	beq.n	8000238 <__udivmoddi4+0x38>
 8000220:	f1ce 0c20 	rsb	ip, lr, #32
 8000224:	fa01 f50e 	lsl.w	r5, r1, lr
 8000228:	fa20 fc0c 	lsr.w	ip, r0, ip
 800022c:	fa02 f70e 	lsl.w	r7, r2, lr
 8000230:	ea4c 0c05 	orr.w	ip, ip, r5
 8000234:	fa00 f40e 	lsl.w	r4, r0, lr
 8000238:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 800023c:	0c25      	lsrs	r5, r4, #16
 800023e:	fbbc f8fa 	udiv	r8, ip, sl
 8000242:	fa1f f987 	uxth.w	r9, r7
 8000246:	fb0a cc18 	mls	ip, sl, r8, ip
 800024a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800024e:	fb08 f309 	mul.w	r3, r8, r9
 8000252:	42ab      	cmp	r3, r5
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x6c>
 8000256:	19ed      	adds	r5, r5, r7
 8000258:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 800025c:	f080 8123 	bcs.w	80004a6 <__udivmoddi4+0x2a6>
 8000260:	42ab      	cmp	r3, r5
 8000262:	f240 8120 	bls.w	80004a6 <__udivmoddi4+0x2a6>
 8000266:	f1a8 0802 	sub.w	r8, r8, #2
 800026a:	443d      	add	r5, r7
 800026c:	1aed      	subs	r5, r5, r3
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb5 f0fa 	udiv	r0, r5, sl
 8000274:	fb0a 5510 	mls	r5, sl, r0, r5
 8000278:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800027c:	fb00 f909 	mul.w	r9, r0, r9
 8000280:	45a1      	cmp	r9, r4
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x98>
 8000284:	19e4      	adds	r4, r4, r7
 8000286:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800028a:	f080 810a 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800028e:	45a1      	cmp	r9, r4
 8000290:	f240 8107 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 8000294:	3802      	subs	r0, #2
 8000296:	443c      	add	r4, r7
 8000298:	eba4 0409 	sub.w	r4, r4, r9
 800029c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80002a0:	2100      	movs	r1, #0
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	d061      	beq.n	800036a <__udivmoddi4+0x16a>
 80002a6:	fa24 f40e 	lsr.w	r4, r4, lr
 80002aa:	2300      	movs	r3, #0
 80002ac:	6034      	str	r4, [r6, #0]
 80002ae:	6073      	str	r3, [r6, #4]
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d907      	bls.n	80002c8 <__udivmoddi4+0xc8>
 80002b8:	2e00      	cmp	r6, #0
 80002ba:	d054      	beq.n	8000366 <__udivmoddi4+0x166>
 80002bc:	2100      	movs	r1, #0
 80002be:	e886 0021 	stmia.w	r6, {r0, r5}
 80002c2:	4608      	mov	r0, r1
 80002c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c8:	fab3 f183 	clz	r1, r3
 80002cc:	2900      	cmp	r1, #0
 80002ce:	f040 808e 	bne.w	80003ee <__udivmoddi4+0x1ee>
 80002d2:	42ab      	cmp	r3, r5
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xdc>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80fa 	bhi.w	80004d0 <__udivmoddi4+0x2d0>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb65 0503 	sbc.w	r5, r5, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	46ac      	mov	ip, r5
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	d03f      	beq.n	800036a <__udivmoddi4+0x16a>
 80002ea:	e886 1010 	stmia.w	r6, {r4, ip}
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	b912      	cbnz	r2, 80002fa <__udivmoddi4+0xfa>
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb7 f7f2 	udiv	r7, r7, r2
 80002fa:	fab7 fe87 	clz	lr, r7
 80002fe:	f1be 0f00 	cmp.w	lr, #0
 8000302:	d134      	bne.n	800036e <__udivmoddi4+0x16e>
 8000304:	1beb      	subs	r3, r5, r7
 8000306:	0c3a      	lsrs	r2, r7, #16
 8000308:	fa1f fc87 	uxth.w	ip, r7
 800030c:	2101      	movs	r1, #1
 800030e:	fbb3 f8f2 	udiv	r8, r3, r2
 8000312:	0c25      	lsrs	r5, r4, #16
 8000314:	fb02 3318 	mls	r3, r2, r8, r3
 8000318:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800031c:	fb0c f308 	mul.w	r3, ip, r8
 8000320:	42ab      	cmp	r3, r5
 8000322:	d907      	bls.n	8000334 <__udivmoddi4+0x134>
 8000324:	19ed      	adds	r5, r5, r7
 8000326:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x132>
 800032c:	42ab      	cmp	r3, r5
 800032e:	f200 80d1 	bhi.w	80004d4 <__udivmoddi4+0x2d4>
 8000332:	4680      	mov	r8, r0
 8000334:	1aed      	subs	r5, r5, r3
 8000336:	b2a3      	uxth	r3, r4
 8000338:	fbb5 f0f2 	udiv	r0, r5, r2
 800033c:	fb02 5510 	mls	r5, r2, r0, r5
 8000340:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000344:	fb0c fc00 	mul.w	ip, ip, r0
 8000348:	45a4      	cmp	ip, r4
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0x15c>
 800034c:	19e4      	adds	r4, r4, r7
 800034e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x15a>
 8000354:	45a4      	cmp	ip, r4
 8000356:	f200 80b8 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 800035a:	4618      	mov	r0, r3
 800035c:	eba4 040c 	sub.w	r4, r4, ip
 8000360:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000364:	e79d      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000366:	4631      	mov	r1, r6
 8000368:	4630      	mov	r0, r6
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	f1ce 0420 	rsb	r4, lr, #32
 8000372:	fa05 f30e 	lsl.w	r3, r5, lr
 8000376:	fa07 f70e 	lsl.w	r7, r7, lr
 800037a:	fa20 f804 	lsr.w	r8, r0, r4
 800037e:	0c3a      	lsrs	r2, r7, #16
 8000380:	fa25 f404 	lsr.w	r4, r5, r4
 8000384:	ea48 0803 	orr.w	r8, r8, r3
 8000388:	fbb4 f1f2 	udiv	r1, r4, r2
 800038c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000390:	fb02 4411 	mls	r4, r2, r1, r4
 8000394:	fa1f fc87 	uxth.w	ip, r7
 8000398:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800039c:	fb01 f30c 	mul.w	r3, r1, ip
 80003a0:	42ab      	cmp	r3, r5
 80003a2:	fa00 f40e 	lsl.w	r4, r0, lr
 80003a6:	d909      	bls.n	80003bc <__udivmoddi4+0x1bc>
 80003a8:	19ed      	adds	r5, r5, r7
 80003aa:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 80003ae:	f080 808a 	bcs.w	80004c6 <__udivmoddi4+0x2c6>
 80003b2:	42ab      	cmp	r3, r5
 80003b4:	f240 8087 	bls.w	80004c6 <__udivmoddi4+0x2c6>
 80003b8:	3902      	subs	r1, #2
 80003ba:	443d      	add	r5, r7
 80003bc:	1aeb      	subs	r3, r5, r3
 80003be:	fa1f f588 	uxth.w	r5, r8
 80003c2:	fbb3 f0f2 	udiv	r0, r3, r2
 80003c6:	fb02 3310 	mls	r3, r2, r0, r3
 80003ca:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003ce:	fb00 f30c 	mul.w	r3, r0, ip
 80003d2:	42ab      	cmp	r3, r5
 80003d4:	d907      	bls.n	80003e6 <__udivmoddi4+0x1e6>
 80003d6:	19ed      	adds	r5, r5, r7
 80003d8:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80003dc:	d26f      	bcs.n	80004be <__udivmoddi4+0x2be>
 80003de:	42ab      	cmp	r3, r5
 80003e0:	d96d      	bls.n	80004be <__udivmoddi4+0x2be>
 80003e2:	3802      	subs	r0, #2
 80003e4:	443d      	add	r5, r7
 80003e6:	1aeb      	subs	r3, r5, r3
 80003e8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003ec:	e78f      	b.n	800030e <__udivmoddi4+0x10e>
 80003ee:	f1c1 0720 	rsb	r7, r1, #32
 80003f2:	fa22 f807 	lsr.w	r8, r2, r7
 80003f6:	408b      	lsls	r3, r1
 80003f8:	fa05 f401 	lsl.w	r4, r5, r1
 80003fc:	ea48 0303 	orr.w	r3, r8, r3
 8000400:	fa20 fe07 	lsr.w	lr, r0, r7
 8000404:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000408:	40fd      	lsrs	r5, r7
 800040a:	ea4e 0e04 	orr.w	lr, lr, r4
 800040e:	fbb5 f9fc 	udiv	r9, r5, ip
 8000412:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000416:	fb0c 5519 	mls	r5, ip, r9, r5
 800041a:	fa1f f883 	uxth.w	r8, r3
 800041e:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000422:	fb09 f408 	mul.w	r4, r9, r8
 8000426:	42ac      	cmp	r4, r5
 8000428:	fa02 f201 	lsl.w	r2, r2, r1
 800042c:	fa00 fa01 	lsl.w	sl, r0, r1
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x244>
 8000432:	18ed      	adds	r5, r5, r3
 8000434:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000438:	d243      	bcs.n	80004c2 <__udivmoddi4+0x2c2>
 800043a:	42ac      	cmp	r4, r5
 800043c:	d941      	bls.n	80004c2 <__udivmoddi4+0x2c2>
 800043e:	f1a9 0902 	sub.w	r9, r9, #2
 8000442:	441d      	add	r5, r3
 8000444:	1b2d      	subs	r5, r5, r4
 8000446:	fa1f fe8e 	uxth.w	lr, lr
 800044a:	fbb5 f0fc 	udiv	r0, r5, ip
 800044e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000452:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000456:	fb00 f808 	mul.w	r8, r0, r8
 800045a:	45a0      	cmp	r8, r4
 800045c:	d907      	bls.n	800046e <__udivmoddi4+0x26e>
 800045e:	18e4      	adds	r4, r4, r3
 8000460:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000464:	d229      	bcs.n	80004ba <__udivmoddi4+0x2ba>
 8000466:	45a0      	cmp	r8, r4
 8000468:	d927      	bls.n	80004ba <__udivmoddi4+0x2ba>
 800046a:	3802      	subs	r0, #2
 800046c:	441c      	add	r4, r3
 800046e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000472:	eba4 0408 	sub.w	r4, r4, r8
 8000476:	fba0 8902 	umull	r8, r9, r0, r2
 800047a:	454c      	cmp	r4, r9
 800047c:	46c6      	mov	lr, r8
 800047e:	464d      	mov	r5, r9
 8000480:	d315      	bcc.n	80004ae <__udivmoddi4+0x2ae>
 8000482:	d012      	beq.n	80004aa <__udivmoddi4+0x2aa>
 8000484:	b156      	cbz	r6, 800049c <__udivmoddi4+0x29c>
 8000486:	ebba 030e 	subs.w	r3, sl, lr
 800048a:	eb64 0405 	sbc.w	r4, r4, r5
 800048e:	fa04 f707 	lsl.w	r7, r4, r7
 8000492:	40cb      	lsrs	r3, r1
 8000494:	431f      	orrs	r7, r3
 8000496:	40cc      	lsrs	r4, r1
 8000498:	6037      	str	r7, [r6, #0]
 800049a:	6074      	str	r4, [r6, #4]
 800049c:	2100      	movs	r1, #0
 800049e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004a2:	4618      	mov	r0, r3
 80004a4:	e6f8      	b.n	8000298 <__udivmoddi4+0x98>
 80004a6:	4690      	mov	r8, r2
 80004a8:	e6e0      	b.n	800026c <__udivmoddi4+0x6c>
 80004aa:	45c2      	cmp	sl, r8
 80004ac:	d2ea      	bcs.n	8000484 <__udivmoddi4+0x284>
 80004ae:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b2:	eb69 0503 	sbc.w	r5, r9, r3
 80004b6:	3801      	subs	r0, #1
 80004b8:	e7e4      	b.n	8000484 <__udivmoddi4+0x284>
 80004ba:	4628      	mov	r0, r5
 80004bc:	e7d7      	b.n	800046e <__udivmoddi4+0x26e>
 80004be:	4640      	mov	r0, r8
 80004c0:	e791      	b.n	80003e6 <__udivmoddi4+0x1e6>
 80004c2:	4681      	mov	r9, r0
 80004c4:	e7be      	b.n	8000444 <__udivmoddi4+0x244>
 80004c6:	4601      	mov	r1, r0
 80004c8:	e778      	b.n	80003bc <__udivmoddi4+0x1bc>
 80004ca:	3802      	subs	r0, #2
 80004cc:	443c      	add	r4, r7
 80004ce:	e745      	b.n	800035c <__udivmoddi4+0x15c>
 80004d0:	4608      	mov	r0, r1
 80004d2:	e708      	b.n	80002e6 <__udivmoddi4+0xe6>
 80004d4:	f1a8 0802 	sub.w	r8, r8, #2
 80004d8:	443d      	add	r5, r7
 80004da:	e72b      	b.n	8000334 <__udivmoddi4+0x134>

080004dc <__aeabi_idiv0>:
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop

080004e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004e0:	b508      	push	{r3, lr}
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004e2:	4b0b      	ldr	r3, [pc, #44]	; (8000510 <HAL_Init+0x30>)
 80004e4:	681a      	ldr	r2, [r3, #0]
 80004e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80004ea:	601a      	str	r2, [r3, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004ec:	681a      	ldr	r2, [r3, #0]
 80004ee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80004f2:	601a      	str	r2, [r3, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004f4:	681a      	ldr	r2, [r3, #0]
 80004f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80004fa:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004fc:	2003      	movs	r0, #3
 80004fe:	f000 f81b 	bl	8000538 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000502:	2000      	movs	r0, #0
 8000504:	f002 ffde 	bl	80034c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000508:	f002 ff3e 	bl	8003388 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 800050c:	2000      	movs	r0, #0
 800050e:	bd08      	pop	{r3, pc}
 8000510:	40023c00 	.word	0x40023c00

08000514 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000514:	4a03      	ldr	r2, [pc, #12]	; (8000524 <HAL_IncTick+0x10>)
 8000516:	4b04      	ldr	r3, [pc, #16]	; (8000528 <HAL_IncTick+0x14>)
 8000518:	6811      	ldr	r1, [r2, #0]
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	440b      	add	r3, r1
 800051e:	6013      	str	r3, [r2, #0]
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop
 8000524:	20004930 	.word	0x20004930
 8000528:	20000000 	.word	0x20000000

0800052c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800052c:	4b01      	ldr	r3, [pc, #4]	; (8000534 <HAL_GetTick+0x8>)
 800052e:	6818      	ldr	r0, [r3, #0]
}
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	20004930 	.word	0x20004930

08000538 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000538:	4a07      	ldr	r2, [pc, #28]	; (8000558 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800053a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800053c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000540:	041b      	lsls	r3, r3, #16
 8000542:	0c1b      	lsrs	r3, r3, #16
 8000544:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000548:	0200      	lsls	r0, r0, #8
 800054a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800054e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000552:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000554:	60d3      	str	r3, [r2, #12]
 8000556:	4770      	bx	lr
 8000558:	e000ed00 	.word	0xe000ed00

0800055c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800055c:	4b17      	ldr	r3, [pc, #92]	; (80005bc <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	68dc      	ldr	r4, [r3, #12]
 8000562:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000566:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800056a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800056c:	2b04      	cmp	r3, #4
 800056e:	bf28      	it	cs
 8000570:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000572:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000574:	f04f 0501 	mov.w	r5, #1
 8000578:	fa05 f303 	lsl.w	r3, r5, r3
 800057c:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000580:	bf8c      	ite	hi
 8000582:	3c03      	subhi	r4, #3
 8000584:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000586:	4019      	ands	r1, r3
 8000588:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800058a:	fa05 f404 	lsl.w	r4, r5, r4
 800058e:	3c01      	subs	r4, #1
 8000590:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8000592:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000594:	ea42 0201 	orr.w	r2, r2, r1
 8000598:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800059c:	bfad      	iteet	ge
 800059e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005a2:	f000 000f 	andlt.w	r0, r0, #15
 80005a6:	4b06      	ldrlt	r3, [pc, #24]	; (80005c0 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005a8:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ac:	bfb5      	itete	lt
 80005ae:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005b0:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005b2:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005b4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80005b8:	bd30      	pop	{r4, r5, pc}
 80005ba:	bf00      	nop
 80005bc:	e000ed00 	.word	0xe000ed00
 80005c0:	e000ed14 	.word	0xe000ed14

080005c4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80005c4:	2800      	cmp	r0, #0
 80005c6:	db08      	blt.n	80005da <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80005c8:	0942      	lsrs	r2, r0, #5
 80005ca:	2301      	movs	r3, #1
 80005cc:	f000 001f 	and.w	r0, r0, #31
 80005d0:	fa03 f000 	lsl.w	r0, r3, r0
 80005d4:	4b01      	ldr	r3, [pc, #4]	; (80005dc <HAL_NVIC_EnableIRQ+0x18>)
 80005d6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80005da:	4770      	bx	lr
 80005dc:	e000e100 	.word	0xe000e100

080005e0 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80005e0:	6803      	ldr	r3, [r0, #0]
 80005e2:	b2da      	uxtb	r2, r3
 80005e4:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80005e8:	f023 0303 	bic.w	r3, r3, #3
 80005ec:	2118      	movs	r1, #24
 80005ee:	3a10      	subs	r2, #16
 80005f0:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80005f4:	4904      	ldr	r1, [pc, #16]	; (8000608 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 80005f6:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80005f8:	bf88      	it	hi
 80005fa:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80005fc:	5c89      	ldrb	r1, [r1, r2]
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80005fe:	6583      	str	r3, [r0, #88]	; 0x58
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8000600:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  
  return hdma->StreamBaseAddress;
}
 8000602:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	08003670 	.word	0x08003670

0800060c <HAL_DMA_Init>:
{
 800060c:	b570      	push	{r4, r5, r6, lr}
 800060e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000610:	f7ff ff8c 	bl	800052c <HAL_GetTick>
 8000614:	4605      	mov	r5, r0
  if(hdma == NULL)
 8000616:	2c00      	cmp	r4, #0
 8000618:	d071      	beq.n	80006fe <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 800061a:	2300      	movs	r3, #0
 800061c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8000620:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 8000622:	2302      	movs	r3, #2
 8000624:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8000628:	6813      	ldr	r3, [r2, #0]
 800062a:	f023 0301 	bic.w	r3, r3, #1
 800062e:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000630:	6821      	ldr	r1, [r4, #0]
 8000632:	680b      	ldr	r3, [r1, #0]
 8000634:	07d8      	lsls	r0, r3, #31
 8000636:	d43c      	bmi.n	80006b2 <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 8000638:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800063a:	4d32      	ldr	r5, [pc, #200]	; (8000704 <HAL_DMA_Init+0xf8>)
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800063c:	6862      	ldr	r2, [r4, #4]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800063e:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000640:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000642:	68a3      	ldr	r3, [r4, #8]
 8000644:	4313      	orrs	r3, r2
 8000646:	68e2      	ldr	r2, [r4, #12]
 8000648:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800064a:	6922      	ldr	r2, [r4, #16]
 800064c:	4313      	orrs	r3, r2
 800064e:	6962      	ldr	r2, [r4, #20]
 8000650:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000652:	69e2      	ldr	r2, [r4, #28]
 8000654:	4303      	orrs	r3, r0
 8000656:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8000658:	6a22      	ldr	r2, [r4, #32]
 800065a:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800065c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800065e:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000660:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000664:	bf01      	itttt	eq
 8000666:	6b26      	ldreq	r6, [r4, #48]	; 0x30
 8000668:	6ae5      	ldreq	r5, [r4, #44]	; 0x2c
 800066a:	4335      	orreq	r5, r6
 800066c:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 800066e:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 8000670:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000672:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000674:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8000678:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800067c:	d10b      	bne.n	8000696 <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 800067e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000680:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8000682:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000684:	b13d      	cbz	r5, 8000696 <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8000686:	b9f8      	cbnz	r0, 80006c8 <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 8000688:	2a01      	cmp	r2, #1
 800068a:	d02d      	beq.n	80006e8 <HAL_DMA_Init+0xdc>
 800068c:	d301      	bcc.n	8000692 <HAL_DMA_Init+0x86>
 800068e:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000690:	d101      	bne.n	8000696 <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000692:	01ea      	lsls	r2, r5, #7
 8000694:	d42b      	bmi.n	80006ee <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 8000696:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000698:	4620      	mov	r0, r4
 800069a:	f7ff ffa1 	bl	80005e0 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800069e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80006a0:	233f      	movs	r3, #63	; 0x3f
 80006a2:	4093      	lsls	r3, r2
 80006a4:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80006a6:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 80006a8:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80006aa:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80006ac:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 80006b0:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80006b2:	f7ff ff3b 	bl	800052c <HAL_GetTick>
 80006b6:	1b40      	subs	r0, r0, r5
 80006b8:	2805      	cmp	r0, #5
 80006ba:	d9b9      	bls.n	8000630 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80006bc:	2320      	movs	r3, #32
 80006be:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80006c0:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 80006c2:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 80006c6:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80006c8:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 80006cc:	d113      	bne.n	80006f6 <HAL_DMA_Init+0xea>
    switch (tmp)
 80006ce:	2a03      	cmp	r2, #3
 80006d0:	d8e1      	bhi.n	8000696 <HAL_DMA_Init+0x8a>
 80006d2:	a001      	add	r0, pc, #4	; (adr r0, 80006d8 <HAL_DMA_Init+0xcc>)
 80006d4:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 80006d8:	080006ef 	.word	0x080006ef
 80006dc:	08000693 	.word	0x08000693
 80006e0:	080006ef 	.word	0x080006ef
 80006e4:	080006e9 	.word	0x080006e9
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80006e8:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 80006ec:	d1d3      	bne.n	8000696 <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80006ee:	2340      	movs	r3, #64	; 0x40
 80006f0:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 80006f2:	2001      	movs	r0, #1
 80006f4:	e7e5      	b.n	80006c2 <HAL_DMA_Init+0xb6>
    switch (tmp)
 80006f6:	2a02      	cmp	r2, #2
 80006f8:	d9f9      	bls.n	80006ee <HAL_DMA_Init+0xe2>
 80006fa:	2a03      	cmp	r2, #3
 80006fc:	e7c8      	b.n	8000690 <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 80006fe:	2001      	movs	r0, #1
 8000700:	bd70      	pop	{r4, r5, r6, pc}
 8000702:	bf00      	nop
 8000704:	f010803f 	.word	0xf010803f

08000708 <HAL_DMA_Start_IT>:
{
 8000708:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 800070a:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 800070e:	2c01      	cmp	r4, #1
 8000710:	d032      	beq.n	8000778 <HAL_DMA_Start_IT+0x70>
 8000712:	2401      	movs	r4, #1
 8000714:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8000718:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800071c:	6d86      	ldr	r6, [r0, #88]	; 0x58
  if(HAL_DMA_STATE_READY == hdma->State)
 800071e:	2c01      	cmp	r4, #1
 8000720:	f04f 0500 	mov.w	r5, #0
 8000724:	f04f 0402 	mov.w	r4, #2
 8000728:	d124      	bne.n	8000774 <HAL_DMA_Start_IT+0x6c>
    hdma->State = HAL_DMA_STATE_BUSY;
 800072a:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800072e:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000730:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8000732:	6825      	ldr	r5, [r4, #0]
 8000734:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8000738:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 800073a:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800073c:	6883      	ldr	r3, [r0, #8]
 800073e:	2b40      	cmp	r3, #64	; 0x40
    hdma->Instance->PAR = DstAddress;
 8000740:	bf0e      	itee	eq
 8000742:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 8000744:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 8000746:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000748:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = SrcAddress;
 800074a:	bf08      	it	eq
 800074c:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800074e:	233f      	movs	r3, #63	; 0x3f
 8000750:	4093      	lsls	r3, r2
 8000752:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000754:	6823      	ldr	r3, [r4, #0]
 8000756:	f043 0316 	orr.w	r3, r3, #22
 800075a:	6023      	str	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 800075c:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800075e:	b11b      	cbz	r3, 8000768 <HAL_DMA_Start_IT+0x60>
      hdma->Instance->CR  |= DMA_IT_HT;
 8000760:	6823      	ldr	r3, [r4, #0]
 8000762:	f043 0308 	orr.w	r3, r3, #8
 8000766:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8000768:	6823      	ldr	r3, [r4, #0]
 800076a:	f043 0301 	orr.w	r3, r3, #1
 800076e:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000770:	2000      	movs	r0, #0
 8000772:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hdma);	  
 8000774:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 8000778:	2002      	movs	r0, #2
}
 800077a:	bd70      	pop	{r4, r5, r6, pc}

0800077c <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800077c:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8000780:	2b02      	cmp	r3, #2
 8000782:	d003      	beq.n	800078c <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000784:	2380      	movs	r3, #128	; 0x80
 8000786:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8000788:	2001      	movs	r0, #1
 800078a:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 800078c:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 800078e:	2305      	movs	r3, #5
 8000790:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8000794:	6813      	ldr	r3, [r2, #0]
 8000796:	f023 0301 	bic.w	r3, r3, #1
 800079a:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 800079c:	2000      	movs	r0, #0
}
 800079e:	4770      	bx	lr

080007a0 <HAL_DMA_IRQHandler>:
{
 80007a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 80007a2:	2300      	movs	r3, #0
 80007a4:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 80007a6:	4b5a      	ldr	r3, [pc, #360]	; (8000910 <HAL_DMA_IRQHandler+0x170>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80007a8:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 80007aa:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80007ac:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 80007ae:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80007b0:	2208      	movs	r2, #8
 80007b2:	409a      	lsls	r2, r3
 80007b4:	4216      	tst	r6, r2
{
 80007b6:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80007b8:	d00c      	beq.n	80007d4 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80007ba:	6801      	ldr	r1, [r0, #0]
 80007bc:	6808      	ldr	r0, [r1, #0]
 80007be:	0740      	lsls	r0, r0, #29
 80007c0:	d508      	bpl.n	80007d4 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80007c2:	6808      	ldr	r0, [r1, #0]
 80007c4:	f020 0004 	bic.w	r0, r0, #4
 80007c8:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80007ca:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80007cc:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80007ce:	f042 0201 	orr.w	r2, r2, #1
 80007d2:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80007d4:	2201      	movs	r2, #1
 80007d6:	409a      	lsls	r2, r3
 80007d8:	4216      	tst	r6, r2
 80007da:	d008      	beq.n	80007ee <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80007dc:	6821      	ldr	r1, [r4, #0]
 80007de:	6949      	ldr	r1, [r1, #20]
 80007e0:	0609      	lsls	r1, r1, #24
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80007e2:	bf41      	itttt	mi
 80007e4:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80007e6:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 80007e8:	f042 0202 	orrmi.w	r2, r2, #2
 80007ec:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80007ee:	2204      	movs	r2, #4
 80007f0:	409a      	lsls	r2, r3
 80007f2:	4216      	tst	r6, r2
 80007f4:	d008      	beq.n	8000808 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80007f6:	6821      	ldr	r1, [r4, #0]
 80007f8:	6809      	ldr	r1, [r1, #0]
 80007fa:	0788      	lsls	r0, r1, #30
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80007fc:	bf41      	itttt	mi
 80007fe:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8000800:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 8000802:	f042 0204 	orrmi.w	r2, r2, #4
 8000806:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8000808:	2210      	movs	r2, #16
 800080a:	409a      	lsls	r2, r3
 800080c:	4216      	tst	r6, r2
 800080e:	d010      	beq.n	8000832 <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8000810:	6823      	ldr	r3, [r4, #0]
 8000812:	6819      	ldr	r1, [r3, #0]
 8000814:	0709      	lsls	r1, r1, #28
 8000816:	d50c      	bpl.n	8000832 <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8000818:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800081a:	681a      	ldr	r2, [r3, #0]
 800081c:	0350      	lsls	r0, r2, #13
 800081e:	d535      	bpl.n	800088c <HAL_DMA_IRQHandler+0xec>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	0319      	lsls	r1, r3, #12
 8000824:	d401      	bmi.n	800082a <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 8000826:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000828:	e000      	b.n	800082c <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 800082a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 800082c:	b10b      	cbz	r3, 8000832 <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 800082e:	4620      	mov	r0, r4
 8000830:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8000832:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8000834:	2220      	movs	r2, #32
 8000836:	408a      	lsls	r2, r1
 8000838:	4216      	tst	r6, r2
 800083a:	d038      	beq.n	80008ae <HAL_DMA_IRQHandler+0x10e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800083c:	6823      	ldr	r3, [r4, #0]
 800083e:	6818      	ldr	r0, [r3, #0]
 8000840:	06c6      	lsls	r6, r0, #27
 8000842:	d534      	bpl.n	80008ae <HAL_DMA_IRQHandler+0x10e>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000844:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000846:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 800084a:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800084c:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800084e:	d125      	bne.n	800089c <HAL_DMA_IRQHandler+0xfc>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000850:	f022 0216 	bic.w	r2, r2, #22
 8000854:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000856:	695a      	ldr	r2, [r3, #20]
 8000858:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800085c:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800085e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000860:	b90a      	cbnz	r2, 8000866 <HAL_DMA_IRQHandler+0xc6>
 8000862:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8000864:	b11a      	cbz	r2, 800086e <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000866:	681a      	ldr	r2, [r3, #0]
 8000868:	f022 0208 	bic.w	r2, r2, #8
 800086c:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800086e:	233f      	movs	r3, #63	; 0x3f
 8000870:	408b      	lsls	r3, r1
 8000872:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 8000874:	2300      	movs	r3, #0
 8000876:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 800087a:	2301      	movs	r3, #1
 800087c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8000880:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 8000882:	b10b      	cbz	r3, 8000888 <HAL_DMA_IRQHandler+0xe8>
      hdma->XferErrorCallback(hdma);
 8000884:	4620      	mov	r0, r4
 8000886:	4798      	blx	r3
}
 8000888:	b003      	add	sp, #12
 800088a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800088c:	681a      	ldr	r2, [r3, #0]
 800088e:	05d2      	lsls	r2, r2, #23
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000890:	bf5e      	ittt	pl
 8000892:	681a      	ldrpl	r2, [r3, #0]
 8000894:	f022 0208 	bicpl.w	r2, r2, #8
 8000898:	601a      	strpl	r2, [r3, #0]
 800089a:	e7c4      	b.n	8000826 <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800089c:	0350      	lsls	r0, r2, #13
 800089e:	d528      	bpl.n	80008f2 <HAL_DMA_IRQHandler+0x152>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	0319      	lsls	r1, r3, #12
 80008a4:	d432      	bmi.n	800090c <HAL_DMA_IRQHandler+0x16c>
          if(hdma->XferM1CpltCallback != NULL)
 80008a6:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 80008a8:	b10b      	cbz	r3, 80008ae <HAL_DMA_IRQHandler+0x10e>
          hdma->XferCpltCallback(hdma);
 80008aa:	4620      	mov	r0, r4
 80008ac:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80008ae:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d0e9      	beq.n	8000888 <HAL_DMA_IRQHandler+0xe8>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80008b4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80008b6:	07da      	lsls	r2, r3, #31
 80008b8:	d519      	bpl.n	80008ee <HAL_DMA_IRQHandler+0x14e>
      hdma->State = HAL_DMA_STATE_ABORT;
 80008ba:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 80008bc:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 80008be:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 80008c2:	6813      	ldr	r3, [r2, #0]
 80008c4:	f023 0301 	bic.w	r3, r3, #1
 80008c8:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 80008ca:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80008ce:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 80008d2:	9b01      	ldr	r3, [sp, #4]
 80008d4:	3301      	adds	r3, #1
 80008d6:	429f      	cmp	r7, r3
 80008d8:	9301      	str	r3, [sp, #4]
 80008da:	d302      	bcc.n	80008e2 <HAL_DMA_IRQHandler+0x142>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80008dc:	6813      	ldr	r3, [r2, #0]
 80008de:	07db      	lsls	r3, r3, #31
 80008e0:	d4f7      	bmi.n	80008d2 <HAL_DMA_IRQHandler+0x132>
      __HAL_UNLOCK(hdma);
 80008e2:	2300      	movs	r3, #0
 80008e4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 80008e8:	2301      	movs	r3, #1
 80008ea:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 80008ee:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80008f0:	e7c7      	b.n	8000882 <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80008f2:	681a      	ldr	r2, [r3, #0]
 80008f4:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 80008f8:	d108      	bne.n	800090c <HAL_DMA_IRQHandler+0x16c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80008fa:	6819      	ldr	r1, [r3, #0]
 80008fc:	f021 0110 	bic.w	r1, r1, #16
 8000900:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8000902:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 8000904:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8000908:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 800090c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800090e:	e7cb      	b.n	80008a8 <HAL_DMA_IRQHandler+0x108>
 8000910:	2000000c 	.word	0x2000000c

08000914 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000918:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800091a:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800091c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8000acc <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000920:	4a68      	ldr	r2, [pc, #416]	; (8000ac4 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000922:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8000ad0 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000926:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000928:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 800092a:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800092c:	9d01      	ldr	r5, [sp, #4]
    ioposition = 0x01U << position;
 800092e:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000930:	4025      	ands	r5, r4
    if(iocurrent == ioposition)
 8000932:	42ac      	cmp	r4, r5
 8000934:	f040 80b0 	bne.w	8000a98 <HAL_GPIO_Init+0x184>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000938:	684c      	ldr	r4, [r1, #4]
 800093a:	f024 0c10 	bic.w	ip, r4, #16
 800093e:	f10c 36ff 	add.w	r6, ip, #4294967295	; 0xffffffff
 8000942:	2e01      	cmp	r6, #1
 8000944:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000948:	d812      	bhi.n	8000970 <HAL_GPIO_Init+0x5c>
        temp = GPIOx->OSPEEDR; 
 800094a:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800094c:	2603      	movs	r6, #3
 800094e:	fa06 f60e 	lsl.w	r6, r6, lr
 8000952:	ea27 0706 	bic.w	r7, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000956:	68ce      	ldr	r6, [r1, #12]
 8000958:	fa06 f60e 	lsl.w	r6, r6, lr
 800095c:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 800095e:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8000960:	6847      	ldr	r7, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000962:	f3c4 1600 	ubfx	r6, r4, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000966:	ea27 0705 	bic.w	r7, r7, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800096a:	409e      	lsls	r6, r3
 800096c:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 800096e:	6046      	str	r6, [r0, #4]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000970:	2603      	movs	r6, #3
      temp = GPIOx->PUPDR;
 8000972:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000974:	fa06 f60e 	lsl.w	r6, r6, lr
 8000978:	43f6      	mvns	r6, r6
 800097a:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800097e:	688f      	ldr	r7, [r1, #8]
 8000980:	fa07 f70e 	lsl.w	r7, r7, lr
 8000984:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000988:	f1bc 0f02 	cmp.w	ip, #2
      GPIOx->PUPDR = temp;
 800098c:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800098e:	d116      	bne.n	80009be <HAL_GPIO_Init+0xaa>
        temp = GPIOx->AFR[position >> 3U];
 8000990:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000994:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000998:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 800099c:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80009a0:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80009a4:	f04f 0c0f 	mov.w	ip, #15
 80009a8:	fa0c fc0b 	lsl.w	ip, ip, fp
 80009ac:	ea27 0c0c 	bic.w	ip, r7, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80009b0:	690f      	ldr	r7, [r1, #16]
 80009b2:	fa07 f70b 	lsl.w	r7, r7, fp
 80009b6:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->AFR[position >> 3U] = temp;
 80009ba:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 80009be:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80009c0:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80009c2:	f004 0703 	and.w	r7, r4, #3
 80009c6:	fa07 fe0e 	lsl.w	lr, r7, lr
 80009ca:	ea4e 0606 	orr.w	r6, lr, r6
      GPIOx->MODER = temp;
 80009ce:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009d0:	00e6      	lsls	r6, r4, #3
 80009d2:	d561      	bpl.n	8000a98 <HAL_GPIO_Init+0x184>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009d4:	f04f 0b00 	mov.w	fp, #0
 80009d8:	f8cd b00c 	str.w	fp, [sp, #12]
 80009dc:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009e0:	4e39      	ldr	r6, [pc, #228]	; (8000ac8 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009e2:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 80009e6:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 80009ea:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 80009ee:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 80009f2:	9703      	str	r7, [sp, #12]
 80009f4:	9f03      	ldr	r7, [sp, #12]
 80009f6:	f023 0703 	bic.w	r7, r3, #3
 80009fa:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80009fe:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000a02:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000a06:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000a0a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000a0e:	f04f 0e0f 	mov.w	lr, #15
 8000a12:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a16:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000a18:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a1c:	d043      	beq.n	8000aa6 <HAL_GPIO_Init+0x192>
 8000a1e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000a22:	42b0      	cmp	r0, r6
 8000a24:	d041      	beq.n	8000aaa <HAL_GPIO_Init+0x196>
 8000a26:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000a2a:	42b0      	cmp	r0, r6
 8000a2c:	d03f      	beq.n	8000aae <HAL_GPIO_Init+0x19a>
 8000a2e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000a32:	42b0      	cmp	r0, r6
 8000a34:	d03d      	beq.n	8000ab2 <HAL_GPIO_Init+0x19e>
 8000a36:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000a3a:	42b0      	cmp	r0, r6
 8000a3c:	d03b      	beq.n	8000ab6 <HAL_GPIO_Init+0x1a2>
 8000a3e:	4548      	cmp	r0, r9
 8000a40:	d03b      	beq.n	8000aba <HAL_GPIO_Init+0x1a6>
 8000a42:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8000a46:	42b0      	cmp	r0, r6
 8000a48:	d039      	beq.n	8000abe <HAL_GPIO_Init+0x1aa>
 8000a4a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000a4e:	42b0      	cmp	r0, r6
 8000a50:	bf14      	ite	ne
 8000a52:	2608      	movne	r6, #8
 8000a54:	2607      	moveq	r6, #7
 8000a56:	fa06 f60c 	lsl.w	r6, r6, ip
 8000a5a:	ea46 060e 	orr.w	r6, r6, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a5e:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8000a60:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000a62:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a64:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000a68:	bf0c      	ite	eq
 8000a6a:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000a6c:	432e      	orrne	r6, r5
        }
        EXTI->IMR = temp;
 8000a6e:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 8000a70:	6856      	ldr	r6, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a72:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000a76:	bf0c      	ite	eq
 8000a78:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000a7a:	432e      	orrne	r6, r5
        }
        EXTI->EMR = temp;
 8000a7c:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a7e:	6896      	ldr	r6, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a80:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000a84:	bf0c      	ite	eq
 8000a86:	403e      	andeq	r6, r7
        {
          temp |= iocurrent;
 8000a88:	432e      	orrne	r6, r5
        }
        EXTI->RTSR = temp;
 8000a8a:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 8000a8c:	68d6      	ldr	r6, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a8e:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000a90:	bf54      	ite	pl
 8000a92:	403e      	andpl	r6, r7
        {
          temp |= iocurrent;
 8000a94:	432e      	orrmi	r6, r5
        }
        EXTI->FTSR = temp;
 8000a96:	60d6      	str	r6, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000a98:	3301      	adds	r3, #1
 8000a9a:	2b10      	cmp	r3, #16
 8000a9c:	f47f af45 	bne.w	800092a <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000aa0:	b005      	add	sp, #20
 8000aa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000aa6:	465e      	mov	r6, fp
 8000aa8:	e7d5      	b.n	8000a56 <HAL_GPIO_Init+0x142>
 8000aaa:	2601      	movs	r6, #1
 8000aac:	e7d3      	b.n	8000a56 <HAL_GPIO_Init+0x142>
 8000aae:	2602      	movs	r6, #2
 8000ab0:	e7d1      	b.n	8000a56 <HAL_GPIO_Init+0x142>
 8000ab2:	2603      	movs	r6, #3
 8000ab4:	e7cf      	b.n	8000a56 <HAL_GPIO_Init+0x142>
 8000ab6:	2604      	movs	r6, #4
 8000ab8:	e7cd      	b.n	8000a56 <HAL_GPIO_Init+0x142>
 8000aba:	2605      	movs	r6, #5
 8000abc:	e7cb      	b.n	8000a56 <HAL_GPIO_Init+0x142>
 8000abe:	2606      	movs	r6, #6
 8000ac0:	e7c9      	b.n	8000a56 <HAL_GPIO_Init+0x142>
 8000ac2:	bf00      	nop
 8000ac4:	40013c00 	.word	0x40013c00
 8000ac8:	40020000 	.word	0x40020000
 8000acc:	40023800 	.word	0x40023800
 8000ad0:	40021400 	.word	0x40021400

08000ad4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ad4:	b10a      	cbz	r2, 8000ada <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000ad6:	6181      	str	r1, [r0, #24]
 8000ad8:	4770      	bx	lr
 8000ada:	0409      	lsls	r1, r1, #16
 8000adc:	e7fb      	b.n	8000ad6 <HAL_GPIO_WritePin+0x2>

08000ade <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000ade:	6943      	ldr	r3, [r0, #20]
 8000ae0:	ea31 0303 	bics.w	r3, r1, r3
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000ae4:	bf08      	it	eq
 8000ae6:	0409      	lsleq	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ae8:	6181      	str	r1, [r0, #24]
 8000aea:	4770      	bx	lr

08000aec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000aec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000af0:	4604      	mov	r4, r0
 8000af2:	b908      	cbnz	r0, 8000af8 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8000af4:	2001      	movs	r0, #1
 8000af6:	e03f      	b.n	8000b78 <HAL_RCC_OscConfig+0x8c>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000af8:	6803      	ldr	r3, [r0, #0]
 8000afa:	07dd      	lsls	r5, r3, #31
 8000afc:	d410      	bmi.n	8000b20 <HAL_RCC_OscConfig+0x34>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000afe:	6823      	ldr	r3, [r4, #0]
 8000b00:	0798      	lsls	r0, r3, #30
 8000b02:	d45a      	bmi.n	8000bba <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000b04:	6823      	ldr	r3, [r4, #0]
 8000b06:	071a      	lsls	r2, r3, #28
 8000b08:	f100 809c 	bmi.w	8000c44 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000b0c:	6823      	ldr	r3, [r4, #0]
 8000b0e:	075b      	lsls	r3, r3, #29
 8000b10:	f100 80ba 	bmi.w	8000c88 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000b14:	69a0      	ldr	r0, [r4, #24]
 8000b16:	2800      	cmp	r0, #0
 8000b18:	f040 811b 	bne.w	8000d52 <HAL_RCC_OscConfig+0x266>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8000b1c:	2000      	movs	r0, #0
 8000b1e:	e02b      	b.n	8000b78 <HAL_RCC_OscConfig+0x8c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000b20:	4ba4      	ldr	r3, [pc, #656]	; (8000db4 <HAL_RCC_OscConfig+0x2c8>)
 8000b22:	689a      	ldr	r2, [r3, #8]
 8000b24:	f002 020c 	and.w	r2, r2, #12
 8000b28:	2a04      	cmp	r2, #4
 8000b2a:	d007      	beq.n	8000b3c <HAL_RCC_OscConfig+0x50>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000b2c:	689a      	ldr	r2, [r3, #8]
 8000b2e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000b32:	2a08      	cmp	r2, #8
 8000b34:	d10a      	bne.n	8000b4c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000b36:	685b      	ldr	r3, [r3, #4]
 8000b38:	0259      	lsls	r1, r3, #9
 8000b3a:	d507      	bpl.n	8000b4c <HAL_RCC_OscConfig+0x60>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b3c:	4b9d      	ldr	r3, [pc, #628]	; (8000db4 <HAL_RCC_OscConfig+0x2c8>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	039a      	lsls	r2, r3, #14
 8000b42:	d5dc      	bpl.n	8000afe <HAL_RCC_OscConfig+0x12>
 8000b44:	6863      	ldr	r3, [r4, #4]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d1d9      	bne.n	8000afe <HAL_RCC_OscConfig+0x12>
 8000b4a:	e7d3      	b.n	8000af4 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b4c:	6863      	ldr	r3, [r4, #4]
 8000b4e:	4d99      	ldr	r5, [pc, #612]	; (8000db4 <HAL_RCC_OscConfig+0x2c8>)
 8000b50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b54:	d113      	bne.n	8000b7e <HAL_RCC_OscConfig+0x92>
 8000b56:	682b      	ldr	r3, [r5, #0]
 8000b58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b5c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000b5e:	f7ff fce5 	bl	800052c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b62:	4d94      	ldr	r5, [pc, #592]	; (8000db4 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8000b64:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b66:	682b      	ldr	r3, [r5, #0]
 8000b68:	039b      	lsls	r3, r3, #14
 8000b6a:	d4c8      	bmi.n	8000afe <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b6c:	f7ff fcde 	bl	800052c <HAL_GetTick>
 8000b70:	1b80      	subs	r0, r0, r6
 8000b72:	2864      	cmp	r0, #100	; 0x64
 8000b74:	d9f7      	bls.n	8000b66 <HAL_RCC_OscConfig+0x7a>
            return HAL_TIMEOUT;
 8000b76:	2003      	movs	r0, #3
}
 8000b78:	b002      	add	sp, #8
 8000b7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b7e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000b82:	d104      	bne.n	8000b8e <HAL_RCC_OscConfig+0xa2>
 8000b84:	682b      	ldr	r3, [r5, #0]
 8000b86:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b8a:	602b      	str	r3, [r5, #0]
 8000b8c:	e7e3      	b.n	8000b56 <HAL_RCC_OscConfig+0x6a>
 8000b8e:	682a      	ldr	r2, [r5, #0]
 8000b90:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000b94:	602a      	str	r2, [r5, #0]
 8000b96:	682a      	ldr	r2, [r5, #0]
 8000b98:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000b9c:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d1dd      	bne.n	8000b5e <HAL_RCC_OscConfig+0x72>
        tickstart = HAL_GetTick();
 8000ba2:	f7ff fcc3 	bl	800052c <HAL_GetTick>
 8000ba6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ba8:	682b      	ldr	r3, [r5, #0]
 8000baa:	039f      	lsls	r7, r3, #14
 8000bac:	d5a7      	bpl.n	8000afe <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000bae:	f7ff fcbd 	bl	800052c <HAL_GetTick>
 8000bb2:	1b80      	subs	r0, r0, r6
 8000bb4:	2864      	cmp	r0, #100	; 0x64
 8000bb6:	d9f7      	bls.n	8000ba8 <HAL_RCC_OscConfig+0xbc>
 8000bb8:	e7dd      	b.n	8000b76 <HAL_RCC_OscConfig+0x8a>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000bba:	4b7e      	ldr	r3, [pc, #504]	; (8000db4 <HAL_RCC_OscConfig+0x2c8>)
 8000bbc:	689a      	ldr	r2, [r3, #8]
 8000bbe:	f012 0f0c 	tst.w	r2, #12
 8000bc2:	d007      	beq.n	8000bd4 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000bc4:	689a      	ldr	r2, [r3, #8]
 8000bc6:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000bca:	2a08      	cmp	r2, #8
 8000bcc:	d111      	bne.n	8000bf2 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	025e      	lsls	r6, r3, #9
 8000bd2:	d40e      	bmi.n	8000bf2 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000bd4:	4b77      	ldr	r3, [pc, #476]	; (8000db4 <HAL_RCC_OscConfig+0x2c8>)
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	0795      	lsls	r5, r2, #30
 8000bda:	d502      	bpl.n	8000be2 <HAL_RCC_OscConfig+0xf6>
 8000bdc:	68e2      	ldr	r2, [r4, #12]
 8000bde:	2a01      	cmp	r2, #1
 8000be0:	d188      	bne.n	8000af4 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000be2:	681a      	ldr	r2, [r3, #0]
 8000be4:	6921      	ldr	r1, [r4, #16]
 8000be6:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000bea:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8000bee:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000bf0:	e788      	b.n	8000b04 <HAL_RCC_OscConfig+0x18>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000bf2:	68e2      	ldr	r2, [r4, #12]
 8000bf4:	4b70      	ldr	r3, [pc, #448]	; (8000db8 <HAL_RCC_OscConfig+0x2cc>)
 8000bf6:	b1b2      	cbz	r2, 8000c26 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8000bf8:	2201      	movs	r2, #1
 8000bfa:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000bfc:	f7ff fc96 	bl	800052c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c00:	4d6c      	ldr	r5, [pc, #432]	; (8000db4 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8000c02:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c04:	682b      	ldr	r3, [r5, #0]
 8000c06:	0798      	lsls	r0, r3, #30
 8000c08:	d507      	bpl.n	8000c1a <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c0a:	682b      	ldr	r3, [r5, #0]
 8000c0c:	6922      	ldr	r2, [r4, #16]
 8000c0e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000c12:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000c16:	602b      	str	r3, [r5, #0]
 8000c18:	e774      	b.n	8000b04 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c1a:	f7ff fc87 	bl	800052c <HAL_GetTick>
 8000c1e:	1b80      	subs	r0, r0, r6
 8000c20:	2802      	cmp	r0, #2
 8000c22:	d9ef      	bls.n	8000c04 <HAL_RCC_OscConfig+0x118>
 8000c24:	e7a7      	b.n	8000b76 <HAL_RCC_OscConfig+0x8a>
        __HAL_RCC_HSI_DISABLE();
 8000c26:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000c28:	f7ff fc80 	bl	800052c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c2c:	4d61      	ldr	r5, [pc, #388]	; (8000db4 <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8000c2e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000c30:	682b      	ldr	r3, [r5, #0]
 8000c32:	0799      	lsls	r1, r3, #30
 8000c34:	f57f af66 	bpl.w	8000b04 <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c38:	f7ff fc78 	bl	800052c <HAL_GetTick>
 8000c3c:	1b80      	subs	r0, r0, r6
 8000c3e:	2802      	cmp	r0, #2
 8000c40:	d9f6      	bls.n	8000c30 <HAL_RCC_OscConfig+0x144>
 8000c42:	e798      	b.n	8000b76 <HAL_RCC_OscConfig+0x8a>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000c44:	6962      	ldr	r2, [r4, #20]
 8000c46:	4b5d      	ldr	r3, [pc, #372]	; (8000dbc <HAL_RCC_OscConfig+0x2d0>)
 8000c48:	b17a      	cbz	r2, 8000c6a <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000c4e:	f7ff fc6d 	bl	800052c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c52:	4d58      	ldr	r5, [pc, #352]	; (8000db4 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8000c54:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000c56:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000c58:	079f      	lsls	r7, r3, #30
 8000c5a:	f53f af57 	bmi.w	8000b0c <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000c5e:	f7ff fc65 	bl	800052c <HAL_GetTick>
 8000c62:	1b80      	subs	r0, r0, r6
 8000c64:	2802      	cmp	r0, #2
 8000c66:	d9f6      	bls.n	8000c56 <HAL_RCC_OscConfig+0x16a>
 8000c68:	e785      	b.n	8000b76 <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_LSI_DISABLE();
 8000c6a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000c6c:	f7ff fc5e 	bl	800052c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c70:	4d50      	ldr	r5, [pc, #320]	; (8000db4 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8000c72:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000c74:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8000c76:	0798      	lsls	r0, r3, #30
 8000c78:	f57f af48 	bpl.w	8000b0c <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000c7c:	f7ff fc56 	bl	800052c <HAL_GetTick>
 8000c80:	1b80      	subs	r0, r0, r6
 8000c82:	2802      	cmp	r0, #2
 8000c84:	d9f6      	bls.n	8000c74 <HAL_RCC_OscConfig+0x188>
 8000c86:	e776      	b.n	8000b76 <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c88:	4b4a      	ldr	r3, [pc, #296]	; (8000db4 <HAL_RCC_OscConfig+0x2c8>)
 8000c8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c8c:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8000c90:	d128      	bne.n	8000ce4 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000c92:	9201      	str	r2, [sp, #4]
 8000c94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c96:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000c9a:	641a      	str	r2, [r3, #64]	; 0x40
 8000c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ca2:	9301      	str	r3, [sp, #4]
 8000ca4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000ca6:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ca8:	4d45      	ldr	r5, [pc, #276]	; (8000dc0 <HAL_RCC_OscConfig+0x2d4>)
 8000caa:	682b      	ldr	r3, [r5, #0]
 8000cac:	05d9      	lsls	r1, r3, #23
 8000cae:	d51b      	bpl.n	8000ce8 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000cb0:	68a3      	ldr	r3, [r4, #8]
 8000cb2:	4d40      	ldr	r5, [pc, #256]	; (8000db4 <HAL_RCC_OscConfig+0x2c8>)
 8000cb4:	2b01      	cmp	r3, #1
 8000cb6:	d127      	bne.n	8000d08 <HAL_RCC_OscConfig+0x21c>
 8000cb8:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000cba:	f043 0301 	orr.w	r3, r3, #1
 8000cbe:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000cc0:	f7ff fc34 	bl	800052c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000cc4:	4d3b      	ldr	r5, [pc, #236]	; (8000db4 <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8000cc6:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000cc8:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ccc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000cce:	079b      	lsls	r3, r3, #30
 8000cd0:	d539      	bpl.n	8000d46 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	f43f af1e 	beq.w	8000b14 <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000cd8:	4a36      	ldr	r2, [pc, #216]	; (8000db4 <HAL_RCC_OscConfig+0x2c8>)
 8000cda:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000cdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000ce0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ce2:	e717      	b.n	8000b14 <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8000ce4:	2600      	movs	r6, #0
 8000ce6:	e7df      	b.n	8000ca8 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ce8:	682b      	ldr	r3, [r5, #0]
 8000cea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cee:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000cf0:	f7ff fc1c 	bl	800052c <HAL_GetTick>
 8000cf4:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000cf6:	682b      	ldr	r3, [r5, #0]
 8000cf8:	05da      	lsls	r2, r3, #23
 8000cfa:	d4d9      	bmi.n	8000cb0 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000cfc:	f7ff fc16 	bl	800052c <HAL_GetTick>
 8000d00:	1bc0      	subs	r0, r0, r7
 8000d02:	2802      	cmp	r0, #2
 8000d04:	d9f7      	bls.n	8000cf6 <HAL_RCC_OscConfig+0x20a>
 8000d06:	e736      	b.n	8000b76 <HAL_RCC_OscConfig+0x8a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d08:	2b05      	cmp	r3, #5
 8000d0a:	d104      	bne.n	8000d16 <HAL_RCC_OscConfig+0x22a>
 8000d0c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000d0e:	f043 0304 	orr.w	r3, r3, #4
 8000d12:	672b      	str	r3, [r5, #112]	; 0x70
 8000d14:	e7d0      	b.n	8000cb8 <HAL_RCC_OscConfig+0x1cc>
 8000d16:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000d18:	f022 0201 	bic.w	r2, r2, #1
 8000d1c:	672a      	str	r2, [r5, #112]	; 0x70
 8000d1e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000d20:	f022 0204 	bic.w	r2, r2, #4
 8000d24:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d1ca      	bne.n	8000cc0 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8000d2a:	f7ff fbff 	bl	800052c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d2e:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000d32:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000d34:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000d36:	0798      	lsls	r0, r3, #30
 8000d38:	d5cb      	bpl.n	8000cd2 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d3a:	f7ff fbf7 	bl	800052c <HAL_GetTick>
 8000d3e:	1bc0      	subs	r0, r0, r7
 8000d40:	4540      	cmp	r0, r8
 8000d42:	d9f7      	bls.n	8000d34 <HAL_RCC_OscConfig+0x248>
 8000d44:	e717      	b.n	8000b76 <HAL_RCC_OscConfig+0x8a>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d46:	f7ff fbf1 	bl	800052c <HAL_GetTick>
 8000d4a:	1bc0      	subs	r0, r0, r7
 8000d4c:	4540      	cmp	r0, r8
 8000d4e:	d9bd      	bls.n	8000ccc <HAL_RCC_OscConfig+0x1e0>
 8000d50:	e711      	b.n	8000b76 <HAL_RCC_OscConfig+0x8a>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000d52:	4d18      	ldr	r5, [pc, #96]	; (8000db4 <HAL_RCC_OscConfig+0x2c8>)
 8000d54:	68ab      	ldr	r3, [r5, #8]
 8000d56:	f003 030c 	and.w	r3, r3, #12
 8000d5a:	2b08      	cmp	r3, #8
 8000d5c:	d047      	beq.n	8000dee <HAL_RCC_OscConfig+0x302>
 8000d5e:	4e19      	ldr	r6, [pc, #100]	; (8000dc4 <HAL_RCC_OscConfig+0x2d8>)
 8000d60:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000d62:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8000d64:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000d66:	d135      	bne.n	8000dd4 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8000d68:	f7ff fbe0 	bl	800052c <HAL_GetTick>
 8000d6c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000d6e:	682b      	ldr	r3, [r5, #0]
 8000d70:	0199      	lsls	r1, r3, #6
 8000d72:	d429      	bmi.n	8000dc8 <HAL_RCC_OscConfig+0x2dc>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000d74:	6a22      	ldr	r2, [r4, #32]
 8000d76:	69e3      	ldr	r3, [r4, #28]
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000d7c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000d80:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000d82:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000d86:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d88:	4c0a      	ldr	r4, [pc, #40]	; (8000db4 <HAL_RCC_OscConfig+0x2c8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000d8a:	0852      	lsrs	r2, r2, #1
 8000d8c:	3a01      	subs	r2, #1
 8000d8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d92:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000d94:	2301      	movs	r3, #1
 8000d96:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000d98:	f7ff fbc8 	bl	800052c <HAL_GetTick>
 8000d9c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d9e:	6823      	ldr	r3, [r4, #0]
 8000da0:	019a      	lsls	r2, r3, #6
 8000da2:	f53f aebb 	bmi.w	8000b1c <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000da6:	f7ff fbc1 	bl	800052c <HAL_GetTick>
 8000daa:	1b40      	subs	r0, r0, r5
 8000dac:	2802      	cmp	r0, #2
 8000dae:	d9f6      	bls.n	8000d9e <HAL_RCC_OscConfig+0x2b2>
 8000db0:	e6e1      	b.n	8000b76 <HAL_RCC_OscConfig+0x8a>
 8000db2:	bf00      	nop
 8000db4:	40023800 	.word	0x40023800
 8000db8:	42470000 	.word	0x42470000
 8000dbc:	42470e80 	.word	0x42470e80
 8000dc0:	40007000 	.word	0x40007000
 8000dc4:	42470060 	.word	0x42470060
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000dc8:	f7ff fbb0 	bl	800052c <HAL_GetTick>
 8000dcc:	1bc0      	subs	r0, r0, r7
 8000dce:	2802      	cmp	r0, #2
 8000dd0:	d9cd      	bls.n	8000d6e <HAL_RCC_OscConfig+0x282>
 8000dd2:	e6d0      	b.n	8000b76 <HAL_RCC_OscConfig+0x8a>
        tickstart = HAL_GetTick();
 8000dd4:	f7ff fbaa 	bl	800052c <HAL_GetTick>
 8000dd8:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000dda:	682b      	ldr	r3, [r5, #0]
 8000ddc:	019b      	lsls	r3, r3, #6
 8000dde:	f57f ae9d 	bpl.w	8000b1c <HAL_RCC_OscConfig+0x30>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000de2:	f7ff fba3 	bl	800052c <HAL_GetTick>
 8000de6:	1b00      	subs	r0, r0, r4
 8000de8:	2802      	cmp	r0, #2
 8000dea:	d9f6      	bls.n	8000dda <HAL_RCC_OscConfig+0x2ee>
 8000dec:	e6c3      	b.n	8000b76 <HAL_RCC_OscConfig+0x8a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000dee:	2801      	cmp	r0, #1
 8000df0:	f43f aec2 	beq.w	8000b78 <HAL_RCC_OscConfig+0x8c>
        pll_config = RCC->PLLCFGR;
 8000df4:	6868      	ldr	r0, [r5, #4]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000df6:	69e3      	ldr	r3, [r4, #28]
 8000df8:	f400 0280 	and.w	r2, r0, #4194304	; 0x400000
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	f47f ae79 	bne.w	8000af4 <HAL_RCC_OscConfig+0x8>
 8000e02:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000e04:	f000 033f 	and.w	r3, r0, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	f47f ae73 	bne.w	8000af4 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8000e0e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000e10:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8000e14:	4003      	ands	r3, r0
 8000e16:	4293      	cmp	r3, r2
 8000e18:	f47f ae6c 	bne.w	8000af4 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8000e1c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000e1e:	f400 3340 	and.w	r3, r0, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8000e22:	4293      	cmp	r3, r2
 8000e24:	f47f ae66 	bne.w	8000af4 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8000e28:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8000e2a:	f000 6070 	and.w	r0, r0, #251658240	; 0xf000000
    return HAL_ERROR;
 8000e2e:	1ac0      	subs	r0, r0, r3
 8000e30:	bf18      	it	ne
 8000e32:	2001      	movne	r0, #1
 8000e34:	e6a0      	b.n	8000b78 <HAL_RCC_OscConfig+0x8c>
 8000e36:	bf00      	nop

08000e38 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000e38:	4913      	ldr	r1, [pc, #76]	; (8000e88 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000e3a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000e3c:	688b      	ldr	r3, [r1, #8]
 8000e3e:	f003 030c 	and.w	r3, r3, #12
 8000e42:	2b04      	cmp	r3, #4
 8000e44:	d003      	beq.n	8000e4e <HAL_RCC_GetSysClockFreq+0x16>
 8000e46:	2b08      	cmp	r3, #8
 8000e48:	d003      	beq.n	8000e52 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000e4a:	4810      	ldr	r0, [pc, #64]	; (8000e8c <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000e4c:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8000e4e:	4810      	ldr	r0, [pc, #64]	; (8000e90 <HAL_RCC_GetSysClockFreq+0x58>)
 8000e50:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000e52:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000e54:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000e56:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000e58:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000e5c:	bf14      	ite	ne
 8000e5e:	480c      	ldrne	r0, [pc, #48]	; (8000e90 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000e60:	480a      	ldreq	r0, [pc, #40]	; (8000e8c <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000e62:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000e66:	bf18      	it	ne
 8000e68:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000e6a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000e6e:	fba1 0100 	umull	r0, r1, r1, r0
 8000e72:	f7ff f9ad 	bl	80001d0 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000e76:	4b04      	ldr	r3, [pc, #16]	; (8000e88 <HAL_RCC_GetSysClockFreq+0x50>)
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000e7e:	3301      	adds	r3, #1
 8000e80:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8000e82:	fbb0 f0f3 	udiv	r0, r0, r3
 8000e86:	bd08      	pop	{r3, pc}
 8000e88:	40023800 	.word	0x40023800
 8000e8c:	00f42400 	.word	0x00f42400
 8000e90:	017d7840 	.word	0x017d7840

08000e94 <HAL_RCC_ClockConfig>:
{
 8000e94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e98:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000e9a:	4604      	mov	r4, r0
 8000e9c:	b910      	cbnz	r0, 8000ea4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000e9e:	2001      	movs	r0, #1
 8000ea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000ea4:	4b44      	ldr	r3, [pc, #272]	; (8000fb8 <HAL_RCC_ClockConfig+0x124>)
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	f002 020f 	and.w	r2, r2, #15
 8000eac:	428a      	cmp	r2, r1
 8000eae:	d329      	bcc.n	8000f04 <HAL_RCC_ClockConfig+0x70>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000eb0:	6821      	ldr	r1, [r4, #0]
 8000eb2:	078f      	lsls	r7, r1, #30
 8000eb4:	d42e      	bmi.n	8000f14 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000eb6:	07c8      	lsls	r0, r1, #31
 8000eb8:	d441      	bmi.n	8000f3e <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000eba:	4b3f      	ldr	r3, [pc, #252]	; (8000fb8 <HAL_RCC_ClockConfig+0x124>)
 8000ebc:	681a      	ldr	r2, [r3, #0]
 8000ebe:	f002 020f 	and.w	r2, r2, #15
 8000ec2:	4295      	cmp	r5, r2
 8000ec4:	d367      	bcc.n	8000f96 <HAL_RCC_ClockConfig+0x102>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ec6:	6822      	ldr	r2, [r4, #0]
 8000ec8:	0751      	lsls	r1, r2, #29
 8000eca:	d46d      	bmi.n	8000fa8 <HAL_RCC_ClockConfig+0x114>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000ecc:	0713      	lsls	r3, r2, #28
 8000ece:	d507      	bpl.n	8000ee0 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000ed0:	4a3a      	ldr	r2, [pc, #232]	; (8000fbc <HAL_RCC_ClockConfig+0x128>)
 8000ed2:	6921      	ldr	r1, [r4, #16]
 8000ed4:	6893      	ldr	r3, [r2, #8]
 8000ed6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000eda:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000ede:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000ee0:	f7ff ffaa 	bl	8000e38 <HAL_RCC_GetSysClockFreq>
 8000ee4:	4b35      	ldr	r3, [pc, #212]	; (8000fbc <HAL_RCC_ClockConfig+0x128>)
 8000ee6:	4a36      	ldr	r2, [pc, #216]	; (8000fc0 <HAL_RCC_ClockConfig+0x12c>)
 8000ee8:	689b      	ldr	r3, [r3, #8]
 8000eea:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000eee:	5cd3      	ldrb	r3, [r2, r3]
 8000ef0:	40d8      	lsrs	r0, r3
 8000ef2:	4b34      	ldr	r3, [pc, #208]	; (8000fc4 <HAL_RCC_ClockConfig+0x130>)
 8000ef4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8000ef6:	4b34      	ldr	r3, [pc, #208]	; (8000fc8 <HAL_RCC_ClockConfig+0x134>)
 8000ef8:	6818      	ldr	r0, [r3, #0]
 8000efa:	f002 fae3 	bl	80034c4 <HAL_InitTick>
  return HAL_OK;
 8000efe:	2000      	movs	r0, #0
 8000f00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f04:	b2ca      	uxtb	r2, r1
 8000f06:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f003 030f 	and.w	r3, r3, #15
 8000f0e:	4299      	cmp	r1, r3
 8000f10:	d1c5      	bne.n	8000e9e <HAL_RCC_ClockConfig+0xa>
 8000f12:	e7cd      	b.n	8000eb0 <HAL_RCC_ClockConfig+0x1c>
 8000f14:	4b29      	ldr	r3, [pc, #164]	; (8000fbc <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f16:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000f1a:	bf1e      	ittt	ne
 8000f1c:	689a      	ldrne	r2, [r3, #8]
 8000f1e:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8000f22:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f24:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000f26:	bf42      	ittt	mi
 8000f28:	689a      	ldrmi	r2, [r3, #8]
 8000f2a:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8000f2e:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000f30:	689a      	ldr	r2, [r3, #8]
 8000f32:	68a0      	ldr	r0, [r4, #8]
 8000f34:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000f38:	4302      	orrs	r2, r0
 8000f3a:	609a      	str	r2, [r3, #8]
 8000f3c:	e7bb      	b.n	8000eb6 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000f3e:	6862      	ldr	r2, [r4, #4]
 8000f40:	4b1e      	ldr	r3, [pc, #120]	; (8000fbc <HAL_RCC_ClockConfig+0x128>)
 8000f42:	2a01      	cmp	r2, #1
 8000f44:	d11d      	bne.n	8000f82 <HAL_RCC_ClockConfig+0xee>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f4c:	d0a7      	beq.n	8000e9e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000f4e:	4e1b      	ldr	r6, [pc, #108]	; (8000fbc <HAL_RCC_ClockConfig+0x128>)
 8000f50:	68b3      	ldr	r3, [r6, #8]
 8000f52:	f023 0303 	bic.w	r3, r3, #3
 8000f56:	4313      	orrs	r3, r2
 8000f58:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000f5a:	f7ff fae7 	bl	800052c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f5e:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000f62:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000f64:	68b3      	ldr	r3, [r6, #8]
 8000f66:	6862      	ldr	r2, [r4, #4]
 8000f68:	f003 030c 	and.w	r3, r3, #12
 8000f6c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000f70:	d0a3      	beq.n	8000eba <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000f72:	f7ff fadb 	bl	800052c <HAL_GetTick>
 8000f76:	1bc0      	subs	r0, r0, r7
 8000f78:	4540      	cmp	r0, r8
 8000f7a:	d9f3      	bls.n	8000f64 <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 8000f7c:	2003      	movs	r0, #3
}
 8000f7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000f82:	1e91      	subs	r1, r2, #2
 8000f84:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f86:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000f88:	d802      	bhi.n	8000f90 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f8a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000f8e:	e7dd      	b.n	8000f4c <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f90:	f013 0f02 	tst.w	r3, #2
 8000f94:	e7da      	b.n	8000f4c <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f96:	b2ea      	uxtb	r2, r5
 8000f98:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f003 030f 	and.w	r3, r3, #15
 8000fa0:	429d      	cmp	r5, r3
 8000fa2:	f47f af7c 	bne.w	8000e9e <HAL_RCC_ClockConfig+0xa>
 8000fa6:	e78e      	b.n	8000ec6 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000fa8:	4904      	ldr	r1, [pc, #16]	; (8000fbc <HAL_RCC_ClockConfig+0x128>)
 8000faa:	68e0      	ldr	r0, [r4, #12]
 8000fac:	688b      	ldr	r3, [r1, #8]
 8000fae:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000fb2:	4303      	orrs	r3, r0
 8000fb4:	608b      	str	r3, [r1, #8]
 8000fb6:	e789      	b.n	8000ecc <HAL_RCC_ClockConfig+0x38>
 8000fb8:	40023c00 	.word	0x40023c00
 8000fbc:	40023800 	.word	0x40023800
 8000fc0:	08003712 	.word	0x08003712
 8000fc4:	2000000c 	.word	0x2000000c
 8000fc8:	20000004 	.word	0x20000004

08000fcc <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000fcc:	4b04      	ldr	r3, [pc, #16]	; (8000fe0 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000fce:	4a05      	ldr	r2, [pc, #20]	; (8000fe4 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000fd0:	689b      	ldr	r3, [r3, #8]
 8000fd2:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8000fd6:	5cd3      	ldrb	r3, [r2, r3]
 8000fd8:	4a03      	ldr	r2, [pc, #12]	; (8000fe8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000fda:	6810      	ldr	r0, [r2, #0]
}
 8000fdc:	40d8      	lsrs	r0, r3
 8000fde:	4770      	bx	lr
 8000fe0:	40023800 	.word	0x40023800
 8000fe4:	08003722 	.word	0x08003722
 8000fe8:	2000000c 	.word	0x2000000c

08000fec <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000fec:	4b04      	ldr	r3, [pc, #16]	; (8001000 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000fee:	4a05      	ldr	r2, [pc, #20]	; (8001004 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000ff0:	689b      	ldr	r3, [r3, #8]
 8000ff2:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8000ff6:	5cd3      	ldrb	r3, [r2, r3]
 8000ff8:	4a03      	ldr	r2, [pc, #12]	; (8001008 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000ffa:	6810      	ldr	r0, [r2, #0]
}
 8000ffc:	40d8      	lsrs	r0, r3
 8000ffe:	4770      	bx	lr
 8001000:	40023800 	.word	0x40023800
 8001004:	08003722 	.word	0x08003722
 8001008:	2000000c 	.word	0x2000000c

0800100c <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800100c:	230f      	movs	r3, #15
 800100e:	6003      	str	r3, [r0, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001010:	4b0b      	ldr	r3, [pc, #44]	; (8001040 <HAL_RCC_GetClockConfig+0x34>)
 8001012:	689a      	ldr	r2, [r3, #8]
 8001014:	f002 0203 	and.w	r2, r2, #3
 8001018:	6042      	str	r2, [r0, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800101a:	689a      	ldr	r2, [r3, #8]
 800101c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8001020:	6082      	str	r2, [r0, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001022:	689a      	ldr	r2, [r3, #8]
 8001024:	f402 52e0 	and.w	r2, r2, #7168	; 0x1c00
 8001028:	60c2      	str	r2, [r0, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800102a:	689b      	ldr	r3, [r3, #8]
 800102c:	08db      	lsrs	r3, r3, #3
 800102e:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8001032:	6103      	str	r3, [r0, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001034:	4b03      	ldr	r3, [pc, #12]	; (8001044 <HAL_RCC_GetClockConfig+0x38>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f003 030f 	and.w	r3, r3, #15
 800103c:	600b      	str	r3, [r1, #0]
 800103e:	4770      	bx	lr
 8001040:	40023800 	.word	0x40023800
 8001044:	40023c00 	.word	0x40023c00

08001048 <HAL_TIM_Base_MspInit>:
 8001048:	4770      	bx	lr

0800104a <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800104a:	6803      	ldr	r3, [r0, #0]
 800104c:	68da      	ldr	r2, [r3, #12]
 800104e:	f042 0201 	orr.w	r2, r2, #1
 8001052:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001054:	689a      	ldr	r2, [r3, #8]
 8001056:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800105a:	2a06      	cmp	r2, #6
  {
    __HAL_TIM_ENABLE(htim);
 800105c:	bf1e      	ittt	ne
 800105e:	681a      	ldrne	r2, [r3, #0]
 8001060:	f042 0201 	orrne.w	r2, r2, #1
 8001064:	601a      	strne	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 8001066:	2000      	movs	r0, #0
 8001068:	4770      	bx	lr

0800106a <HAL_TIM_OC_DelayElapsedCallback>:
 800106a:	4770      	bx	lr

0800106c <HAL_TIM_IC_CaptureCallback>:
 800106c:	4770      	bx	lr

0800106e <HAL_TIM_PWM_PulseFinishedCallback>:
 800106e:	4770      	bx	lr

08001070 <HAL_TIM_TriggerCallback>:
 8001070:	4770      	bx	lr

08001072 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001072:	6803      	ldr	r3, [r0, #0]
 8001074:	691a      	ldr	r2, [r3, #16]
 8001076:	0791      	lsls	r1, r2, #30
{
 8001078:	b510      	push	{r4, lr}
 800107a:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800107c:	d50e      	bpl.n	800109c <HAL_TIM_IRQHandler+0x2a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800107e:	68da      	ldr	r2, [r3, #12]
 8001080:	0792      	lsls	r2, r2, #30
 8001082:	d50b      	bpl.n	800109c <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001084:	f06f 0202 	mvn.w	r2, #2
 8001088:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800108a:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800108c:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800108e:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001090:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001092:	d077      	beq.n	8001184 <HAL_TIM_IRQHandler+0x112>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001094:	f7ff ffea 	bl	800106c <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001098:	2300      	movs	r3, #0
 800109a:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800109c:	6823      	ldr	r3, [r4, #0]
 800109e:	691a      	ldr	r2, [r3, #16]
 80010a0:	0750      	lsls	r0, r2, #29
 80010a2:	d510      	bpl.n	80010c6 <HAL_TIM_IRQHandler+0x54>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80010a4:	68da      	ldr	r2, [r3, #12]
 80010a6:	0751      	lsls	r1, r2, #29
 80010a8:	d50d      	bpl.n	80010c6 <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80010aa:	f06f 0204 	mvn.w	r2, #4
 80010ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80010b0:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80010b2:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80010b4:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80010b8:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80010ba:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80010bc:	d068      	beq.n	8001190 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 80010be:	f7ff ffd5 	bl	800106c <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80010c2:	2300      	movs	r3, #0
 80010c4:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80010c6:	6823      	ldr	r3, [r4, #0]
 80010c8:	691a      	ldr	r2, [r3, #16]
 80010ca:	0712      	lsls	r2, r2, #28
 80010cc:	d50f      	bpl.n	80010ee <HAL_TIM_IRQHandler+0x7c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80010ce:	68da      	ldr	r2, [r3, #12]
 80010d0:	0710      	lsls	r0, r2, #28
 80010d2:	d50c      	bpl.n	80010ee <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80010d4:	f06f 0208 	mvn.w	r2, #8
 80010d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80010da:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80010dc:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80010de:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80010e0:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80010e2:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80010e4:	d05a      	beq.n	800119c <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 80010e6:	f7ff ffc1 	bl	800106c <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80010ea:	2300      	movs	r3, #0
 80010ec:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80010ee:	6823      	ldr	r3, [r4, #0]
 80010f0:	691a      	ldr	r2, [r3, #16]
 80010f2:	06d2      	lsls	r2, r2, #27
 80010f4:	d510      	bpl.n	8001118 <HAL_TIM_IRQHandler+0xa6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80010f6:	68da      	ldr	r2, [r3, #12]
 80010f8:	06d0      	lsls	r0, r2, #27
 80010fa:	d50d      	bpl.n	8001118 <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80010fc:	f06f 0210 	mvn.w	r2, #16
 8001100:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001102:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001104:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001106:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800110a:	7722      	strb	r2, [r4, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800110c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800110e:	d04b      	beq.n	80011a8 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8001110:	f7ff ffac 	bl	800106c <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001114:	2300      	movs	r3, #0
 8001116:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001118:	6823      	ldr	r3, [r4, #0]
 800111a:	691a      	ldr	r2, [r3, #16]
 800111c:	07d1      	lsls	r1, r2, #31
 800111e:	d508      	bpl.n	8001132 <HAL_TIM_IRQHandler+0xc0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001120:	68da      	ldr	r2, [r3, #12]
 8001122:	07d2      	lsls	r2, r2, #31
 8001124:	d505      	bpl.n	8001132 <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001126:	f06f 0201 	mvn.w	r2, #1
 800112a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800112c:	4620      	mov	r0, r4
 800112e:	f002 f91f 	bl	8003370 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001132:	6823      	ldr	r3, [r4, #0]
 8001134:	691a      	ldr	r2, [r3, #16]
 8001136:	0610      	lsls	r0, r2, #24
 8001138:	d508      	bpl.n	800114c <HAL_TIM_IRQHandler+0xda>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800113a:	68da      	ldr	r2, [r3, #12]
 800113c:	0611      	lsls	r1, r2, #24
 800113e:	d505      	bpl.n	800114c <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001140:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001144:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001146:	4620      	mov	r0, r4
 8001148:	f000 f8b7 	bl	80012ba <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800114c:	6823      	ldr	r3, [r4, #0]
 800114e:	691a      	ldr	r2, [r3, #16]
 8001150:	0652      	lsls	r2, r2, #25
 8001152:	d508      	bpl.n	8001166 <HAL_TIM_IRQHandler+0xf4>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001154:	68da      	ldr	r2, [r3, #12]
 8001156:	0650      	lsls	r0, r2, #25
 8001158:	d505      	bpl.n	8001166 <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800115a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800115e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001160:	4620      	mov	r0, r4
 8001162:	f7ff ff85 	bl	8001070 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001166:	6823      	ldr	r3, [r4, #0]
 8001168:	691a      	ldr	r2, [r3, #16]
 800116a:	0691      	lsls	r1, r2, #26
 800116c:	d522      	bpl.n	80011b4 <HAL_TIM_IRQHandler+0x142>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800116e:	68da      	ldr	r2, [r3, #12]
 8001170:	0692      	lsls	r2, r2, #26
 8001172:	d51f      	bpl.n	80011b4 <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001174:	f06f 0220 	mvn.w	r2, #32
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001178:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800117a:	611a      	str	r2, [r3, #16]
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800117c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutCallback(htim);
 8001180:	f000 b89a 	b.w	80012b8 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001184:	f7ff ff71 	bl	800106a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001188:	4620      	mov	r0, r4
 800118a:	f7ff ff70 	bl	800106e <HAL_TIM_PWM_PulseFinishedCallback>
 800118e:	e783      	b.n	8001098 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001190:	f7ff ff6b 	bl	800106a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001194:	4620      	mov	r0, r4
 8001196:	f7ff ff6a 	bl	800106e <HAL_TIM_PWM_PulseFinishedCallback>
 800119a:	e792      	b.n	80010c2 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800119c:	f7ff ff65 	bl	800106a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80011a0:	4620      	mov	r0, r4
 80011a2:	f7ff ff64 	bl	800106e <HAL_TIM_PWM_PulseFinishedCallback>
 80011a6:	e7a0      	b.n	80010ea <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80011a8:	f7ff ff5f 	bl	800106a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80011ac:	4620      	mov	r0, r4
 80011ae:	f7ff ff5e 	bl	800106e <HAL_TIM_PWM_PulseFinishedCallback>
 80011b2:	e7af      	b.n	8001114 <HAL_TIM_IRQHandler+0xa2>
 80011b4:	bd10      	pop	{r4, pc}
	...

080011b8 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80011b8:	4a30      	ldr	r2, [pc, #192]	; (800127c <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 80011ba:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80011bc:	4290      	cmp	r0, r2
 80011be:	d012      	beq.n	80011e6 <TIM_Base_SetConfig+0x2e>
 80011c0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80011c4:	d00f      	beq.n	80011e6 <TIM_Base_SetConfig+0x2e>
 80011c6:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80011ca:	4290      	cmp	r0, r2
 80011cc:	d00b      	beq.n	80011e6 <TIM_Base_SetConfig+0x2e>
 80011ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80011d2:	4290      	cmp	r0, r2
 80011d4:	d007      	beq.n	80011e6 <TIM_Base_SetConfig+0x2e>
 80011d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80011da:	4290      	cmp	r0, r2
 80011dc:	d003      	beq.n	80011e6 <TIM_Base_SetConfig+0x2e>
 80011de:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80011e2:	4290      	cmp	r0, r2
 80011e4:	d119      	bne.n	800121a <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80011e6:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80011e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80011ec:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80011ee:	4a23      	ldr	r2, [pc, #140]	; (800127c <TIM_Base_SetConfig+0xc4>)
 80011f0:	4290      	cmp	r0, r2
 80011f2:	d029      	beq.n	8001248 <TIM_Base_SetConfig+0x90>
 80011f4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80011f8:	d026      	beq.n	8001248 <TIM_Base_SetConfig+0x90>
 80011fa:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80011fe:	4290      	cmp	r0, r2
 8001200:	d022      	beq.n	8001248 <TIM_Base_SetConfig+0x90>
 8001202:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001206:	4290      	cmp	r0, r2
 8001208:	d01e      	beq.n	8001248 <TIM_Base_SetConfig+0x90>
 800120a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800120e:	4290      	cmp	r0, r2
 8001210:	d01a      	beq.n	8001248 <TIM_Base_SetConfig+0x90>
 8001212:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8001216:	4290      	cmp	r0, r2
 8001218:	d016      	beq.n	8001248 <TIM_Base_SetConfig+0x90>
 800121a:	4a19      	ldr	r2, [pc, #100]	; (8001280 <TIM_Base_SetConfig+0xc8>)
 800121c:	4290      	cmp	r0, r2
 800121e:	d013      	beq.n	8001248 <TIM_Base_SetConfig+0x90>
 8001220:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001224:	4290      	cmp	r0, r2
 8001226:	d00f      	beq.n	8001248 <TIM_Base_SetConfig+0x90>
 8001228:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800122c:	4290      	cmp	r0, r2
 800122e:	d00b      	beq.n	8001248 <TIM_Base_SetConfig+0x90>
 8001230:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8001234:	4290      	cmp	r0, r2
 8001236:	d007      	beq.n	8001248 <TIM_Base_SetConfig+0x90>
 8001238:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800123c:	4290      	cmp	r0, r2
 800123e:	d003      	beq.n	8001248 <TIM_Base_SetConfig+0x90>
 8001240:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001244:	4290      	cmp	r0, r2
 8001246:	d103      	bne.n	8001250 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001248:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800124a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800124e:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001250:	694a      	ldr	r2, [r1, #20]
 8001252:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001256:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8001258:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800125a:	688b      	ldr	r3, [r1, #8]
 800125c:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800125e:	680b      	ldr	r3, [r1, #0]
 8001260:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001262:	4b06      	ldr	r3, [pc, #24]	; (800127c <TIM_Base_SetConfig+0xc4>)
 8001264:	4298      	cmp	r0, r3
 8001266:	d003      	beq.n	8001270 <TIM_Base_SetConfig+0xb8>
 8001268:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800126c:	4298      	cmp	r0, r3
 800126e:	d101      	bne.n	8001274 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001270:	690b      	ldr	r3, [r1, #16]
 8001272:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001274:	2301      	movs	r3, #1
 8001276:	6143      	str	r3, [r0, #20]
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	40010000 	.word	0x40010000
 8001280:	40014000 	.word	0x40014000

08001284 <HAL_TIM_Base_Init>:
{
 8001284:	b510      	push	{r4, lr}
  if (htim == NULL)
 8001286:	4604      	mov	r4, r0
 8001288:	b1a0      	cbz	r0, 80012b4 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 800128a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800128e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001292:	b91b      	cbnz	r3, 800129c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001294:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001298:	f7ff fed6 	bl	8001048 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800129c:	2302      	movs	r3, #2
 800129e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80012a2:	6820      	ldr	r0, [r4, #0]
 80012a4:	1d21      	adds	r1, r4, #4
 80012a6:	f7ff ff87 	bl	80011b8 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80012aa:	2301      	movs	r3, #1
 80012ac:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80012b0:	2000      	movs	r0, #0
 80012b2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80012b4:	2001      	movs	r0, #1
}
 80012b6:	bd10      	pop	{r4, pc}

080012b8 <HAL_TIMEx_CommutCallback>:
 80012b8:	4770      	bx	lr

080012ba <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80012ba:	4770      	bx	lr

080012bc <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80012bc:	6803      	ldr	r3, [r0, #0]
 80012be:	68da      	ldr	r2, [r3, #12]
 80012c0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80012c4:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80012c6:	695a      	ldr	r2, [r3, #20]
 80012c8:	f022 0201 	bic.w	r2, r2, #1
 80012cc:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80012ce:	2320      	movs	r3, #32
 80012d0:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 80012d4:	4770      	bx	lr
	...

080012d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80012d8:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80012da:	6803      	ldr	r3, [r0, #0]
 80012dc:	68c1      	ldr	r1, [r0, #12]
 80012de:	691a      	ldr	r2, [r3, #16]
{
 80012e0:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80012e2:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80012e6:	430a      	orrs	r2, r1
 80012e8:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80012ea:	6925      	ldr	r5, [r4, #16]
 80012ec:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1,
 80012ee:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80012f0:	69c0      	ldr	r0, [r0, #28]
 80012f2:	432a      	orrs	r2, r5
 80012f4:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 80012f6:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80012fa:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 80012fc:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001300:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8001302:	430a      	orrs	r2, r1
 8001304:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001306:	695a      	ldr	r2, [r3, #20]
 8001308:	69a1      	ldr	r1, [r4, #24]
 800130a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800130e:	430a      	orrs	r2, r1

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001310:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001314:	615a      	str	r2, [r3, #20]
 8001316:	4a25      	ldr	r2, [pc, #148]	; (80013ac <UART_SetConfig+0xd4>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001318:	d129      	bne.n	800136e <UART_SetConfig+0x96>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800131a:	4293      	cmp	r3, r2
 800131c:	d003      	beq.n	8001326 <UART_SetConfig+0x4e>
 800131e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001322:	4293      	cmp	r3, r2
 8001324:	d120      	bne.n	8001368 <UART_SetConfig+0x90>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001326:	f7ff fe61 	bl	8000fec <HAL_RCC_GetPCLK2Freq>
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800132a:	6862      	ldr	r2, [r4, #4]
 800132c:	6825      	ldr	r5, [r4, #0]
 800132e:	1892      	adds	r2, r2, r2
 8001330:	f04f 0300 	mov.w	r3, #0
 8001334:	f04f 0119 	mov.w	r1, #25
 8001338:	415b      	adcs	r3, r3
 800133a:	fba0 0101 	umull	r0, r1, r0, r1
 800133e:	f7fe ff47 	bl	80001d0 <__aeabi_uldivmod>
 8001342:	2164      	movs	r1, #100	; 0x64
 8001344:	fbb0 f4f1 	udiv	r4, r0, r1
 8001348:	fb01 0314 	mls	r3, r1, r4, r0
 800134c:	00db      	lsls	r3, r3, #3
 800134e:	3332      	adds	r3, #50	; 0x32
 8001350:	fbb3 f3f1 	udiv	r3, r3, r1
 8001354:	f003 0207 	and.w	r2, r3, #7
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	eb02 1204 	add.w	r2, r2, r4, lsl #4
 800135e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001362:	4413      	add	r3, r2
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001364:	60ab      	str	r3, [r5, #8]
 8001366:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 8001368:	f7ff fe30 	bl	8000fcc <HAL_RCC_GetPCLK1Freq>
 800136c:	e7dd      	b.n	800132a <UART_SetConfig+0x52>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800136e:	4293      	cmp	r3, r2
 8001370:	d002      	beq.n	8001378 <UART_SetConfig+0xa0>
 8001372:	4a0f      	ldr	r2, [pc, #60]	; (80013b0 <UART_SetConfig+0xd8>)
 8001374:	4293      	cmp	r3, r2
 8001376:	d116      	bne.n	80013a6 <UART_SetConfig+0xce>
      pclk = HAL_RCC_GetPCLK2Freq();
 8001378:	f7ff fe38 	bl	8000fec <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800137c:	6863      	ldr	r3, [r4, #4]
 800137e:	6825      	ldr	r5, [r4, #0]
 8001380:	2119      	movs	r1, #25
 8001382:	009a      	lsls	r2, r3, #2
 8001384:	fba0 0101 	umull	r0, r1, r0, r1
 8001388:	0f9b      	lsrs	r3, r3, #30
 800138a:	f7fe ff21 	bl	80001d0 <__aeabi_uldivmod>
 800138e:	2264      	movs	r2, #100	; 0x64
 8001390:	fbb0 f1f2 	udiv	r1, r0, r2
 8001394:	fb02 0311 	mls	r3, r2, r1, r0
 8001398:	011b      	lsls	r3, r3, #4
 800139a:	3332      	adds	r3, #50	; 0x32
 800139c:	fbb3 f3f2 	udiv	r3, r3, r2
 80013a0:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 80013a4:	e7de      	b.n	8001364 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK1Freq();
 80013a6:	f7ff fe11 	bl	8000fcc <HAL_RCC_GetPCLK1Freq>
 80013aa:	e7e7      	b.n	800137c <UART_SetConfig+0xa4>
 80013ac:	40011000 	.word	0x40011000
 80013b0:	40011400 	.word	0x40011400

080013b4 <HAL_UART_Init>:
{
 80013b4:	b510      	push	{r4, lr}
  if (huart == NULL)
 80013b6:	4604      	mov	r4, r0
 80013b8:	b340      	cbz	r0, 800140c <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 80013ba:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80013be:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80013c2:	b91b      	cbnz	r3, 80013cc <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80013c4:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80013c8:	f002 f800 	bl	80033cc <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80013cc:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80013ce:	2324      	movs	r3, #36	; 0x24
 80013d0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80013d4:	68d3      	ldr	r3, [r2, #12]
 80013d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80013da:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80013dc:	4620      	mov	r0, r4
 80013de:	f7ff ff7b 	bl	80012d8 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80013e2:	6823      	ldr	r3, [r4, #0]
 80013e4:	691a      	ldr	r2, [r3, #16]
 80013e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80013ea:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80013ec:	695a      	ldr	r2, [r3, #20]
 80013ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80013f2:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80013f4:	68da      	ldr	r2, [r3, #12]
 80013f6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80013fa:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80013fc:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80013fe:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001400:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001402:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001406:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 800140a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800140c:	2001      	movs	r0, #1
}
 800140e:	bd10      	pop	{r4, pc}

08001410 <HAL_UART_Transmit_DMA>:
{
 8001410:	b538      	push	{r3, r4, r5, lr}
 8001412:	4604      	mov	r4, r0
 8001414:	4613      	mov	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8001416:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 800141a:	2a20      	cmp	r2, #32
 800141c:	d12a      	bne.n	8001474 <HAL_UART_Transmit_DMA+0x64>
    if ((pData == NULL) || (Size == 0U))
 800141e:	b339      	cbz	r1, 8001470 <HAL_UART_Transmit_DMA+0x60>
 8001420:	b333      	cbz	r3, 8001470 <HAL_UART_Transmit_DMA+0x60>
    __HAL_LOCK(huart);
 8001422:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8001426:	2a01      	cmp	r2, #1
 8001428:	d024      	beq.n	8001474 <HAL_UART_Transmit_DMA+0x64>
 800142a:	2201      	movs	r2, #1
 800142c:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8001430:	6b20      	ldr	r0, [r4, #48]	; 0x30
    huart->TxXferCount = Size;
 8001432:	84e3      	strh	r3, [r4, #38]	; 0x26
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001434:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001436:	2221      	movs	r2, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001438:	63e5      	str	r5, [r4, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800143a:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800143e:	4a0e      	ldr	r2, [pc, #56]	; (8001478 <HAL_UART_Transmit_DMA+0x68>)
    huart->TxXferSize = Size;
 8001440:	84a3      	strh	r3, [r4, #36]	; 0x24
    huart->pTxBuffPtr = pData;
 8001442:	6221      	str	r1, [r4, #32]
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8001444:	63c2      	str	r2, [r0, #60]	; 0x3c
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8001446:	4a0d      	ldr	r2, [pc, #52]	; (800147c <HAL_UART_Transmit_DMA+0x6c>)
 8001448:	6402      	str	r2, [r0, #64]	; 0x40
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800144a:	4a0d      	ldr	r2, [pc, #52]	; (8001480 <HAL_UART_Transmit_DMA+0x70>)
 800144c:	64c2      	str	r2, [r0, #76]	; 0x4c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800144e:	6822      	ldr	r2, [r4, #0]
    huart->hdmatx->XferAbortCallback = NULL;
 8001450:	6505      	str	r5, [r0, #80]	; 0x50
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8001452:	3204      	adds	r2, #4
 8001454:	f7ff f958 	bl	8000708 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8001458:	6823      	ldr	r3, [r4, #0]
 800145a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800145e:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8001460:	695a      	ldr	r2, [r3, #20]
    __HAL_UNLOCK(huart);
 8001462:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8001466:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800146a:	615a      	str	r2, [r3, #20]
    return HAL_OK;
 800146c:	4628      	mov	r0, r5
 800146e:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8001470:	2001      	movs	r0, #1
 8001472:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_BUSY;
 8001474:	2002      	movs	r0, #2
}
 8001476:	bd38      	pop	{r3, r4, r5, pc}
 8001478:	08001485 	.word	0x08001485
 800147c:	080014b3 	.word	0x080014b3
 8001480:	0800153b 	.word	0x0800153b

08001484 <UART_DMATransmitCplt>:
{
 8001484:	b508      	push	{r3, lr}
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8001486:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001488:	6b82      	ldr	r2, [r0, #56]	; 0x38
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8001490:	d10a      	bne.n	80014a8 <UART_DMATransmitCplt+0x24>
    huart->TxXferCount = 0x00U;
 8001492:	84d3      	strh	r3, [r2, #38]	; 0x26
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8001494:	6813      	ldr	r3, [r2, #0]
 8001496:	695a      	ldr	r2, [r3, #20]
 8001498:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800149c:	615a      	str	r2, [r3, #20]
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800149e:	68da      	ldr	r2, [r3, #12]
 80014a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80014a4:	60da      	str	r2, [r3, #12]
 80014a6:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 80014a8:	4610      	mov	r0, r2
 80014aa:	f001 ff5d 	bl	8003368 <HAL_UART_TxCpltCallback>
 80014ae:	bd08      	pop	{r3, pc}

080014b0 <HAL_UART_TxHalfCpltCallback>:
 80014b0:	4770      	bx	lr

080014b2 <UART_DMATxHalfCplt>:
{
 80014b2:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 80014b4:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80014b6:	f7ff fffb 	bl	80014b0 <HAL_UART_TxHalfCpltCallback>
 80014ba:	bd08      	pop	{r3, pc}

080014bc <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80014bc:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 80014c0:	2b22      	cmp	r3, #34	; 0x22
{
 80014c2:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80014c4:	d136      	bne.n	8001534 <UART_Receive_IT+0x78>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80014c6:	6883      	ldr	r3, [r0, #8]
 80014c8:	6901      	ldr	r1, [r0, #16]
 80014ca:	6802      	ldr	r2, [r0, #0]
 80014cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80014d0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80014d2:	d123      	bne.n	800151c <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80014d4:	6852      	ldr	r2, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80014d6:	b9e9      	cbnz	r1, 8001514 <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80014d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80014dc:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 80014e0:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 80014e2:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 80014e4:	3c01      	subs	r4, #1
 80014e6:	b2a4      	uxth	r4, r4
 80014e8:	85c4      	strh	r4, [r0, #46]	; 0x2e
 80014ea:	b98c      	cbnz	r4, 8001510 <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80014ec:	6803      	ldr	r3, [r0, #0]
 80014ee:	68da      	ldr	r2, [r3, #12]
 80014f0:	f022 0220 	bic.w	r2, r2, #32
 80014f4:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80014f6:	68da      	ldr	r2, [r3, #12]
 80014f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80014fc:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80014fe:	695a      	ldr	r2, [r3, #20]
 8001500:	f022 0201 	bic.w	r2, r2, #1
 8001504:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8001506:	2320      	movs	r3, #32
 8001508:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 800150c:	f001 ff2e 	bl	800336c <HAL_UART_RxCpltCallback>
    if (--huart->RxXferCount == 0U)
 8001510:	2000      	movs	r0, #0
}
 8001512:	bd10      	pop	{r4, pc}
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001514:	b2d2      	uxtb	r2, r2
 8001516:	f823 2b01 	strh.w	r2, [r3], #1
 800151a:	e7e1      	b.n	80014e0 <UART_Receive_IT+0x24>
      if (huart->Init.Parity == UART_PARITY_NONE)
 800151c:	b921      	cbnz	r1, 8001528 <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800151e:	1c59      	adds	r1, r3, #1
 8001520:	6852      	ldr	r2, [r2, #4]
 8001522:	6281      	str	r1, [r0, #40]	; 0x28
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001524:	701a      	strb	r2, [r3, #0]
 8001526:	e7dc      	b.n	80014e2 <UART_Receive_IT+0x26>
 8001528:	6852      	ldr	r2, [r2, #4]
 800152a:	1c59      	adds	r1, r3, #1
 800152c:	6281      	str	r1, [r0, #40]	; 0x28
 800152e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001532:	e7f7      	b.n	8001524 <UART_Receive_IT+0x68>
    return HAL_BUSY;
 8001534:	2002      	movs	r0, #2
 8001536:	bd10      	pop	{r4, pc}

08001538 <HAL_UART_ErrorCallback>:
 8001538:	4770      	bx	lr

0800153a <UART_DMAError>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800153a:	6b81      	ldr	r1, [r0, #56]	; 0x38
{
 800153c:	b508      	push	{r3, lr}
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800153e:	680b      	ldr	r3, [r1, #0]
 8001540:	695a      	ldr	r2, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8001542:	f891 0039 	ldrb.w	r0, [r1, #57]	; 0x39
 8001546:	2821      	cmp	r0, #33	; 0x21
 8001548:	d10a      	bne.n	8001560 <UART_DMAError+0x26>
 800154a:	0612      	lsls	r2, r2, #24
 800154c:	d508      	bpl.n	8001560 <UART_DMAError+0x26>
    huart->TxXferCount = 0x00U;
 800154e:	2200      	movs	r2, #0
 8001550:	84ca      	strh	r2, [r1, #38]	; 0x26
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8001552:	68da      	ldr	r2, [r3, #12]
 8001554:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8001558:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800155a:	2220      	movs	r2, #32
 800155c:	f881 2039 	strb.w	r2, [r1, #57]	; 0x39
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001560:	695b      	ldr	r3, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8001562:	f891 203a 	ldrb.w	r2, [r1, #58]	; 0x3a
 8001566:	2a22      	cmp	r2, #34	; 0x22
 8001568:	d106      	bne.n	8001578 <UART_DMAError+0x3e>
 800156a:	065b      	lsls	r3, r3, #25
 800156c:	d504      	bpl.n	8001578 <UART_DMAError+0x3e>
    huart->RxXferCount = 0x00U;
 800156e:	2300      	movs	r3, #0
 8001570:	85cb      	strh	r3, [r1, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8001572:	4608      	mov	r0, r1
 8001574:	f7ff fea2 	bl	80012bc <UART_EndRxTransfer>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8001578:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800157a:	f043 0310 	orr.w	r3, r3, #16
 800157e:	63cb      	str	r3, [r1, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8001580:	4608      	mov	r0, r1
 8001582:	f7ff ffd9 	bl	8001538 <HAL_UART_ErrorCallback>
 8001586:	bd08      	pop	{r3, pc}

08001588 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001588:	6803      	ldr	r3, [r0, #0]
 800158a:	681a      	ldr	r2, [r3, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800158c:	68d9      	ldr	r1, [r3, #12]
{
 800158e:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 8001590:	0716      	lsls	r6, r2, #28
{
 8001592:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001594:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 8001596:	d107      	bne.n	80015a8 <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001598:	0696      	lsls	r6, r2, #26
 800159a:	d55c      	bpl.n	8001656 <HAL_UART_IRQHandler+0xce>
 800159c:	068d      	lsls	r5, r1, #26
 800159e:	d55a      	bpl.n	8001656 <HAL_UART_IRQHandler+0xce>
}
 80015a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 80015a4:	f7ff bf8a 	b.w	80014bc <UART_Receive_IT>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80015a8:	f015 0501 	ands.w	r5, r5, #1
 80015ac:	d102      	bne.n	80015b4 <HAL_UART_IRQHandler+0x2c>
 80015ae:	f411 7f90 	tst.w	r1, #288	; 0x120
 80015b2:	d050      	beq.n	8001656 <HAL_UART_IRQHandler+0xce>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80015b4:	07d0      	lsls	r0, r2, #31
 80015b6:	d505      	bpl.n	80015c4 <HAL_UART_IRQHandler+0x3c>
 80015b8:	05cb      	lsls	r3, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80015ba:	bf42      	ittt	mi
 80015bc:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 80015be:	f043 0301 	orrmi.w	r3, r3, #1
 80015c2:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80015c4:	0756      	lsls	r6, r2, #29
 80015c6:	d504      	bpl.n	80015d2 <HAL_UART_IRQHandler+0x4a>
 80015c8:	b11d      	cbz	r5, 80015d2 <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80015ca:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80015cc:	f043 0302 	orr.w	r3, r3, #2
 80015d0:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80015d2:	0790      	lsls	r0, r2, #30
 80015d4:	d504      	bpl.n	80015e0 <HAL_UART_IRQHandler+0x58>
 80015d6:	b11d      	cbz	r5, 80015e0 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80015d8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80015da:	f043 0304 	orr.w	r3, r3, #4
 80015de:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80015e0:	0713      	lsls	r3, r2, #28
 80015e2:	d506      	bpl.n	80015f2 <HAL_UART_IRQHandler+0x6a>
 80015e4:	068e      	lsls	r6, r1, #26
 80015e6:	d400      	bmi.n	80015ea <HAL_UART_IRQHandler+0x62>
 80015e8:	b11d      	cbz	r5, 80015f2 <HAL_UART_IRQHandler+0x6a>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80015ea:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80015ec:	f043 0308 	orr.w	r3, r3, #8
 80015f0:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80015f2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d066      	beq.n	80016c6 <HAL_UART_IRQHandler+0x13e>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80015f8:	0695      	lsls	r5, r2, #26
 80015fa:	d504      	bpl.n	8001606 <HAL_UART_IRQHandler+0x7e>
 80015fc:	0688      	lsls	r0, r1, #26
 80015fe:	d502      	bpl.n	8001606 <HAL_UART_IRQHandler+0x7e>
        UART_Receive_IT(huart);
 8001600:	4620      	mov	r0, r4
 8001602:	f7ff ff5b 	bl	80014bc <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001606:	6823      	ldr	r3, [r4, #0]
 8001608:	695d      	ldr	r5, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800160a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 800160c:	0711      	lsls	r1, r2, #28
        UART_EndRxTransfer(huart);
 800160e:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001610:	d402      	bmi.n	8001618 <HAL_UART_IRQHandler+0x90>
 8001612:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8001616:	d01a      	beq.n	800164e <HAL_UART_IRQHandler+0xc6>
        UART_EndRxTransfer(huart);
 8001618:	f7ff fe50 	bl	80012bc <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800161c:	6823      	ldr	r3, [r4, #0]
 800161e:	695a      	ldr	r2, [r3, #20]
 8001620:	0652      	lsls	r2, r2, #25
 8001622:	d510      	bpl.n	8001646 <HAL_UART_IRQHandler+0xbe>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001624:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8001626:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001628:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800162c:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 800162e:	b150      	cbz	r0, 8001646 <HAL_UART_IRQHandler+0xbe>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001630:	4b25      	ldr	r3, [pc, #148]	; (80016c8 <HAL_UART_IRQHandler+0x140>)
 8001632:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001634:	f7ff f8a2 	bl	800077c <HAL_DMA_Abort_IT>
 8001638:	2800      	cmp	r0, #0
 800163a:	d044      	beq.n	80016c6 <HAL_UART_IRQHandler+0x13e>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800163c:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 800163e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001642:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001644:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8001646:	4620      	mov	r0, r4
 8001648:	f7ff ff76 	bl	8001538 <HAL_UART_ErrorCallback>
 800164c:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 800164e:	f7ff ff73 	bl	8001538 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001652:	63e5      	str	r5, [r4, #60]	; 0x3c
 8001654:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001656:	0616      	lsls	r6, r2, #24
 8001658:	d527      	bpl.n	80016aa <HAL_UART_IRQHandler+0x122>
 800165a:	060d      	lsls	r5, r1, #24
 800165c:	d525      	bpl.n	80016aa <HAL_UART_IRQHandler+0x122>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800165e:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8001662:	2a21      	cmp	r2, #33	; 0x21
 8001664:	d12f      	bne.n	80016c6 <HAL_UART_IRQHandler+0x13e>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001666:	68a2      	ldr	r2, [r4, #8]
 8001668:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800166c:	6a22      	ldr	r2, [r4, #32]
 800166e:	d117      	bne.n	80016a0 <HAL_UART_IRQHandler+0x118>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001670:	8811      	ldrh	r1, [r2, #0]
 8001672:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8001676:	6059      	str	r1, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001678:	6921      	ldr	r1, [r4, #16]
 800167a:	b979      	cbnz	r1, 800169c <HAL_UART_IRQHandler+0x114>
        huart->pTxBuffPtr += 2U;
 800167c:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 800167e:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 8001680:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8001682:	3a01      	subs	r2, #1
 8001684:	b292      	uxth	r2, r2
 8001686:	84e2      	strh	r2, [r4, #38]	; 0x26
 8001688:	b9ea      	cbnz	r2, 80016c6 <HAL_UART_IRQHandler+0x13e>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800168a:	68da      	ldr	r2, [r3, #12]
 800168c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001690:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001692:	68da      	ldr	r2, [r3, #12]
 8001694:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001698:	60da      	str	r2, [r3, #12]
 800169a:	bd70      	pop	{r4, r5, r6, pc}
        huart->pTxBuffPtr += 1U;
 800169c:	3201      	adds	r2, #1
 800169e:	e7ee      	b.n	800167e <HAL_UART_IRQHandler+0xf6>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80016a0:	1c51      	adds	r1, r2, #1
 80016a2:	6221      	str	r1, [r4, #32]
 80016a4:	7812      	ldrb	r2, [r2, #0]
 80016a6:	605a      	str	r2, [r3, #4]
 80016a8:	e7ea      	b.n	8001680 <HAL_UART_IRQHandler+0xf8>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80016aa:	0650      	lsls	r0, r2, #25
 80016ac:	d50b      	bpl.n	80016c6 <HAL_UART_IRQHandler+0x13e>
 80016ae:	064a      	lsls	r2, r1, #25
 80016b0:	d509      	bpl.n	80016c6 <HAL_UART_IRQHandler+0x13e>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80016b2:	68da      	ldr	r2, [r3, #12]
 80016b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80016b8:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 80016ba:	2320      	movs	r3, #32
 80016bc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 80016c0:	4620      	mov	r0, r4
 80016c2:	f001 fe51 	bl	8003368 <HAL_UART_TxCpltCallback>
 80016c6:	bd70      	pop	{r4, r5, r6, pc}
 80016c8:	080016cd 	.word	0x080016cd

080016cc <UART_DMAAbortOnError>:
{
 80016cc:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80016ce:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 80016d0:	2300      	movs	r3, #0
 80016d2:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80016d4:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 80016d6:	f7ff ff2f 	bl	8001538 <HAL_UART_ErrorCallback>
 80016da:	bd08      	pop	{r3, pc}

080016dc <osKernelInitialize>:
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80016dc:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 80016e0:	b113      	cbz	r3, 80016e8 <osKernelInitialize+0xc>
    stat = osErrorISR;
 80016e2:	f06f 0005 	mvn.w	r0, #5
 80016e6:	4770      	bx	lr
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80016e8:	f3ef 8210 	mrs	r2, PRIMASK
 80016ec:	4b07      	ldr	r3, [pc, #28]	; (800170c <osKernelInitialize+0x30>)
  if (IS_IRQ()) {
 80016ee:	b912      	cbnz	r2, 80016f6 <osKernelInitialize+0x1a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80016f0:	f3ef 8211 	mrs	r2, BASEPRI
 80016f4:	b112      	cbz	r2, 80016fc <osKernelInitialize+0x20>
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	2a02      	cmp	r2, #2
 80016fa:	d0f2      	beq.n	80016e2 <osKernelInitialize+0x6>
  }
  else {
    if (KernelState == osKernelInactive) {
 80016fc:	6818      	ldr	r0, [r3, #0]
 80016fe:	b910      	cbnz	r0, 8001706 <osKernelInitialize+0x2a>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8001700:	2201      	movs	r2, #1
 8001702:	601a      	str	r2, [r3, #0]
 8001704:	4770      	bx	lr
      stat = osOK;
    } else {
      stat = osError;
 8001706:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }
  }

  return (stat);
}
 800170a:	4770      	bx	lr
 800170c:	20000288 	.word	0x20000288

08001710 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001710:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001712:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8001716:	b113      	cbz	r3, 800171e <osKernelStart+0xe>
    stat = osErrorISR;
 8001718:	f06f 0005 	mvn.w	r0, #5
 800171c:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800171e:	f3ef 8210 	mrs	r2, PRIMASK
 8001722:	4b0a      	ldr	r3, [pc, #40]	; (800174c <osKernelStart+0x3c>)
  if (IS_IRQ()) {
 8001724:	b912      	cbnz	r2, 800172c <osKernelStart+0x1c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001726:	f3ef 8211 	mrs	r2, BASEPRI
 800172a:	b112      	cbz	r2, 8001732 <osKernelStart+0x22>
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	2a02      	cmp	r2, #2
 8001730:	d0f2      	beq.n	8001718 <osKernelStart+0x8>
  }
  else {
    if (KernelState == osKernelReady) {
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	2a01      	cmp	r2, #1
 8001736:	d105      	bne.n	8001744 <osKernelStart+0x34>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8001738:	2202      	movs	r2, #2
 800173a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800173c:	f001 f846 	bl	80027cc <vTaskStartScheduler>
      stat = osOK;
 8001740:	2000      	movs	r0, #0
 8001742:	bd08      	pop	{r3, pc}
    } else {
      stat = osError;
 8001744:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }
  }

  return (stat);
}
 8001748:	bd08      	pop	{r3, pc}
 800174a:	bf00      	nop
 800174c:	20000288 	.word	0x20000288

08001750 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001750:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001752:	b087      	sub	sp, #28
 8001754:	4614      	mov	r4, r2
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001756:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001758:	460b      	mov	r3, r1
  hTask = NULL;
 800175a:	9205      	str	r2, [sp, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800175c:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 8001760:	bb42      	cbnz	r2, 80017b4 <osThreadNew+0x64>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001762:	f3ef 8210 	mrs	r2, PRIMASK
 8001766:	b912      	cbnz	r2, 800176e <osThreadNew+0x1e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001768:	f3ef 8211 	mrs	r2, BASEPRI
 800176c:	b11a      	cbz	r2, 8001776 <osThreadNew+0x26>
 800176e:	4a23      	ldr	r2, [pc, #140]	; (80017fc <osThreadNew+0xac>)
 8001770:	6812      	ldr	r2, [r2, #0]
 8001772:	2a02      	cmp	r2, #2
 8001774:	d01e      	beq.n	80017b4 <osThreadNew+0x64>
 8001776:	b1e8      	cbz	r0, 80017b4 <osThreadNew+0x64>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 8001778:	2c00      	cmp	r4, #0
 800177a:	d039      	beq.n	80017f0 <osThreadNew+0xa0>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 800177c:	69a5      	ldr	r5, [r4, #24]
 800177e:	2d00      	cmp	r5, #0
 8001780:	bf08      	it	eq
 8001782:	2518      	moveq	r5, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001784:	1e6a      	subs	r2, r5, #1
 8001786:	2a37      	cmp	r2, #55	; 0x37
 8001788:	462f      	mov	r7, r5
 800178a:	d835      	bhi.n	80017f8 <osThreadNew+0xa8>
 800178c:	6862      	ldr	r2, [r4, #4]
 800178e:	07d2      	lsls	r2, r2, #31
 8001790:	d432      	bmi.n	80017f8 <osThreadNew+0xa8>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 8001792:	6966      	ldr	r6, [r4, #20]
 8001794:	b18e      	cbz	r6, 80017ba <osThreadNew+0x6a>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001796:	08b2      	lsrs	r2, r6, #2
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001798:	f8d4 e008 	ldr.w	lr, [r4, #8]
      if (attr->name != NULL) {
 800179c:	6821      	ldr	r1, [r4, #0]
 800179e:	f8d4 c00c 	ldr.w	ip, [r4, #12]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80017a2:	f1be 0f00 	cmp.w	lr, #0
 80017a6:	d00a      	beq.n	80017be <osThreadNew+0x6e>
 80017a8:	f1bc 0f5b 	cmp.w	ip, #91	; 0x5b
 80017ac:	d902      	bls.n	80017b4 <osThreadNew+0x64>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80017ae:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80017b0:	b104      	cbz	r4, 80017b4 <osThreadNew+0x64>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80017b2:	b9ae      	cbnz	r6, 80017e0 <osThreadNew+0x90>
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80017b4:	9805      	ldr	r0, [sp, #20]
}
 80017b6:	b007      	add	sp, #28
 80017b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 80017ba:	2280      	movs	r2, #128	; 0x80
 80017bc:	e7ec      	b.n	8001798 <osThreadNew+0x48>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80017be:	f1bc 0f00 	cmp.w	ip, #0
 80017c2:	d1f7      	bne.n	80017b4 <osThreadNew+0x64>
      if (mem == 0) {
 80017c4:	6924      	ldr	r4, [r4, #16]
 80017c6:	2c00      	cmp	r4, #0
 80017c8:	d1f4      	bne.n	80017b4 <osThreadNew+0x64>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80017ca:	ac05      	add	r4, sp, #20
 80017cc:	9401      	str	r4, [sp, #4]
 80017ce:	9700      	str	r7, [sp, #0]
 80017d0:	b292      	uxth	r2, r2
 80017d2:	f000 ffcd 	bl	8002770 <xTaskCreate>
 80017d6:	2801      	cmp	r0, #1
          hTask = NULL;
 80017d8:	bf1c      	itt	ne
 80017da:	2300      	movne	r3, #0
 80017dc:	9305      	strne	r3, [sp, #20]
 80017de:	e7e9      	b.n	80017b4 <osThreadNew+0x64>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80017e0:	f8cd e008 	str.w	lr, [sp, #8]
 80017e4:	9401      	str	r4, [sp, #4]
 80017e6:	9500      	str	r5, [sp, #0]
 80017e8:	f000 ff91 	bl	800270e <xTaskCreateStatic>
 80017ec:	9005      	str	r0, [sp, #20]
 80017ee:	e7e1      	b.n	80017b4 <osThreadNew+0x64>
    prio  = (UBaseType_t)osPriorityNormal;
 80017f0:	2718      	movs	r7, #24
    stack = configMINIMAL_STACK_SIZE;
 80017f2:	2280      	movs	r2, #128	; 0x80
    name = NULL;
 80017f4:	4621      	mov	r1, r4
 80017f6:	e7e8      	b.n	80017ca <osThreadNew+0x7a>
        return (NULL);
 80017f8:	2000      	movs	r0, #0
 80017fa:	e7dc      	b.n	80017b6 <osThreadNew+0x66>
 80017fc:	20000288 	.word	0x20000288

08001800 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8001800:	b508      	push	{r3, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001802:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 8001806:	b113      	cbz	r3, 800180e <osDelay+0xe>
    stat = osErrorISR;
 8001808:	f06f 0005 	mvn.w	r0, #5
 800180c:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800180e:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 8001812:	b913      	cbnz	r3, 800181a <osDelay+0x1a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8001814:	f3ef 8311 	mrs	r3, BASEPRI
 8001818:	b11b      	cbz	r3, 8001822 <osDelay+0x22>
 800181a:	4b04      	ldr	r3, [pc, #16]	; (800182c <osDelay+0x2c>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	2b02      	cmp	r3, #2
 8001820:	d0f2      	beq.n	8001808 <osDelay+0x8>
  }
  else {
    stat = osOK;

    if (ticks != 0U) {
 8001822:	b110      	cbz	r0, 800182a <osDelay+0x2a>
      vTaskDelay(ticks);
 8001824:	f001 f928 	bl	8002a78 <vTaskDelay>
    stat = osOK;
 8001828:	2000      	movs	r0, #0
    }
  }

  return (stat);
}
 800182a:	bd08      	pop	{r3, pc}
 800182c:	20000288 	.word	0x20000288

08001830 <vApplicationGetIdleTaskMemory>:
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001830:	4b03      	ldr	r3, [pc, #12]	; (8001840 <vApplicationGetIdleTaskMemory+0x10>)
 8001832:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001834:	4b03      	ldr	r3, [pc, #12]	; (8001844 <vApplicationGetIdleTaskMemory+0x14>)
 8001836:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001838:	2380      	movs	r3, #128	; 0x80
 800183a:	6013      	str	r3, [r2, #0]
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	2000022c 	.word	0x2000022c
 8001844:	2000002c 	.word	0x2000002c

08001848 <vApplicationGetTimerTaskMemory>:
/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001848:	4b03      	ldr	r3, [pc, #12]	; (8001858 <vApplicationGetTimerTaskMemory+0x10>)
 800184a:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800184c:	4b03      	ldr	r3, [pc, #12]	; (800185c <vApplicationGetTimerTaskMemory+0x14>)
 800184e:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001850:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001854:	6013      	str	r3, [r2, #0]
 8001856:	4770      	bx	lr
 8001858:	2000068c 	.word	0x2000068c
 800185c:	2000028c 	.word	0x2000028c

08001860 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001860:	f100 0308 	add.w	r3, r0, #8
 8001864:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001866:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800186a:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800186c:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800186e:	2300      	movs	r3, #0
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001870:	6082      	str	r2, [r0, #8]
	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001872:	6003      	str	r3, [r0, #0]
 8001874:	4770      	bx	lr

08001876 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001876:	2300      	movs	r3, #0
 8001878:	6103      	str	r3, [r0, #16]
 800187a:	4770      	bx	lr

0800187c <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800187c:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800187e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001880:	689a      	ldr	r2, [r3, #8]
 8001882:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001884:	689a      	ldr	r2, [r3, #8]
 8001886:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001888:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800188a:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800188c:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800188e:	3301      	adds	r3, #1
 8001890:	6003      	str	r3, [r0, #0]
 8001892:	4770      	bx	lr

08001894 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001894:	680a      	ldr	r2, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001896:	1c53      	adds	r3, r2, #1
{
 8001898:	b530      	push	{r4, r5, lr}
	if( xValueOfInsertion == portMAX_DELAY )
 800189a:	d10a      	bne.n	80018b2 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800189c:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800189e:	685a      	ldr	r2, [r3, #4]
 80018a0:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80018a2:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80018a4:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 80018a6:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 80018a8:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 80018aa:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80018ac:	3301      	adds	r3, #1
 80018ae:	6003      	str	r3, [r0, #0]
 80018b0:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80018b2:	f100 0308 	add.w	r3, r0, #8
 80018b6:	685c      	ldr	r4, [r3, #4]
 80018b8:	6825      	ldr	r5, [r4, #0]
 80018ba:	42aa      	cmp	r2, r5
 80018bc:	d3ef      	bcc.n	800189e <vListInsert+0xa>
 80018be:	4623      	mov	r3, r4
 80018c0:	e7f9      	b.n	80018b6 <vListInsert+0x22>

080018c2 <uxListRemove>:
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80018c2:	6841      	ldr	r1, [r0, #4]
 80018c4:	6882      	ldr	r2, [r0, #8]
List_t * const pxList = pxItemToRemove->pxContainer;
 80018c6:	6903      	ldr	r3, [r0, #16]
	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80018c8:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80018ca:	6882      	ldr	r2, [r0, #8]
 80018cc:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80018ce:	6859      	ldr	r1, [r3, #4]
 80018d0:	4288      	cmp	r0, r1
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80018d2:	bf08      	it	eq
 80018d4:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80018d6:	2200      	movs	r2, #0
 80018d8:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	3a01      	subs	r2, #1
 80018de:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80018e0:	6818      	ldr	r0, [r3, #0]
}
 80018e2:	4770      	bx	lr

080018e4 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80018e4:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 80018e6:	2300      	movs	r3, #0
 80018e8:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80018ea:	4b0d      	ldr	r3, [pc, #52]	; (8001920 <prvTaskExitError+0x3c>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	3301      	adds	r3, #1
 80018f0:	d008      	beq.n	8001904 <prvTaskExitError+0x20>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80018f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018f6:	f383 8811 	msr	BASEPRI, r3
 80018fa:	f3bf 8f6f 	isb	sy
 80018fe:	f3bf 8f4f 	dsb	sy
 8001902:	e7fe      	b.n	8001902 <prvTaskExitError+0x1e>
 8001904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001908:	f383 8811 	msr	BASEPRI, r3
 800190c:	f3bf 8f6f 	isb	sy
 8001910:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8001914:	9b01      	ldr	r3, [sp, #4]
 8001916:	2b00      	cmp	r3, #0
 8001918:	d0fc      	beq.n	8001914 <prvTaskExitError+0x30>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800191a:	b002      	add	sp, #8
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	20000008 	.word	0x20000008

08001924 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8001924:	4808      	ldr	r0, [pc, #32]	; (8001948 <prvPortStartFirstTask+0x24>)
 8001926:	6800      	ldr	r0, [r0, #0]
 8001928:	6800      	ldr	r0, [r0, #0]
 800192a:	f380 8808 	msr	MSP, r0
 800192e:	f04f 0000 	mov.w	r0, #0
 8001932:	f380 8814 	msr	CONTROL, r0
 8001936:	b662      	cpsie	i
 8001938:	b661      	cpsie	f
 800193a:	f3bf 8f4f 	dsb	sy
 800193e:	f3bf 8f6f 	isb	sy
 8001942:	df00      	svc	0
 8001944:	bf00      	nop
 8001946:	0000      	.short	0x0000
 8001948:	e000ed08 	.word	0xe000ed08

0800194c <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800194c:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800195c <vPortEnableVFP+0x10>
 8001950:	6801      	ldr	r1, [r0, #0]
 8001952:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8001956:	6001      	str	r1, [r0, #0]
 8001958:	4770      	bx	lr
 800195a:	0000      	.short	0x0000
 800195c:	e000ed88 	.word	0xe000ed88

08001960 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8001960:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001964:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8001968:	4b07      	ldr	r3, [pc, #28]	; (8001988 <pxPortInitialiseStack+0x28>)
 800196a:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800196e:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8001972:	f06f 0302 	mvn.w	r3, #2
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8001976:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800197a:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800197e:	f840 3c24 	str.w	r3, [r0, #-36]
}
 8001982:	3844      	subs	r0, #68	; 0x44
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	080018e5 	.word	0x080018e5
 800198c:	00000000 	.word	0x00000000

08001990 <SVC_Handler>:
	__asm volatile (
 8001990:	4b07      	ldr	r3, [pc, #28]	; (80019b0 <pxCurrentTCBConst2>)
 8001992:	6819      	ldr	r1, [r3, #0]
 8001994:	6808      	ldr	r0, [r1, #0]
 8001996:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800199a:	f380 8809 	msr	PSP, r0
 800199e:	f3bf 8f6f 	isb	sy
 80019a2:	f04f 0000 	mov.w	r0, #0
 80019a6:	f380 8811 	msr	BASEPRI, r0
 80019aa:	4770      	bx	lr
 80019ac:	f3af 8000 	nop.w

080019b0 <pxCurrentTCBConst2>:
 80019b0:	20004308 	.word	0x20004308

080019b4 <vPortEnterCritical>:
 80019b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019b8:	f383 8811 	msr	BASEPRI, r3
 80019bc:	f3bf 8f6f 	isb	sy
 80019c0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 80019c4:	4a0a      	ldr	r2, [pc, #40]	; (80019f0 <vPortEnterCritical+0x3c>)
 80019c6:	6813      	ldr	r3, [r2, #0]
 80019c8:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 80019ca:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 80019cc:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80019ce:	d10d      	bne.n	80019ec <vPortEnterCritical+0x38>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80019d0:	4b08      	ldr	r3, [pc, #32]	; (80019f4 <vPortEnterCritical+0x40>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f013 0fff 	tst.w	r3, #255	; 0xff
 80019d8:	d008      	beq.n	80019ec <vPortEnterCritical+0x38>
 80019da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019de:	f383 8811 	msr	BASEPRI, r3
 80019e2:	f3bf 8f6f 	isb	sy
 80019e6:	f3bf 8f4f 	dsb	sy
 80019ea:	e7fe      	b.n	80019ea <vPortEnterCritical+0x36>
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	20000008 	.word	0x20000008
 80019f4:	e000ed04 	.word	0xe000ed04

080019f8 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 80019f8:	4a08      	ldr	r2, [pc, #32]	; (8001a1c <vPortExitCritical+0x24>)
 80019fa:	6813      	ldr	r3, [r2, #0]
 80019fc:	b943      	cbnz	r3, 8001a10 <vPortExitCritical+0x18>
 80019fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a02:	f383 8811 	msr	BASEPRI, r3
 8001a06:	f3bf 8f6f 	isb	sy
 8001a0a:	f3bf 8f4f 	dsb	sy
 8001a0e:	e7fe      	b.n	8001a0e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8001a10:	3b01      	subs	r3, #1
 8001a12:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8001a14:	b90b      	cbnz	r3, 8001a1a <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001a16:	f383 8811 	msr	BASEPRI, r3
 8001a1a:	4770      	bx	lr
 8001a1c:	20000008 	.word	0x20000008

08001a20 <PendSV_Handler>:
	__asm volatile
 8001a20:	f3ef 8009 	mrs	r0, PSP
 8001a24:	f3bf 8f6f 	isb	sy
 8001a28:	4b15      	ldr	r3, [pc, #84]	; (8001a80 <pxCurrentTCBConst>)
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	f01e 0f10 	tst.w	lr, #16
 8001a30:	bf08      	it	eq
 8001a32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001a36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a3a:	6010      	str	r0, [r2, #0]
 8001a3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8001a40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001a44:	f380 8811 	msr	BASEPRI, r0
 8001a48:	f3bf 8f4f 	dsb	sy
 8001a4c:	f3bf 8f6f 	isb	sy
 8001a50:	f001 f836 	bl	8002ac0 <vTaskSwitchContext>
 8001a54:	f04f 0000 	mov.w	r0, #0
 8001a58:	f380 8811 	msr	BASEPRI, r0
 8001a5c:	bc09      	pop	{r0, r3}
 8001a5e:	6819      	ldr	r1, [r3, #0]
 8001a60:	6808      	ldr	r0, [r1, #0]
 8001a62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a66:	f01e 0f10 	tst.w	lr, #16
 8001a6a:	bf08      	it	eq
 8001a6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001a70:	f380 8809 	msr	PSP, r0
 8001a74:	f3bf 8f6f 	isb	sy
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	f3af 8000 	nop.w

08001a80 <pxCurrentTCBConst>:
 8001a80:	20004308 	.word	0x20004308

08001a84 <SysTick_Handler>:
{
 8001a84:	b508      	push	{r3, lr}
	__asm volatile
 8001a86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001a8a:	f383 8811 	msr	BASEPRI, r3
 8001a8e:	f3bf 8f6f 	isb	sy
 8001a92:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 8001a96:	f000 feeb 	bl	8002870 <xTaskIncrementTick>
 8001a9a:	b118      	cbz	r0, 8001aa4 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8001a9c:	4b03      	ldr	r3, [pc, #12]	; (8001aac <SysTick_Handler+0x28>)
 8001a9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001aa2:	601a      	str	r2, [r3, #0]
	__asm volatile
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	f383 8811 	msr	BASEPRI, r3
 8001aaa:	bd08      	pop	{r3, pc}
 8001aac:	e000ed04 	.word	0xe000ed04

08001ab0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8001ab0:	4a08      	ldr	r2, [pc, #32]	; (8001ad4 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001ab2:	4909      	ldr	r1, [pc, #36]	; (8001ad8 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8001ab8:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8001aba:	4b08      	ldr	r3, [pc, #32]	; (8001adc <vPortSetupTimerInterrupt+0x2c>)
 8001abc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ac6:	4906      	ldr	r1, [pc, #24]	; (8001ae0 <vPortSetupTimerInterrupt+0x30>)
 8001ac8:	3b01      	subs	r3, #1
 8001aca:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8001acc:	2307      	movs	r3, #7
 8001ace:	6013      	str	r3, [r2, #0]
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	e000e010 	.word	0xe000e010
 8001ad8:	e000e018 	.word	0xe000e018
 8001adc:	2000000c 	.word	0x2000000c
 8001ae0:	e000e014 	.word	0xe000e014

08001ae4 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001ae4:	4b39      	ldr	r3, [pc, #228]	; (8001bcc <xPortStartScheduler+0xe8>)
 8001ae6:	4a3a      	ldr	r2, [pc, #232]	; (8001bd0 <xPortStartScheduler+0xec>)
{
 8001ae8:	b513      	push	{r0, r1, r4, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001aea:	6819      	ldr	r1, [r3, #0]
 8001aec:	4291      	cmp	r1, r2
 8001aee:	d108      	bne.n	8001b02 <xPortStartScheduler+0x1e>
	__asm volatile
 8001af0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001af4:	f383 8811 	msr	BASEPRI, r3
 8001af8:	f3bf 8f6f 	isb	sy
 8001afc:	f3bf 8f4f 	dsb	sy
 8001b00:	e7fe      	b.n	8001b00 <xPortStartScheduler+0x1c>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	4b33      	ldr	r3, [pc, #204]	; (8001bd4 <xPortStartScheduler+0xf0>)
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d108      	bne.n	8001b1c <xPortStartScheduler+0x38>
 8001b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b0e:	f383 8811 	msr	BASEPRI, r3
 8001b12:	f3bf 8f6f 	isb	sy
 8001b16:	f3bf 8f4f 	dsb	sy
 8001b1a:	e7fe      	b.n	8001b1a <xPortStartScheduler+0x36>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8001b1c:	4b2e      	ldr	r3, [pc, #184]	; (8001bd8 <xPortStartScheduler+0xf4>)
 8001b1e:	781a      	ldrb	r2, [r3, #0]
 8001b20:	b2d2      	uxtb	r2, r2
 8001b22:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001b24:	22ff      	movs	r2, #255	; 0xff
 8001b26:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001b28:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001b2a:	4a2c      	ldr	r2, [pc, #176]	; (8001bdc <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8001b32:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8001b36:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001b3a:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8001b3c:	4b28      	ldr	r3, [pc, #160]	; (8001be0 <xPortStartScheduler+0xfc>)
 8001b3e:	2207      	movs	r2, #7
 8001b40:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001b42:	2100      	movs	r1, #0
 8001b44:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8001b48:	0600      	lsls	r0, r0, #24
 8001b4a:	f102 34ff 	add.w	r4, r2, #4294967295	; 0xffffffff
 8001b4e:	d40d      	bmi.n	8001b6c <xPortStartScheduler+0x88>
 8001b50:	b101      	cbz	r1, 8001b54 <xPortStartScheduler+0x70>
 8001b52:	601a      	str	r2, [r3, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	2a03      	cmp	r2, #3
 8001b58:	d011      	beq.n	8001b7e <xPortStartScheduler+0x9a>
 8001b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b5e:	f383 8811 	msr	BASEPRI, r3
 8001b62:	f3bf 8f6f 	isb	sy
 8001b66:	f3bf 8f4f 	dsb	sy
 8001b6a:	e7fe      	b.n	8001b6a <xPortStartScheduler+0x86>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8001b6c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8001b70:	0052      	lsls	r2, r2, #1
 8001b72:	b2d2      	uxtb	r2, r2
 8001b74:	f88d 2003 	strb.w	r2, [sp, #3]
 8001b78:	2101      	movs	r1, #1
 8001b7a:	4622      	mov	r2, r4
 8001b7c:	e7e2      	b.n	8001b44 <xPortStartScheduler+0x60>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8001b7e:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8001b80:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8001b84:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8001b86:	9b01      	ldr	r3, [sp, #4]
 8001b88:	4a13      	ldr	r2, [pc, #76]	; (8001bd8 <xPortStartScheduler+0xf4>)
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8001b8e:	4b15      	ldr	r3, [pc, #84]	; (8001be4 <xPortStartScheduler+0x100>)
 8001b90:	681a      	ldr	r2, [r3, #0]
 8001b92:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8001b96:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8001b9e:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8001ba0:	f7ff ff86 	bl	8001ab0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8001ba4:	4b10      	ldr	r3, [pc, #64]	; (8001be8 <xPortStartScheduler+0x104>)
 8001ba6:	2400      	movs	r4, #0
 8001ba8:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
 8001baa:	f7ff fecf 	bl	800194c <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8001bae:	4a0f      	ldr	r2, [pc, #60]	; (8001bec <xPortStartScheduler+0x108>)
 8001bb0:	6813      	ldr	r3, [r2, #0]
 8001bb2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8001bb6:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
 8001bb8:	f7ff feb4 	bl	8001924 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8001bbc:	f000 ff80 	bl	8002ac0 <vTaskSwitchContext>
	prvTaskExitError();
 8001bc0:	f7ff fe90 	bl	80018e4 <prvTaskExitError>
}
 8001bc4:	4620      	mov	r0, r4
 8001bc6:	b002      	add	sp, #8
 8001bc8:	bd10      	pop	{r4, pc}
 8001bca:	bf00      	nop
 8001bcc:	e000ed00 	.word	0xe000ed00
 8001bd0:	410fc271 	.word	0x410fc271
 8001bd4:	410fc270 	.word	0x410fc270
 8001bd8:	e000e400 	.word	0xe000e400
 8001bdc:	200006e8 	.word	0x200006e8
 8001be0:	200006ec 	.word	0x200006ec
 8001be4:	e000ed20 	.word	0xe000ed20
 8001be8:	20000008 	.word	0x20000008
 8001bec:	e000ef34 	.word	0xe000ef34

08001bf0 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8001bf0:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8001bf4:	2b0f      	cmp	r3, #15
 8001bf6:	d90e      	bls.n	8001c16 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8001bf8:	4a10      	ldr	r2, [pc, #64]	; (8001c3c <vPortValidateInterruptPriority+0x4c>)
 8001bfa:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8001bfc:	4a10      	ldr	r2, [pc, #64]	; (8001c40 <vPortValidateInterruptPriority+0x50>)
 8001bfe:	7812      	ldrb	r2, [r2, #0]
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d908      	bls.n	8001c16 <vPortValidateInterruptPriority+0x26>
 8001c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c08:	f383 8811 	msr	BASEPRI, r3
 8001c0c:	f3bf 8f6f 	isb	sy
 8001c10:	f3bf 8f4f 	dsb	sy
 8001c14:	e7fe      	b.n	8001c14 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8001c16:	4b0b      	ldr	r3, [pc, #44]	; (8001c44 <vPortValidateInterruptPriority+0x54>)
 8001c18:	4a0b      	ldr	r2, [pc, #44]	; (8001c48 <vPortValidateInterruptPriority+0x58>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	6812      	ldr	r2, [r2, #0]
 8001c1e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d908      	bls.n	8001c38 <vPortValidateInterruptPriority+0x48>
 8001c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c2a:	f383 8811 	msr	BASEPRI, r3
 8001c2e:	f3bf 8f6f 	isb	sy
 8001c32:	f3bf 8f4f 	dsb	sy
 8001c36:	e7fe      	b.n	8001c36 <vPortValidateInterruptPriority+0x46>
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	e000e3f0 	.word	0xe000e3f0
 8001c40:	200006e8 	.word	0x200006e8
 8001c44:	e000ed0c 	.word	0xe000ed0c
 8001c48:	200006ec 	.word	0x200006ec

08001c4c <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001c4c:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001c4e:	4b0f      	ldr	r3, [pc, #60]	; (8001c8c <prvInsertBlockIntoFreeList+0x40>)
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	4282      	cmp	r2, r0
 8001c54:	d318      	bcc.n	8001c88 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001c56:	685c      	ldr	r4, [r3, #4]
 8001c58:	1919      	adds	r1, r3, r4
 8001c5a:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001c5c:	bf01      	itttt	eq
 8001c5e:	6841      	ldreq	r1, [r0, #4]
 8001c60:	4618      	moveq	r0, r3
 8001c62:	1909      	addeq	r1, r1, r4
 8001c64:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001c66:	6844      	ldr	r4, [r0, #4]
 8001c68:	1901      	adds	r1, r0, r4
 8001c6a:	428a      	cmp	r2, r1
 8001c6c:	d107      	bne.n	8001c7e <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001c6e:	4908      	ldr	r1, [pc, #32]	; (8001c90 <prvInsertBlockIntoFreeList+0x44>)
 8001c70:	6809      	ldr	r1, [r1, #0]
 8001c72:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001c74:	bf1f      	itttt	ne
 8001c76:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001c78:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001c7a:	1909      	addne	r1, r1, r4
 8001c7c:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001c7e:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001c80:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001c82:	bf18      	it	ne
 8001c84:	6018      	strne	r0, [r3, #0]
 8001c86:	bd10      	pop	{r4, pc}
 8001c88:	4613      	mov	r3, r2
 8001c8a:	e7e1      	b.n	8001c50 <prvInsertBlockIntoFreeList+0x4>
 8001c8c:	20004300 	.word	0x20004300
 8001c90:	200006f0 	.word	0x200006f0

08001c94 <pvPortMalloc>:
{
 8001c94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c98:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8001c9a:	f000 fddb 	bl	8002854 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8001c9e:	493e      	ldr	r1, [pc, #248]	; (8001d98 <pvPortMalloc+0x104>)
 8001ca0:	4d3e      	ldr	r5, [pc, #248]	; (8001d9c <pvPortMalloc+0x108>)
 8001ca2:	680b      	ldr	r3, [r1, #0]
 8001ca4:	bb0b      	cbnz	r3, 8001cea <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 8001ca6:	4a3e      	ldr	r2, [pc, #248]	; (8001da0 <pvPortMalloc+0x10c>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001ca8:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001caa:	bf1f      	itttt	ne
 8001cac:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001cae:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001cb2:	f502 5370 	addne.w	r3, r2, #15360	; 0x3c00
 8001cb6:	1a1b      	subne	r3, r3, r0
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001cb8:	bf14      	ite	ne
 8001cba:	4602      	movne	r2, r0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001cbc:	f44f 5370 	moveq.w	r3, #15360	; 0x3c00
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001cc0:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 8001cc2:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001cc4:	f023 0307 	bic.w	r3, r3, #7
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001cc8:	4e36      	ldr	r6, [pc, #216]	; (8001da4 <pvPortMalloc+0x110>)
	pxEnd = ( void * ) uxAddress;
 8001cca:	600b      	str	r3, [r1, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001ccc:	2000      	movs	r0, #0
 8001cce:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001cd0:	6032      	str	r2, [r6, #0]
	pxEnd->xBlockSize = 0;
 8001cd2:	6058      	str	r0, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8001cd4:	6018      	str	r0, [r3, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001cd6:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001cd8:	6013      	str	r3, [r2, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001cda:	4b33      	ldr	r3, [pc, #204]	; (8001da8 <pvPortMalloc+0x114>)
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001cdc:	6050      	str	r0, [r2, #4]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001cde:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001ce0:	4b32      	ldr	r3, [pc, #200]	; (8001dac <pvPortMalloc+0x118>)
 8001ce2:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001ce4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001ce8:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001cea:	682f      	ldr	r7, [r5, #0]
 8001cec:	4227      	tst	r7, r4
 8001cee:	d116      	bne.n	8001d1e <pvPortMalloc+0x8a>
			if( xWantedSize > 0 )
 8001cf0:	2c00      	cmp	r4, #0
 8001cf2:	d041      	beq.n	8001d78 <pvPortMalloc+0xe4>
				xWantedSize += xHeapStructSize;
 8001cf4:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001cf8:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001cfa:	bf1c      	itt	ne
 8001cfc:	f023 0307 	bicne.w	r3, r3, #7
 8001d00:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001d02:	b163      	cbz	r3, 8001d1e <pvPortMalloc+0x8a>
 8001d04:	4a29      	ldr	r2, [pc, #164]	; (8001dac <pvPortMalloc+0x118>)
 8001d06:	6816      	ldr	r6, [r2, #0]
 8001d08:	42b3      	cmp	r3, r6
 8001d0a:	4690      	mov	r8, r2
 8001d0c:	d807      	bhi.n	8001d1e <pvPortMalloc+0x8a>
				pxBlock = xStart.pxNextFreeBlock;
 8001d0e:	4a25      	ldr	r2, [pc, #148]	; (8001da4 <pvPortMalloc+0x110>)
 8001d10:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001d12:	6868      	ldr	r0, [r5, #4]
 8001d14:	4283      	cmp	r3, r0
 8001d16:	d804      	bhi.n	8001d22 <pvPortMalloc+0x8e>
				if( pxBlock != pxEnd )
 8001d18:	6809      	ldr	r1, [r1, #0]
 8001d1a:	428d      	cmp	r5, r1
 8001d1c:	d107      	bne.n	8001d2e <pvPortMalloc+0x9a>
void *pvReturn = NULL;
 8001d1e:	2400      	movs	r4, #0
 8001d20:	e02a      	b.n	8001d78 <pvPortMalloc+0xe4>
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001d22:	682c      	ldr	r4, [r5, #0]
 8001d24:	2c00      	cmp	r4, #0
 8001d26:	d0f7      	beq.n	8001d18 <pvPortMalloc+0x84>
 8001d28:	462a      	mov	r2, r5
 8001d2a:	4625      	mov	r5, r4
 8001d2c:	e7f1      	b.n	8001d12 <pvPortMalloc+0x7e>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001d2e:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001d30:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001d32:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001d34:	1ac2      	subs	r2, r0, r3
 8001d36:	2a10      	cmp	r2, #16
 8001d38:	d90f      	bls.n	8001d5a <pvPortMalloc+0xc6>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001d3a:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001d3c:	0741      	lsls	r1, r0, #29
 8001d3e:	d008      	beq.n	8001d52 <pvPortMalloc+0xbe>
 8001d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d44:	f383 8811 	msr	BASEPRI, r3
 8001d48:	f3bf 8f6f 	isb	sy
 8001d4c:	f3bf 8f4f 	dsb	sy
 8001d50:	e7fe      	b.n	8001d50 <pvPortMalloc+0xbc>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001d52:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001d54:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001d56:	f7ff ff79 	bl	8001c4c <prvInsertBlockIntoFreeList>
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001d5a:	4913      	ldr	r1, [pc, #76]	; (8001da8 <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001d5c:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001d5e:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001d60:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001d62:	431f      	orrs	r7, r3
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001d64:	4286      	cmp	r6, r0
					pxBlock->pxNextFreeBlock = NULL;
 8001d66:	f04f 0300 	mov.w	r3, #0
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001d6a:	f8c8 6000 	str.w	r6, [r8]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001d6e:	bf38      	it	cc
 8001d70:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001d72:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001d74:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001d76:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8001d78:	f000 fe0a 	bl	8002990 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001d7c:	0763      	lsls	r3, r4, #29
 8001d7e:	d008      	beq.n	8001d92 <pvPortMalloc+0xfe>
 8001d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d84:	f383 8811 	msr	BASEPRI, r3
 8001d88:	f3bf 8f6f 	isb	sy
 8001d8c:	f3bf 8f4f 	dsb	sy
 8001d90:	e7fe      	b.n	8001d90 <pvPortMalloc+0xfc>
}
 8001d92:	4620      	mov	r0, r4
 8001d94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001d98:	200006f0 	.word	0x200006f0
 8001d9c:	200042f4 	.word	0x200042f4
 8001da0:	200006f4 	.word	0x200006f4
 8001da4:	20004300 	.word	0x20004300
 8001da8:	200042fc 	.word	0x200042fc
 8001dac:	200042f8 	.word	0x200042f8

08001db0 <vPortFree>:
{
 8001db0:	b510      	push	{r4, lr}
	if( pv != NULL )
 8001db2:	4604      	mov	r4, r0
 8001db4:	b370      	cbz	r0, 8001e14 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8001db6:	4a18      	ldr	r2, [pc, #96]	; (8001e18 <vPortFree+0x68>)
 8001db8:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8001dbc:	6812      	ldr	r2, [r2, #0]
 8001dbe:	4213      	tst	r3, r2
 8001dc0:	d108      	bne.n	8001dd4 <vPortFree+0x24>
 8001dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dc6:	f383 8811 	msr	BASEPRI, r3
 8001dca:	f3bf 8f6f 	isb	sy
 8001dce:	f3bf 8f4f 	dsb	sy
 8001dd2:	e7fe      	b.n	8001dd2 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001dd4:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8001dd8:	b141      	cbz	r1, 8001dec <vPortFree+0x3c>
 8001dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dde:	f383 8811 	msr	BASEPRI, r3
 8001de2:	f3bf 8f6f 	isb	sy
 8001de6:	f3bf 8f4f 	dsb	sy
 8001dea:	e7fe      	b.n	8001dea <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001dec:	ea23 0302 	bic.w	r3, r3, r2
 8001df0:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8001df4:	f000 fd2e 	bl	8002854 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001df8:	4a08      	ldr	r2, [pc, #32]	; (8001e1c <vPortFree+0x6c>)
 8001dfa:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8001dfe:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001e00:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001e04:	440b      	add	r3, r1
 8001e06:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001e08:	f7ff ff20 	bl	8001c4c <prvInsertBlockIntoFreeList>
}
 8001e0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8001e10:	f000 bdbe 	b.w	8002990 <xTaskResumeAll>
 8001e14:	bd10      	pop	{r4, pc}
 8001e16:	bf00      	nop
 8001e18:	200042f4 	.word	0x200042f4
 8001e1c:	200042f8 	.word	0x200042f8

08001e20 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8001e20:	b510      	push	{r4, lr}
 8001e22:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001e24:	f7ff fdc6 	bl	80019b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8001e28:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8001e2a:	f7ff fde5 	bl	80019f8 <vPortExitCritical>

	return xReturn;
}
 8001e2e:	fab4 f084 	clz	r0, r4
 8001e32:	0940      	lsrs	r0, r0, #5
 8001e34:	bd10      	pop	{r4, pc}

08001e36 <prvCopyDataToQueue>:
{
 8001e36:	b570      	push	{r4, r5, r6, lr}
 8001e38:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001e3a:	6c02      	ldr	r2, [r0, #64]	; 0x40
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001e3c:	6b86      	ldr	r6, [r0, #56]	; 0x38
{
 8001e3e:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001e40:	b942      	cbnz	r2, 8001e54 <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001e42:	6805      	ldr	r5, [r0, #0]
 8001e44:	b99d      	cbnz	r5, 8001e6e <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8001e46:	6880      	ldr	r0, [r0, #8]
 8001e48:	f000 ff4c 	bl	8002ce4 <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8001e4c:	60a5      	str	r5, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001e4e:	3601      	adds	r6, #1
 8001e50:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8001e52:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8001e54:	b96d      	cbnz	r5, 8001e72 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001e56:	6840      	ldr	r0, [r0, #4]
 8001e58:	f001 fbea 	bl	8003630 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001e5c:	6863      	ldr	r3, [r4, #4]
 8001e5e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001e60:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001e62:	68a2      	ldr	r2, [r4, #8]
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001e64:	6063      	str	r3, [r4, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d301      	bcc.n	8001e6e <prvCopyDataToQueue+0x38>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8001e6a:	6823      	ldr	r3, [r4, #0]
 8001e6c:	6063      	str	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 8001e6e:	2000      	movs	r0, #0
 8001e70:	e7ed      	b.n	8001e4e <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8001e72:	68c0      	ldr	r0, [r0, #12]
 8001e74:	f001 fbdc 	bl	8003630 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8001e78:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001e7a:	68e2      	ldr	r2, [r4, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001e7c:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8001e7e:	425b      	negs	r3, r3
 8001e80:	441a      	add	r2, r3
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001e82:	428a      	cmp	r2, r1
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8001e84:	60e2      	str	r2, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8001e86:	bf3e      	ittt	cc
 8001e88:	68a2      	ldrcc	r2, [r4, #8]
 8001e8a:	189b      	addcc	r3, r3, r2
 8001e8c:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8001e8e:	2d02      	cmp	r5, #2
 8001e90:	d1ed      	bne.n	8001e6e <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001e92:	b10e      	cbz	r6, 8001e98 <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 8001e94:	3e01      	subs	r6, #1
 8001e96:	e7ea      	b.n	8001e6e <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 8001e98:	4630      	mov	r0, r6
 8001e9a:	e7d8      	b.n	8001e4e <prvCopyDataToQueue+0x18>

08001e9c <prvCopyDataFromQueue>:
{
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001ea0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 8001ea2:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001ea4:	b162      	cbz	r2, 8001ec0 <prvCopyDataFromQueue+0x24>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001ea6:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001ea8:	689c      	ldr	r4, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001eaa:	4411      	add	r1, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001eac:	42a1      	cmp	r1, r4
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8001eae:	60d9      	str	r1, [r3, #12]
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8001eb0:	bf24      	itt	cs
 8001eb2:	6819      	ldrcs	r1, [r3, #0]
 8001eb4:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001eb6:	68d9      	ldr	r1, [r3, #12]
}
 8001eb8:	f85d 4b04 	ldr.w	r4, [sp], #4
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8001ebc:	f001 bbb8 	b.w	8003630 <memcpy>
}
 8001ec0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001ec4:	4770      	bx	lr

08001ec6 <prvUnlockQueue>:
{
 8001ec6:	b570      	push	{r4, r5, r6, lr}
 8001ec8:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8001eca:	f7ff fd73 	bl	80019b4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8001ece:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001ed2:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8001ed6:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001ed8:	2d00      	cmp	r5, #0
 8001eda:	dc14      	bgt.n	8001f06 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 8001edc:	23ff      	movs	r3, #255	; 0xff
 8001ede:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8001ee2:	f7ff fd89 	bl	80019f8 <vPortExitCritical>
	taskENTER_CRITICAL();
 8001ee6:	f7ff fd65 	bl	80019b4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8001eea:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001eee:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 8001ef2:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001ef4:	2d00      	cmp	r5, #0
 8001ef6:	dc12      	bgt.n	8001f1e <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 8001ef8:	23ff      	movs	r3, #255	; 0xff
 8001efa:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 8001efe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8001f02:	f7ff bd79 	b.w	80019f8 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001f06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d0e7      	beq.n	8001edc <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001f0c:	4630      	mov	r0, r6
 8001f0e:	f000 fe4b 	bl	8002ba8 <xTaskRemoveFromEventList>
 8001f12:	b108      	cbz	r0, 8001f18 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8001f14:	f000 fed0 	bl	8002cb8 <vTaskMissedYield>
 8001f18:	3d01      	subs	r5, #1
 8001f1a:	b26d      	sxtb	r5, r5
 8001f1c:	e7dc      	b.n	8001ed8 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001f1e:	6923      	ldr	r3, [r4, #16]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d0e9      	beq.n	8001ef8 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001f24:	4630      	mov	r0, r6
 8001f26:	f000 fe3f 	bl	8002ba8 <xTaskRemoveFromEventList>
 8001f2a:	b108      	cbz	r0, 8001f30 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 8001f2c:	f000 fec4 	bl	8002cb8 <vTaskMissedYield>
 8001f30:	3d01      	subs	r5, #1
 8001f32:	b26d      	sxtb	r5, r5
 8001f34:	e7de      	b.n	8001ef4 <prvUnlockQueue+0x2e>
	...

08001f38 <xQueueGenericReset>:
{
 8001f38:	b538      	push	{r3, r4, r5, lr}
 8001f3a:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8001f3c:	4604      	mov	r4, r0
 8001f3e:	b940      	cbnz	r0, 8001f52 <xQueueGenericReset+0x1a>
 8001f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f44:	f383 8811 	msr	BASEPRI, r3
 8001f48:	f3bf 8f6f 	isb	sy
 8001f4c:	f3bf 8f4f 	dsb	sy
 8001f50:	e7fe      	b.n	8001f50 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 8001f52:	f7ff fd2f 	bl	80019b4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001f56:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8001f58:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001f5a:	6822      	ldr	r2, [r4, #0]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001f5c:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001f5e:	4343      	muls	r3, r0
 8001f60:	18d1      	adds	r1, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001f62:	1a1b      	subs	r3, r3, r0
 8001f64:	4413      	add	r3, r2
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001f66:	60a1      	str	r1, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001f68:	60e3      	str	r3, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001f6a:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
 8001f6c:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001f6e:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 8001f70:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001f74:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 8001f78:	b995      	cbnz	r5, 8001fa0 <xQueueGenericReset+0x68>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001f7a:	6923      	ldr	r3, [r4, #16]
 8001f7c:	b163      	cbz	r3, 8001f98 <xQueueGenericReset+0x60>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001f7e:	f104 0010 	add.w	r0, r4, #16
 8001f82:	f000 fe11 	bl	8002ba8 <xTaskRemoveFromEventList>
 8001f86:	b138      	cbz	r0, 8001f98 <xQueueGenericReset+0x60>
					queueYIELD_IF_USING_PREEMPTION();
 8001f88:	4b0a      	ldr	r3, [pc, #40]	; (8001fb4 <xQueueGenericReset+0x7c>)
 8001f8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f8e:	601a      	str	r2, [r3, #0]
 8001f90:	f3bf 8f4f 	dsb	sy
 8001f94:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8001f98:	f7ff fd2e 	bl	80019f8 <vPortExitCritical>
}
 8001f9c:	2001      	movs	r0, #1
 8001f9e:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001fa0:	f104 0010 	add.w	r0, r4, #16
 8001fa4:	f7ff fc5c 	bl	8001860 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001fa8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8001fac:	f7ff fc58 	bl	8001860 <vListInitialise>
 8001fb0:	e7f2      	b.n	8001f98 <xQueueGenericReset+0x60>
 8001fb2:	bf00      	nop
 8001fb4:	e000ed04 	.word	0xe000ed04

08001fb8 <xQueueGenericCreateStatic>:
	{
 8001fb8:	b513      	push	{r0, r1, r4, lr}
 8001fba:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001fbc:	b940      	cbnz	r0, 8001fd0 <xQueueGenericCreateStatic+0x18>
 8001fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fc2:	f383 8811 	msr	BASEPRI, r3
 8001fc6:	f3bf 8f6f 	isb	sy
 8001fca:	f3bf 8f4f 	dsb	sy
 8001fce:	e7fe      	b.n	8001fce <xQueueGenericCreateStatic+0x16>
		configASSERT( pxStaticQueue != NULL );
 8001fd0:	b943      	cbnz	r3, 8001fe4 <xQueueGenericCreateStatic+0x2c>
 8001fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fd6:	f383 8811 	msr	BASEPRI, r3
 8001fda:	f3bf 8f6f 	isb	sy
 8001fde:	f3bf 8f4f 	dsb	sy
 8001fe2:	e7fe      	b.n	8001fe2 <xQueueGenericCreateStatic+0x2a>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8001fe4:	b14a      	cbz	r2, 8001ffa <xQueueGenericCreateStatic+0x42>
 8001fe6:	b9d9      	cbnz	r1, 8002020 <xQueueGenericCreateStatic+0x68>
 8001fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fec:	f383 8811 	msr	BASEPRI, r3
 8001ff0:	f3bf 8f6f 	isb	sy
 8001ff4:	f3bf 8f4f 	dsb	sy
 8001ff8:	e7fe      	b.n	8001ff8 <xQueueGenericCreateStatic+0x40>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001ffa:	b189      	cbz	r1, 8002020 <xQueueGenericCreateStatic+0x68>
 8001ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002000:	f383 8811 	msr	BASEPRI, r3
 8002004:	f3bf 8f6f 	isb	sy
 8002008:	f3bf 8f4f 	dsb	sy
 800200c:	e7fe      	b.n	800200c <xQueueGenericCreateStatic+0x54>
 800200e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002012:	f383 8811 	msr	BASEPRI, r3
 8002016:	f3bf 8f6f 	isb	sy
 800201a:	f3bf 8f4f 	dsb	sy
 800201e:	e7fe      	b.n	800201e <xQueueGenericCreateStatic+0x66>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002020:	2350      	movs	r3, #80	; 0x50
 8002022:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002024:	9b01      	ldr	r3, [sp, #4]
 8002026:	2b50      	cmp	r3, #80	; 0x50
 8002028:	d1f1      	bne.n	800200e <xQueueGenericCreateStatic+0x56>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800202a:	2900      	cmp	r1, #0
 800202c:	bf08      	it	eq
 800202e:	4622      	moveq	r2, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002030:	9b01      	ldr	r3, [sp, #4]
	pxNewQueue->uxLength = uxQueueLength;
 8002032:	63e0      	str	r0, [r4, #60]	; 0x3c
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002034:	2301      	movs	r3, #1
 8002036:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 800203a:	6421      	str	r1, [r4, #64]	; 0x40
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800203c:	6022      	str	r2, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800203e:	4619      	mov	r1, r3
 8002040:	4620      	mov	r0, r4
 8002042:	f7ff ff79 	bl	8001f38 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 8002046:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800204a:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
	}
 800204e:	4620      	mov	r0, r4
 8002050:	b002      	add	sp, #8
 8002052:	bd10      	pop	{r4, pc}

08002054 <xQueueGenericSend>:
{
 8002054:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002058:	4689      	mov	r9, r1
 800205a:	9201      	str	r2, [sp, #4]
 800205c:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 800205e:	4604      	mov	r4, r0
 8002060:	b940      	cbnz	r0, 8002074 <xQueueGenericSend+0x20>
 8002062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002066:	f383 8811 	msr	BASEPRI, r3
 800206a:	f3bf 8f6f 	isb	sy
 800206e:	f3bf 8f4f 	dsb	sy
 8002072:	e7fe      	b.n	8002072 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002074:	2900      	cmp	r1, #0
 8002076:	f040 8088 	bne.w	800218a <xQueueGenericSend+0x136>
 800207a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800207c:	2b00      	cmp	r3, #0
 800207e:	f000 8084 	beq.w	800218a <xQueueGenericSend+0x136>
 8002082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002086:	f383 8811 	msr	BASEPRI, r3
 800208a:	f3bf 8f6f 	isb	sy
 800208e:	f3bf 8f4f 	dsb	sy
 8002092:	e7fe      	b.n	8002092 <xQueueGenericSend+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002094:	9e01      	ldr	r6, [sp, #4]
 8002096:	2e00      	cmp	r6, #0
 8002098:	f000 8082 	beq.w	80021a0 <xQueueGenericSend+0x14c>
 800209c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020a0:	f383 8811 	msr	BASEPRI, r3
 80020a4:	f3bf 8f6f 	isb	sy
 80020a8:	f3bf 8f4f 	dsb	sy
 80020ac:	e7fe      	b.n	80020ac <xQueueGenericSend+0x58>
				if( xTicksToWait == ( TickType_t ) 0 )
 80020ae:	9d01      	ldr	r5, [sp, #4]
 80020b0:	b91d      	cbnz	r5, 80020ba <xQueueGenericSend+0x66>
					taskEXIT_CRITICAL();
 80020b2:	f7ff fca1 	bl	80019f8 <vPortExitCritical>
			return errQUEUE_FULL;
 80020b6:	2000      	movs	r0, #0
 80020b8:	e058      	b.n	800216c <xQueueGenericSend+0x118>
				else if( xEntryTimeSet == pdFALSE )
 80020ba:	b916      	cbnz	r6, 80020c2 <xQueueGenericSend+0x6e>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80020bc:	a802      	add	r0, sp, #8
 80020be:	f000 fdb3 	bl	8002c28 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 80020c2:	f7ff fc99 	bl	80019f8 <vPortExitCritical>
		vTaskSuspendAll();
 80020c6:	f000 fbc5 	bl	8002854 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80020ca:	f7ff fc73 	bl	80019b4 <vPortEnterCritical>
 80020ce:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80020d2:	2bff      	cmp	r3, #255	; 0xff
 80020d4:	bf08      	it	eq
 80020d6:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 80020da:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80020de:	2bff      	cmp	r3, #255	; 0xff
 80020e0:	bf08      	it	eq
 80020e2:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 80020e6:	f7ff fc87 	bl	80019f8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80020ea:	a901      	add	r1, sp, #4
 80020ec:	a802      	add	r0, sp, #8
 80020ee:	f000 fda7 	bl	8002c40 <xTaskCheckForTimeOut>
 80020f2:	2800      	cmp	r0, #0
 80020f4:	d143      	bne.n	800217e <xQueueGenericSend+0x12a>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80020f6:	f7ff fc5d 	bl	80019b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80020fa:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80020fc:	6be5      	ldr	r5, [r4, #60]	; 0x3c
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80020fe:	f7ff fc7b 	bl	80019f8 <vPortExitCritical>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002102:	42ae      	cmp	r6, r5
 8002104:	d135      	bne.n	8002172 <xQueueGenericSend+0x11e>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002106:	9901      	ldr	r1, [sp, #4]
 8002108:	f104 0010 	add.w	r0, r4, #16
 800210c:	f000 fd14 	bl	8002b38 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002110:	4620      	mov	r0, r4
 8002112:	f7ff fed8 	bl	8001ec6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002116:	f000 fc3b 	bl	8002990 <xTaskResumeAll>
 800211a:	b938      	cbnz	r0, 800212c <xQueueGenericSend+0xd8>
					portYIELD_WITHIN_API();
 800211c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002120:	f8ca 3000 	str.w	r3, [sl]
 8002124:	f3bf 8f4f 	dsb	sy
 8002128:	f3bf 8f6f 	isb	sy
 800212c:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 800212e:	f7ff fc41 	bl	80019b4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002132:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002134:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002136:	429a      	cmp	r2, r3
 8002138:	d301      	bcc.n	800213e <xQueueGenericSend+0xea>
 800213a:	2f02      	cmp	r7, #2
 800213c:	d1b7      	bne.n	80020ae <xQueueGenericSend+0x5a>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800213e:	463a      	mov	r2, r7
 8002140:	4649      	mov	r1, r9
 8002142:	4620      	mov	r0, r4
 8002144:	f7ff fe77 	bl	8001e36 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002148:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800214a:	b11b      	cbz	r3, 8002154 <xQueueGenericSend+0x100>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800214c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002150:	f000 fd2a 	bl	8002ba8 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8002154:	b138      	cbz	r0, 8002166 <xQueueGenericSend+0x112>
						queueYIELD_IF_USING_PREEMPTION();
 8002156:	4b19      	ldr	r3, [pc, #100]	; (80021bc <xQueueGenericSend+0x168>)
 8002158:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800215c:	601a      	str	r2, [r3, #0]
 800215e:	f3bf 8f4f 	dsb	sy
 8002162:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8002166:	f7ff fc47 	bl	80019f8 <vPortExitCritical>
				return pdPASS;
 800216a:	2001      	movs	r0, #1
}
 800216c:	b004      	add	sp, #16
 800216e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				prvUnlockQueue( pxQueue );
 8002172:	4620      	mov	r0, r4
 8002174:	f7ff fea7 	bl	8001ec6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002178:	f000 fc0a 	bl	8002990 <xTaskResumeAll>
 800217c:	e7d6      	b.n	800212c <xQueueGenericSend+0xd8>
			prvUnlockQueue( pxQueue );
 800217e:	4620      	mov	r0, r4
 8002180:	f7ff fea1 	bl	8001ec6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002184:	f000 fc04 	bl	8002990 <xTaskResumeAll>
 8002188:	e795      	b.n	80020b6 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800218a:	2f02      	cmp	r7, #2
 800218c:	d102      	bne.n	8002194 <xQueueGenericSend+0x140>
 800218e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002190:	2b01      	cmp	r3, #1
 8002192:	d10a      	bne.n	80021aa <xQueueGenericSend+0x156>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002194:	f000 fd96 	bl	8002cc4 <xTaskGetSchedulerState>
 8002198:	2800      	cmp	r0, #0
 800219a:	f43f af7b 	beq.w	8002094 <xQueueGenericSend+0x40>
 800219e:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 80021a0:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 80021a4:	f8df a014 	ldr.w	sl, [pc, #20]	; 80021bc <xQueueGenericSend+0x168>
 80021a8:	e7c1      	b.n	800212e <xQueueGenericSend+0xda>
 80021aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021ae:	f383 8811 	msr	BASEPRI, r3
 80021b2:	f3bf 8f6f 	isb	sy
 80021b6:	f3bf 8f4f 	dsb	sy
 80021ba:	e7fe      	b.n	80021ba <xQueueGenericSend+0x166>
 80021bc:	e000ed04 	.word	0xe000ed04

080021c0 <xQueueGenericSendFromISR>:
{
 80021c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80021c4:	4688      	mov	r8, r1
 80021c6:	4691      	mov	r9, r2
 80021c8:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 80021ca:	4604      	mov	r4, r0
 80021cc:	b940      	cbnz	r0, 80021e0 <xQueueGenericSendFromISR+0x20>
 80021ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021d2:	f383 8811 	msr	BASEPRI, r3
 80021d6:	f3bf 8f6f 	isb	sy
 80021da:	f3bf 8f4f 	dsb	sy
 80021de:	e7fe      	b.n	80021de <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80021e0:	bb09      	cbnz	r1, 8002226 <xQueueGenericSendFromISR+0x66>
 80021e2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80021e4:	b1fb      	cbz	r3, 8002226 <xQueueGenericSendFromISR+0x66>
 80021e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021ea:	f383 8811 	msr	BASEPRI, r3
 80021ee:	f3bf 8f6f 	isb	sy
 80021f2:	f3bf 8f4f 	dsb	sy
 80021f6:	e7fe      	b.n	80021f6 <xQueueGenericSendFromISR+0x36>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80021f8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80021fc:	f000 fcd4 	bl	8002ba8 <xTaskRemoveFromEventList>
 8002200:	2800      	cmp	r0, #0
 8002202:	d034      	beq.n	800226e <xQueueGenericSendFromISR+0xae>
							if( pxHigherPriorityTaskWoken != NULL )
 8002204:	f1b9 0f00 	cmp.w	r9, #0
 8002208:	d031      	beq.n	800226e <xQueueGenericSendFromISR+0xae>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800220a:	2001      	movs	r0, #1
 800220c:	f8c9 0000 	str.w	r0, [r9]
	__asm volatile
 8002210:	f386 8811 	msr	BASEPRI, r6
}
 8002214:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002218:	3501      	adds	r5, #1
 800221a:	b26d      	sxtb	r5, r5
 800221c:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 8002220:	e025      	b.n	800226e <xQueueGenericSendFromISR+0xae>
			xReturn = errQUEUE_FULL;
 8002222:	2000      	movs	r0, #0
 8002224:	e7f4      	b.n	8002210 <xQueueGenericSendFromISR+0x50>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002226:	2f02      	cmp	r7, #2
 8002228:	d102      	bne.n	8002230 <xQueueGenericSendFromISR+0x70>
 800222a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800222c:	2b01      	cmp	r3, #1
 800222e:	d120      	bne.n	8002272 <xQueueGenericSendFromISR+0xb2>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002230:	f7ff fcde 	bl	8001bf0 <vPortValidateInterruptPriority>
	__asm volatile
 8002234:	f3ef 8611 	mrs	r6, BASEPRI
 8002238:	f04f 0350 	mov.w	r3, #80	; 0x50
 800223c:	f383 8811 	msr	BASEPRI, r3
 8002240:	f3bf 8f6f 	isb	sy
 8002244:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002248:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800224a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800224c:	429a      	cmp	r2, r3
 800224e:	d301      	bcc.n	8002254 <xQueueGenericSendFromISR+0x94>
 8002250:	2f02      	cmp	r7, #2
 8002252:	d1e6      	bne.n	8002222 <xQueueGenericSendFromISR+0x62>
			const int8_t cTxLock = pxQueue->cTxLock;
 8002254:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002258:	463a      	mov	r2, r7
			const int8_t cTxLock = pxQueue->cTxLock;
 800225a:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800225c:	4641      	mov	r1, r8
 800225e:	4620      	mov	r0, r4
 8002260:	f7ff fde9 	bl	8001e36 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8002264:	1c6b      	adds	r3, r5, #1
 8002266:	d1d7      	bne.n	8002218 <xQueueGenericSendFromISR+0x58>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002268:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800226a:	2b00      	cmp	r3, #0
 800226c:	d1c4      	bne.n	80021f8 <xQueueGenericSendFromISR+0x38>
			xReturn = pdPASS;
 800226e:	2001      	movs	r0, #1
 8002270:	e7ce      	b.n	8002210 <xQueueGenericSendFromISR+0x50>
	__asm volatile
 8002272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002276:	f383 8811 	msr	BASEPRI, r3
 800227a:	f3bf 8f6f 	isb	sy
 800227e:	f3bf 8f4f 	dsb	sy
 8002282:	e7fe      	b.n	8002282 <xQueueGenericSendFromISR+0xc2>

08002284 <xQueueReceive>:
{
 8002284:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002288:	b085      	sub	sp, #20
 800228a:	4688      	mov	r8, r1
 800228c:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800228e:	4604      	mov	r4, r0
 8002290:	b940      	cbnz	r0, 80022a4 <xQueueReceive+0x20>
 8002292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002296:	f383 8811 	msr	BASEPRI, r3
 800229a:	f3bf 8f6f 	isb	sy
 800229e:	f3bf 8f4f 	dsb	sy
 80022a2:	e7fe      	b.n	80022a2 <xQueueReceive+0x1e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80022a4:	2900      	cmp	r1, #0
 80022a6:	f040 8086 	bne.w	80023b6 <xQueueReceive+0x132>
 80022aa:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	f000 8082 	beq.w	80023b6 <xQueueReceive+0x132>
 80022b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022b6:	f383 8811 	msr	BASEPRI, r3
 80022ba:	f3bf 8f6f 	isb	sy
 80022be:	f3bf 8f4f 	dsb	sy
 80022c2:	e7fe      	b.n	80022c2 <xQueueReceive+0x3e>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80022c4:	9e01      	ldr	r6, [sp, #4]
 80022c6:	2e00      	cmp	r6, #0
 80022c8:	d07a      	beq.n	80023c0 <xQueueReceive+0x13c>
 80022ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022ce:	f383 8811 	msr	BASEPRI, r3
 80022d2:	f3bf 8f6f 	isb	sy
 80022d6:	f3bf 8f4f 	dsb	sy
 80022da:	e7fe      	b.n	80022da <xQueueReceive+0x56>
				if( xTicksToWait == ( TickType_t ) 0 )
 80022dc:	9d01      	ldr	r5, [sp, #4]
 80022de:	b91d      	cbnz	r5, 80022e8 <xQueueReceive+0x64>
					taskEXIT_CRITICAL();
 80022e0:	f7ff fb8a 	bl	80019f8 <vPortExitCritical>
				return errQUEUE_EMPTY;
 80022e4:	2000      	movs	r0, #0
 80022e6:	e052      	b.n	800238e <xQueueReceive+0x10a>
				else if( xEntryTimeSet == pdFALSE )
 80022e8:	b916      	cbnz	r6, 80022f0 <xQueueReceive+0x6c>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80022ea:	a802      	add	r0, sp, #8
 80022ec:	f000 fc9c 	bl	8002c28 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 80022f0:	f7ff fb82 	bl	80019f8 <vPortExitCritical>
		vTaskSuspendAll();
 80022f4:	f000 faae 	bl	8002854 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80022f8:	f7ff fb5c 	bl	80019b4 <vPortEnterCritical>
 80022fc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002300:	2bff      	cmp	r3, #255	; 0xff
 8002302:	bf08      	it	eq
 8002304:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 8002308:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800230c:	2bff      	cmp	r3, #255	; 0xff
 800230e:	bf08      	it	eq
 8002310:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 8002314:	f7ff fb70 	bl	80019f8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002318:	a901      	add	r1, sp, #4
 800231a:	a802      	add	r0, sp, #8
 800231c:	f000 fc90 	bl	8002c40 <xTaskCheckForTimeOut>
 8002320:	2800      	cmp	r0, #0
 8002322:	d13d      	bne.n	80023a0 <xQueueReceive+0x11c>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002324:	4620      	mov	r0, r4
 8002326:	f7ff fd7b 	bl	8001e20 <prvIsQueueEmpty>
 800232a:	b398      	cbz	r0, 8002394 <xQueueReceive+0x110>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800232c:	9901      	ldr	r1, [sp, #4]
 800232e:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002332:	f000 fc01 	bl	8002b38 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002336:	4620      	mov	r0, r4
 8002338:	f7ff fdc5 	bl	8001ec6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800233c:	f000 fb28 	bl	8002990 <xTaskResumeAll>
 8002340:	b938      	cbnz	r0, 8002352 <xQueueReceive+0xce>
					portYIELD_WITHIN_API();
 8002342:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002346:	f8c9 3000 	str.w	r3, [r9]
 800234a:	f3bf 8f4f 	dsb	sy
 800234e:	f3bf 8f6f 	isb	sy
 8002352:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8002354:	f7ff fb2e 	bl	80019b4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002358:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800235a:	2d00      	cmp	r5, #0
 800235c:	d0be      	beq.n	80022dc <xQueueReceive+0x58>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800235e:	4641      	mov	r1, r8
 8002360:	4620      	mov	r0, r4
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002362:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002364:	f7ff fd9a 	bl	8001e9c <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002368:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800236a:	6923      	ldr	r3, [r4, #16]
 800236c:	b163      	cbz	r3, 8002388 <xQueueReceive+0x104>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800236e:	f104 0010 	add.w	r0, r4, #16
 8002372:	f000 fc19 	bl	8002ba8 <xTaskRemoveFromEventList>
 8002376:	b138      	cbz	r0, 8002388 <xQueueReceive+0x104>
						queueYIELD_IF_USING_PREEMPTION();
 8002378:	4b13      	ldr	r3, [pc, #76]	; (80023c8 <xQueueReceive+0x144>)
 800237a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800237e:	601a      	str	r2, [r3, #0]
 8002380:	f3bf 8f4f 	dsb	sy
 8002384:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8002388:	f7ff fb36 	bl	80019f8 <vPortExitCritical>
				return pdPASS;
 800238c:	2001      	movs	r0, #1
}
 800238e:	b005      	add	sp, #20
 8002390:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				prvUnlockQueue( pxQueue );
 8002394:	4620      	mov	r0, r4
 8002396:	f7ff fd96 	bl	8001ec6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800239a:	f000 faf9 	bl	8002990 <xTaskResumeAll>
 800239e:	e7d8      	b.n	8002352 <xQueueReceive+0xce>
			prvUnlockQueue( pxQueue );
 80023a0:	4620      	mov	r0, r4
 80023a2:	f7ff fd90 	bl	8001ec6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80023a6:	f000 faf3 	bl	8002990 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80023aa:	4620      	mov	r0, r4
 80023ac:	f7ff fd38 	bl	8001e20 <prvIsQueueEmpty>
 80023b0:	2800      	cmp	r0, #0
 80023b2:	d0ce      	beq.n	8002352 <xQueueReceive+0xce>
 80023b4:	e796      	b.n	80022e4 <xQueueReceive+0x60>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80023b6:	f000 fc85 	bl	8002cc4 <xTaskGetSchedulerState>
 80023ba:	2800      	cmp	r0, #0
 80023bc:	d082      	beq.n	80022c4 <xQueueReceive+0x40>
 80023be:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 80023c0:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 80023c2:	f8df 9004 	ldr.w	r9, [pc, #4]	; 80023c8 <xQueueReceive+0x144>
 80023c6:	e7c5      	b.n	8002354 <xQueueReceive+0xd0>
 80023c8:	e000ed04 	.word	0xe000ed04

080023cc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80023cc:	b530      	push	{r4, r5, lr}

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80023ce:	4a07      	ldr	r2, [pc, #28]	; (80023ec <vQueueAddToRegistry+0x20>)
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80023d0:	2300      	movs	r3, #0
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80023d2:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 80023d6:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 80023da:	b91d      	cbnz	r5, 80023e4 <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80023dc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80023e0:	6060      	str	r0, [r4, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80023e2:	bd30      	pop	{r4, r5, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80023e4:	3301      	adds	r3, #1
 80023e6:	2b08      	cmp	r3, #8
 80023e8:	d1f3      	bne.n	80023d2 <vQueueAddToRegistry+0x6>
 80023ea:	bd30      	pop	{r4, r5, pc}
 80023ec:	20004934 	.word	0x20004934

080023f0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80023f0:	b570      	push	{r4, r5, r6, lr}
 80023f2:	4604      	mov	r4, r0
 80023f4:	460d      	mov	r5, r1
 80023f6:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80023f8:	f7ff fadc 	bl	80019b4 <vPortEnterCritical>
 80023fc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8002400:	2bff      	cmp	r3, #255	; 0xff
 8002402:	bf04      	itt	eq
 8002404:	2300      	moveq	r3, #0
 8002406:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
 800240a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800240e:	2bff      	cmp	r3, #255	; 0xff
 8002410:	bf04      	itt	eq
 8002412:	2300      	moveq	r3, #0
 8002414:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
 8002418:	f7ff faee 	bl	80019f8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800241c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800241e:	b92b      	cbnz	r3, 800242c <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002420:	4632      	mov	r2, r6
 8002422:	4629      	mov	r1, r5
 8002424:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8002428:	f000 fba0 	bl	8002b6c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800242c:	4620      	mov	r0, r4
	}
 800242e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 8002432:	f7ff bd48 	b.w	8001ec6 <prvUnlockQueue>
	...

08002438 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800243c:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800243e:	f7ff fab9 	bl	80019b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002442:	4b2e      	ldr	r3, [pc, #184]	; (80024fc <prvAddNewTaskToReadyList+0xc4>)
		if( pxCurrentTCB == NULL )
 8002444:	4d2e      	ldr	r5, [pc, #184]	; (8002500 <prvAddNewTaskToReadyList+0xc8>)
		uxCurrentNumberOfTasks++;
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	4f2e      	ldr	r7, [pc, #184]	; (8002504 <prvAddNewTaskToReadyList+0xcc>)
 800244a:	3201      	adds	r2, #1
 800244c:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800244e:	682e      	ldr	r6, [r5, #0]
 8002450:	2e00      	cmp	r6, #0
 8002452:	d147      	bne.n	80024e4 <prvAddNewTaskToReadyList+0xac>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002454:	602c      	str	r4, [r5, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	2b01      	cmp	r3, #1
 800245a:	d11d      	bne.n	8002498 <prvAddNewTaskToReadyList+0x60>
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800245c:	19b8      	adds	r0, r7, r6
 800245e:	3614      	adds	r6, #20
 8002460:	f7ff f9fe 	bl	8001860 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002464:	f5b6 6f8c 	cmp.w	r6, #1120	; 0x460
 8002468:	d1f8      	bne.n	800245c <prvAddNewTaskToReadyList+0x24>
	}

	vListInitialise( &xDelayedTaskList1 );
 800246a:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 8002530 <prvAddNewTaskToReadyList+0xf8>
	vListInitialise( &xDelayedTaskList2 );
 800246e:	4e26      	ldr	r6, [pc, #152]	; (8002508 <prvAddNewTaskToReadyList+0xd0>)
	vListInitialise( &xDelayedTaskList1 );
 8002470:	4640      	mov	r0, r8
 8002472:	f7ff f9f5 	bl	8001860 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002476:	4630      	mov	r0, r6
 8002478:	f7ff f9f2 	bl	8001860 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800247c:	4823      	ldr	r0, [pc, #140]	; (800250c <prvAddNewTaskToReadyList+0xd4>)
 800247e:	f7ff f9ef 	bl	8001860 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002482:	4823      	ldr	r0, [pc, #140]	; (8002510 <prvAddNewTaskToReadyList+0xd8>)
 8002484:	f7ff f9ec 	bl	8001860 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002488:	4822      	ldr	r0, [pc, #136]	; (8002514 <prvAddNewTaskToReadyList+0xdc>)
 800248a:	f7ff f9e9 	bl	8001860 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800248e:	4b22      	ldr	r3, [pc, #136]	; (8002518 <prvAddNewTaskToReadyList+0xe0>)
 8002490:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002494:	4b21      	ldr	r3, [pc, #132]	; (800251c <prvAddNewTaskToReadyList+0xe4>)
 8002496:	601e      	str	r6, [r3, #0]
		uxTaskNumber++;
 8002498:	4a21      	ldr	r2, [pc, #132]	; (8002520 <prvAddNewTaskToReadyList+0xe8>)
 800249a:	6813      	ldr	r3, [r2, #0]
 800249c:	3301      	adds	r3, #1
 800249e:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 80024a0:	4a20      	ldr	r2, [pc, #128]	; (8002524 <prvAddNewTaskToReadyList+0xec>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80024a2:	6463      	str	r3, [r4, #68]	; 0x44
		prvAddTaskToReadyList( pxNewTCB );
 80024a4:	6811      	ldr	r1, [r2, #0]
 80024a6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80024a8:	2014      	movs	r0, #20
 80024aa:	428b      	cmp	r3, r1
 80024ac:	fb00 7003 	mla	r0, r0, r3, r7
 80024b0:	f104 0104 	add.w	r1, r4, #4
 80024b4:	bf88      	it	hi
 80024b6:	6013      	strhi	r3, [r2, #0]
 80024b8:	f7ff f9e0 	bl	800187c <vListInsertEnd>
	taskEXIT_CRITICAL();
 80024bc:	f7ff fa9c 	bl	80019f8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80024c0:	4b19      	ldr	r3, [pc, #100]	; (8002528 <prvAddNewTaskToReadyList+0xf0>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	b163      	cbz	r3, 80024e0 <prvAddNewTaskToReadyList+0xa8>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80024c6:	682b      	ldr	r3, [r5, #0]
 80024c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024ca:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d207      	bcs.n	80024e0 <prvAddNewTaskToReadyList+0xa8>
			taskYIELD_IF_USING_PREEMPTION();
 80024d0:	4b16      	ldr	r3, [pc, #88]	; (800252c <prvAddNewTaskToReadyList+0xf4>)
 80024d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024d6:	601a      	str	r2, [r3, #0]
 80024d8:	f3bf 8f4f 	dsb	sy
 80024dc:	f3bf 8f6f 	isb	sy
 80024e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 80024e4:	4b10      	ldr	r3, [pc, #64]	; (8002528 <prvAddNewTaskToReadyList+0xf0>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d1d5      	bne.n	8002498 <prvAddNewTaskToReadyList+0x60>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80024ec:	682b      	ldr	r3, [r5, #0]
 80024ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024f0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80024f2:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 80024f4:	bf98      	it	ls
 80024f6:	602c      	strls	r4, [r5, #0]
 80024f8:	e7ce      	b.n	8002498 <prvAddNewTaskToReadyList+0x60>
 80024fa:	bf00      	nop
 80024fc:	20004774 	.word	0x20004774
 8002500:	20004308 	.word	0x20004308
 8002504:	20004314 	.word	0x20004314
 8002508:	200047a0 	.word	0x200047a0
 800250c:	200047bc 	.word	0x200047bc
 8002510:	200047e8 	.word	0x200047e8
 8002514:	200047d4 	.word	0x200047d4
 8002518:	2000430c 	.word	0x2000430c
 800251c:	20004310 	.word	0x20004310
 8002520:	20004784 	.word	0x20004784
 8002524:	20004788 	.word	0x20004788
 8002528:	200047d0 	.word	0x200047d0
 800252c:	e000ed04 	.word	0xe000ed04
 8002530:	2000478c 	.word	0x2000478c

08002534 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002534:	4a06      	ldr	r2, [pc, #24]	; (8002550 <prvResetNextTaskUnblockTime+0x1c>)
 8002536:	6813      	ldr	r3, [r2, #0]
 8002538:	6819      	ldr	r1, [r3, #0]
 800253a:	4b06      	ldr	r3, [pc, #24]	; (8002554 <prvResetNextTaskUnblockTime+0x20>)
 800253c:	b919      	cbnz	r1, 8002546 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800253e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002542:	601a      	str	r2, [r3, #0]
 8002544:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002546:	6812      	ldr	r2, [r2, #0]
 8002548:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800254a:	68d2      	ldr	r2, [r2, #12]
 800254c:	6852      	ldr	r2, [r2, #4]
 800254e:	e7f8      	b.n	8002542 <prvResetNextTaskUnblockTime+0xe>
 8002550:	2000430c 	.word	0x2000430c
 8002554:	200047b4 	.word	0x200047b4

08002558 <prvInitialiseNewTask.isra.2>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8002558:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800255c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800255e:	9e09      	ldr	r6, [sp, #36]	; 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002560:	ea4f 0982 	mov.w	r9, r2, lsl #2
 8002564:	464a      	mov	r2, r9
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8002566:	4607      	mov	r7, r0
 8002568:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800256a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800256c:	21a5      	movs	r1, #165	; 0xa5
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800256e:	4698      	mov	r8, r3
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002570:	f001 f869 	bl	8003646 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002574:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002576:	f1a9 0904 	sub.w	r9, r9, #4
 800257a:	4499      	add	r9, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800257c:	f029 0907 	bic.w	r9, r9, #7
	if( pcName != NULL )
 8002580:	b395      	cbz	r5, 80025e8 <prvInitialiseNewTask.isra.2+0x90>
 8002582:	1e6b      	subs	r3, r5, #1
 8002584:	f104 0234 	add.w	r2, r4, #52	; 0x34
 8002588:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800258a:	7859      	ldrb	r1, [r3, #1]
 800258c:	f802 1b01 	strb.w	r1, [r2], #1
			if( pcName[ x ] == ( char ) 0x00 )
 8002590:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8002594:	b109      	cbz	r1, 800259a <prvInitialiseNewTask.isra.2+0x42>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002596:	42ab      	cmp	r3, r5
 8002598:	d1f7      	bne.n	800258a <prvInitialiseNewTask.isra.2+0x32>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800259a:	2300      	movs	r3, #0
 800259c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80025a0:	9d08      	ldr	r5, [sp, #32]
 80025a2:	2d37      	cmp	r5, #55	; 0x37
 80025a4:	bf28      	it	cs
 80025a6:	2537      	movcs	r5, #55	; 0x37
		pxNewTCB->uxMutexesHeld = 0;
 80025a8:	f04f 0a00 	mov.w	sl, #0
	pxNewTCB->uxPriority = uxPriority;
 80025ac:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 80025ae:	64e5      	str	r5, [r4, #76]	; 0x4c
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80025b0:	1d20      	adds	r0, r4, #4
		pxNewTCB->uxMutexesHeld = 0;
 80025b2:	f8c4 a050 	str.w	sl, [r4, #80]	; 0x50
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80025b6:	f7ff f95e 	bl	8001876 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80025ba:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80025be:	f104 0018 	add.w	r0, r4, #24
 80025c2:	f7ff f958 	bl	8001876 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 80025c6:	f8c4 a054 	str.w	sl, [r4, #84]	; 0x54
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80025ca:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80025cc:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80025ce:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80025d0:	f884 a058 	strb.w	sl, [r4, #88]	; 0x58
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80025d4:	4642      	mov	r2, r8
 80025d6:	4639      	mov	r1, r7
 80025d8:	4648      	mov	r0, r9
 80025da:	f7ff f9c1 	bl	8001960 <pxPortInitialiseStack>
 80025de:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 80025e0:	b106      	cbz	r6, 80025e4 <prvInitialiseNewTask.isra.2+0x8c>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80025e2:	6034      	str	r4, [r6, #0]
 80025e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80025e8:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 80025ec:	e7d8      	b.n	80025a0 <prvInitialiseNewTask.isra.2+0x48>

080025ee <prvDeleteTCB>:
	{
 80025ee:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80025f0:	f890 3059 	ldrb.w	r3, [r0, #89]	; 0x59
	{
 80025f4:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80025f6:	b93b      	cbnz	r3, 8002608 <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 80025f8:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80025fa:	f7ff fbd9 	bl	8001db0 <vPortFree>
				vPortFree( pxTCB );
 80025fe:	4620      	mov	r0, r4
	}
 8002600:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8002604:	f7ff bbd4 	b.w	8001db0 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8002608:	2b01      	cmp	r3, #1
 800260a:	d0f9      	beq.n	8002600 <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800260c:	2b02      	cmp	r3, #2
 800260e:	d008      	beq.n	8002622 <prvDeleteTCB+0x34>
 8002610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002614:	f383 8811 	msr	BASEPRI, r3
 8002618:	f3bf 8f6f 	isb	sy
 800261c:	f3bf 8f4f 	dsb	sy
 8002620:	e7fe      	b.n	8002620 <prvDeleteTCB+0x32>
 8002622:	bd10      	pop	{r4, pc}

08002624 <prvIdleTask>:
{
 8002624:	b580      	push	{r7, lr}
				taskYIELD();
 8002626:	f8df 805c 	ldr.w	r8, [pc, #92]	; 8002684 <prvIdleTask+0x60>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800262a:	4f12      	ldr	r7, [pc, #72]	; (8002674 <prvIdleTask+0x50>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800262c:	4c12      	ldr	r4, [pc, #72]	; (8002678 <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 800262e:	4d13      	ldr	r5, [pc, #76]	; (800267c <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002630:	6823      	ldr	r3, [r4, #0]
 8002632:	b963      	cbnz	r3, 800264e <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002634:	4b12      	ldr	r3, [pc, #72]	; (8002680 <prvIdleTask+0x5c>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	2b01      	cmp	r3, #1
 800263a:	d9f8      	bls.n	800262e <prvIdleTask+0xa>
				taskYIELD();
 800263c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002640:	f8c8 3000 	str.w	r3, [r8]
 8002644:	f3bf 8f4f 	dsb	sy
 8002648:	f3bf 8f6f 	isb	sy
 800264c:	e7ee      	b.n	800262c <prvIdleTask+0x8>
			taskENTER_CRITICAL();
 800264e:	f7ff f9b1 	bl	80019b4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002656:	1d30      	adds	r0, r6, #4
 8002658:	f7ff f933 	bl	80018c2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800265c:	682b      	ldr	r3, [r5, #0]
 800265e:	3b01      	subs	r3, #1
 8002660:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002662:	6823      	ldr	r3, [r4, #0]
 8002664:	3b01      	subs	r3, #1
 8002666:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8002668:	f7ff f9c6 	bl	80019f8 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 800266c:	4630      	mov	r0, r6
 800266e:	f7ff ffbe 	bl	80025ee <prvDeleteTCB>
 8002672:	e7dd      	b.n	8002630 <prvIdleTask+0xc>
 8002674:	200047e8 	.word	0x200047e8
 8002678:	20004778 	.word	0x20004778
 800267c:	20004774 	.word	0x20004774
 8002680:	20004314 	.word	0x20004314
 8002684:	e000ed04 	.word	0xe000ed04

08002688 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800268a:	4b16      	ldr	r3, [pc, #88]	; (80026e4 <prvAddCurrentTaskToDelayedList+0x5c>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800268c:	4d16      	ldr	r5, [pc, #88]	; (80026e8 <prvAddCurrentTaskToDelayedList+0x60>)
const TickType_t xConstTickCount = xTickCount;
 800268e:	681e      	ldr	r6, [r3, #0]
{
 8002690:	4604      	mov	r4, r0
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002692:	6828      	ldr	r0, [r5, #0]
 8002694:	3004      	adds	r0, #4
{
 8002696:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002698:	f7ff f913 	bl	80018c2 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800269c:	1c63      	adds	r3, r4, #1
 800269e:	462b      	mov	r3, r5
 80026a0:	d107      	bne.n	80026b2 <prvAddCurrentTaskToDelayedList+0x2a>
 80026a2:	b137      	cbz	r7, 80026b2 <prvAddCurrentTaskToDelayedList+0x2a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80026a4:	6829      	ldr	r1, [r5, #0]
 80026a6:	4811      	ldr	r0, [pc, #68]	; (80026ec <prvAddCurrentTaskToDelayedList+0x64>)
 80026a8:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80026aa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80026ae:	f7ff b8e5 	b.w	800187c <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80026b2:	4434      	add	r4, r6
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80026b4:	681a      	ldr	r2, [r3, #0]
			if( xTimeToWake < xConstTickCount )
 80026b6:	42a6      	cmp	r6, r4
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80026b8:	6054      	str	r4, [r2, #4]
			if( xTimeToWake < xConstTickCount )
 80026ba:	d907      	bls.n	80026cc <prvAddCurrentTaskToDelayedList+0x44>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80026bc:	4a0c      	ldr	r2, [pc, #48]	; (80026f0 <prvAddCurrentTaskToDelayedList+0x68>)
 80026be:	6810      	ldr	r0, [r2, #0]
 80026c0:	6819      	ldr	r1, [r3, #0]
}
 80026c2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80026c6:	3104      	adds	r1, #4
 80026c8:	f7ff b8e4 	b.w	8001894 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80026cc:	4a09      	ldr	r2, [pc, #36]	; (80026f4 <prvAddCurrentTaskToDelayedList+0x6c>)
 80026ce:	6810      	ldr	r0, [r2, #0]
 80026d0:	6819      	ldr	r1, [r3, #0]
 80026d2:	3104      	adds	r1, #4
 80026d4:	f7ff f8de 	bl	8001894 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80026d8:	4b07      	ldr	r3, [pc, #28]	; (80026f8 <prvAddCurrentTaskToDelayedList+0x70>)
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	4294      	cmp	r4, r2
					xNextTaskUnblockTime = xTimeToWake;
 80026de:	bf38      	it	cc
 80026e0:	601c      	strcc	r4, [r3, #0]
 80026e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80026e4:	200047fc 	.word	0x200047fc
 80026e8:	20004308 	.word	0x20004308
 80026ec:	200047d4 	.word	0x200047d4
 80026f0:	20004310 	.word	0x20004310
 80026f4:	2000430c 	.word	0x2000430c
 80026f8:	200047b4 	.word	0x200047b4

080026fc <prvTaskIsTaskSuspended.part.0>:
 80026fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002700:	f383 8811 	msr	BASEPRI, r3
 8002704:	f3bf 8f6f 	isb	sy
 8002708:	f3bf 8f4f 	dsb	sy
 800270c:	e7fe      	b.n	800270c <prvTaskIsTaskSuspended.part.0+0x10>

0800270e <xTaskCreateStatic>:
	{
 800270e:	b570      	push	{r4, r5, r6, lr}
 8002710:	b086      	sub	sp, #24
 8002712:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8002714:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
 8002716:	b90d      	cbnz	r5, 800271c <xTaskCreateStatic+0xe>
 8002718:	f7ff fff0 	bl	80026fc <prvTaskIsTaskSuspended.part.0>
		configASSERT( pxTaskBuffer != NULL );
 800271c:	b944      	cbnz	r4, 8002730 <xTaskCreateStatic+0x22>
 800271e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002722:	f383 8811 	msr	BASEPRI, r3
 8002726:	f3bf 8f6f 	isb	sy
 800272a:	f3bf 8f4f 	dsb	sy
 800272e:	e7fe      	b.n	800272e <xTaskCreateStatic+0x20>
			volatile size_t xSize = sizeof( StaticTask_t );
 8002730:	265c      	movs	r6, #92	; 0x5c
 8002732:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002734:	9e05      	ldr	r6, [sp, #20]
 8002736:	2e5c      	cmp	r6, #92	; 0x5c
 8002738:	d008      	beq.n	800274c <xTaskCreateStatic+0x3e>
 800273a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800273e:	f383 8811 	msr	BASEPRI, r3
 8002742:	f3bf 8f6f 	isb	sy
 8002746:	f3bf 8f4f 	dsb	sy
 800274a:	e7fe      	b.n	800274a <xTaskCreateStatic+0x3c>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800274c:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800274e:	2502      	movs	r5, #2
 8002750:	f884 5059 	strb.w	r5, [r4, #89]	; 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002754:	ad04      	add	r5, sp, #16
 8002756:	9501      	str	r5, [sp, #4]
 8002758:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800275a:	9402      	str	r4, [sp, #8]
 800275c:	9500      	str	r5, [sp, #0]
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800275e:	9e05      	ldr	r6, [sp, #20]
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002760:	f7ff fefa 	bl	8002558 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002764:	4620      	mov	r0, r4
 8002766:	f7ff fe67 	bl	8002438 <prvAddNewTaskToReadyList>
	}
 800276a:	9804      	ldr	r0, [sp, #16]
 800276c:	b006      	add	sp, #24
 800276e:	bd70      	pop	{r4, r5, r6, pc}

08002770 <xTaskCreate>:
	{
 8002770:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002774:	4607      	mov	r7, r0
 8002776:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002778:	0090      	lsls	r0, r2, #2
	{
 800277a:	4688      	mov	r8, r1
 800277c:	4616      	mov	r6, r2
 800277e:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002780:	f7ff fa88 	bl	8001c94 <pvPortMalloc>
			if( pxStack != NULL )
 8002784:	4605      	mov	r5, r0
 8002786:	b1e8      	cbz	r0, 80027c4 <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002788:	205c      	movs	r0, #92	; 0x5c
 800278a:	f7ff fa83 	bl	8001c94 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800278e:	4604      	mov	r4, r0
 8002790:	b1a8      	cbz	r0, 80027be <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002792:	2300      	movs	r3, #0
 8002794:	f880 3059 	strb.w	r3, [r0, #89]	; 0x59
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002798:	9b0d      	ldr	r3, [sp, #52]	; 0x34
					pxNewTCB->pxStack = pxStack;
 800279a:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800279c:	9301      	str	r3, [sp, #4]
 800279e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80027a0:	9002      	str	r0, [sp, #8]
 80027a2:	9300      	str	r3, [sp, #0]
 80027a4:	4632      	mov	r2, r6
 80027a6:	464b      	mov	r3, r9
 80027a8:	4641      	mov	r1, r8
 80027aa:	4638      	mov	r0, r7
 80027ac:	f7ff fed4 	bl	8002558 <prvInitialiseNewTask.isra.2>
			prvAddNewTaskToReadyList( pxNewTCB );
 80027b0:	4620      	mov	r0, r4
 80027b2:	f7ff fe41 	bl	8002438 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80027b6:	2001      	movs	r0, #1
	}
 80027b8:	b005      	add	sp, #20
 80027ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 80027be:	4628      	mov	r0, r5
 80027c0:	f7ff faf6 	bl	8001db0 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80027c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
 80027c8:	e7f6      	b.n	80027b8 <xTaskCreate+0x48>
	...

080027cc <vTaskStartScheduler>:
{
 80027cc:	b510      	push	{r4, lr}
 80027ce:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80027d0:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80027d2:	aa07      	add	r2, sp, #28
 80027d4:	a906      	add	r1, sp, #24
 80027d6:	a805      	add	r0, sp, #20
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80027d8:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80027da:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80027dc:	f7ff f828 	bl	8001830 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80027e0:	9b05      	ldr	r3, [sp, #20]
 80027e2:	9302      	str	r3, [sp, #8]
 80027e4:	9b06      	ldr	r3, [sp, #24]
 80027e6:	9301      	str	r3, [sp, #4]
 80027e8:	9400      	str	r4, [sp, #0]
 80027ea:	4623      	mov	r3, r4
 80027ec:	9a07      	ldr	r2, [sp, #28]
 80027ee:	4914      	ldr	r1, [pc, #80]	; (8002840 <vTaskStartScheduler+0x74>)
 80027f0:	4814      	ldr	r0, [pc, #80]	; (8002844 <vTaskStartScheduler+0x78>)
 80027f2:	f7ff ff8c 	bl	800270e <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 80027f6:	b9a0      	cbnz	r0, 8002822 <vTaskStartScheduler+0x56>
}
 80027f8:	b008      	add	sp, #32
 80027fa:	bd10      	pop	{r4, pc}
 80027fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002800:	f383 8811 	msr	BASEPRI, r3
 8002804:	f3bf 8f6f 	isb	sy
 8002808:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 800280c:	4b0e      	ldr	r3, [pc, #56]	; (8002848 <vTaskStartScheduler+0x7c>)
 800280e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002812:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002814:	4b0d      	ldr	r3, [pc, #52]	; (800284c <vTaskStartScheduler+0x80>)
 8002816:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002818:	4b0d      	ldr	r3, [pc, #52]	; (8002850 <vTaskStartScheduler+0x84>)
 800281a:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 800281c:	f7ff f962 	bl	8001ae4 <xPortStartScheduler>
 8002820:	e7ea      	b.n	80027f8 <vTaskStartScheduler+0x2c>
			xReturn = xTimerCreateTimerTask();
 8002822:	f000 faf3 	bl	8002e0c <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8002826:	2801      	cmp	r0, #1
 8002828:	d0e8      	beq.n	80027fc <vTaskStartScheduler+0x30>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800282a:	3001      	adds	r0, #1
 800282c:	d1e4      	bne.n	80027f8 <vTaskStartScheduler+0x2c>
 800282e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002832:	f383 8811 	msr	BASEPRI, r3
 8002836:	f3bf 8f6f 	isb	sy
 800283a:	f3bf 8f4f 	dsb	sy
 800283e:	e7fe      	b.n	800283e <vTaskStartScheduler+0x72>
 8002840:	08003678 	.word	0x08003678
 8002844:	08002625 	.word	0x08002625
 8002848:	200047b4 	.word	0x200047b4
 800284c:	200047d0 	.word	0x200047d0
 8002850:	200047fc 	.word	0x200047fc

08002854 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8002854:	4a02      	ldr	r2, [pc, #8]	; (8002860 <vTaskSuspendAll+0xc>)
 8002856:	6813      	ldr	r3, [r2, #0]
 8002858:	3301      	adds	r3, #1
 800285a:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
 800285c:	4770      	bx	lr
 800285e:	bf00      	nop
 8002860:	20004780 	.word	0x20004780

08002864 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8002864:	4b01      	ldr	r3, [pc, #4]	; (800286c <xTaskGetTickCount+0x8>)
 8002866:	6818      	ldr	r0, [r3, #0]
}
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop
 800286c:	200047fc 	.word	0x200047fc

08002870 <xTaskIncrementTick>:
{
 8002870:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002874:	4b3b      	ldr	r3, [pc, #236]	; (8002964 <xTaskIncrementTick+0xf4>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d16b      	bne.n	8002954 <xTaskIncrementTick+0xe4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800287c:	4b3a      	ldr	r3, [pc, #232]	; (8002968 <xTaskIncrementTick+0xf8>)
 800287e:	681c      	ldr	r4, [r3, #0]
 8002880:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8002882:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002884:	b9bc      	cbnz	r4, 80028b6 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8002886:	4b39      	ldr	r3, [pc, #228]	; (800296c <xTaskIncrementTick+0xfc>)
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	6812      	ldr	r2, [r2, #0]
 800288c:	b142      	cbz	r2, 80028a0 <xTaskIncrementTick+0x30>
 800288e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002892:	f383 8811 	msr	BASEPRI, r3
 8002896:	f3bf 8f6f 	isb	sy
 800289a:	f3bf 8f4f 	dsb	sy
 800289e:	e7fe      	b.n	800289e <xTaskIncrementTick+0x2e>
 80028a0:	4a33      	ldr	r2, [pc, #204]	; (8002970 <xTaskIncrementTick+0x100>)
 80028a2:	6819      	ldr	r1, [r3, #0]
 80028a4:	6810      	ldr	r0, [r2, #0]
 80028a6:	6018      	str	r0, [r3, #0]
 80028a8:	6011      	str	r1, [r2, #0]
 80028aa:	4a32      	ldr	r2, [pc, #200]	; (8002974 <xTaskIncrementTick+0x104>)
 80028ac:	6813      	ldr	r3, [r2, #0]
 80028ae:	3301      	adds	r3, #1
 80028b0:	6013      	str	r3, [r2, #0]
 80028b2:	f7ff fe3f 	bl	8002534 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 80028b6:	4d30      	ldr	r5, [pc, #192]	; (8002978 <xTaskIncrementTick+0x108>)
 80028b8:	4f30      	ldr	r7, [pc, #192]	; (800297c <xTaskIncrementTick+0x10c>)
 80028ba:	682b      	ldr	r3, [r5, #0]
 80028bc:	429c      	cmp	r4, r3
 80028be:	f04f 0b00 	mov.w	fp, #0
 80028c2:	d30a      	bcc.n	80028da <xTaskIncrementTick+0x6a>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80028c4:	f8df 90a4 	ldr.w	r9, [pc, #164]	; 800296c <xTaskIncrementTick+0xfc>
					prvAddTaskToReadyList( pxTCB );
 80028c8:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 800298c <xTaskIncrementTick+0x11c>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80028cc:	f8d9 2000 	ldr.w	r2, [r9]
 80028d0:	6812      	ldr	r2, [r2, #0]
 80028d2:	b9a2      	cbnz	r2, 80028fe <xTaskIncrementTick+0x8e>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80028d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80028d8:	602a      	str	r2, [r5, #0]
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80028da:	683a      	ldr	r2, [r7, #0]
 80028dc:	4b28      	ldr	r3, [pc, #160]	; (8002980 <xTaskIncrementTick+0x110>)
 80028de:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80028e0:	2214      	movs	r2, #20
 80028e2:	434a      	muls	r2, r1
 80028e4:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 80028e6:	2a02      	cmp	r2, #2
 80028e8:	bf28      	it	cs
 80028ea:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 80028ee:	4a25      	ldr	r2, [pc, #148]	; (8002984 <xTaskIncrementTick+0x114>)
 80028f0:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 80028f2:	2a00      	cmp	r2, #0
}
 80028f4:	bf0c      	ite	eq
 80028f6:	4658      	moveq	r0, fp
 80028f8:	2001      	movne	r0, #1
 80028fa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80028fe:	f8d9 2000 	ldr.w	r2, [r9]
 8002902:	68d2      	ldr	r2, [r2, #12]
 8002904:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002906:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 8002908:	428c      	cmp	r4, r1
 800290a:	d201      	bcs.n	8002910 <xTaskIncrementTick+0xa0>
						xNextTaskUnblockTime = xItemValue;
 800290c:	6029      	str	r1, [r5, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800290e:	e7e4      	b.n	80028da <xTaskIncrementTick+0x6a>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002910:	f106 0804 	add.w	r8, r6, #4
 8002914:	4640      	mov	r0, r8
 8002916:	f7fe ffd4 	bl	80018c2 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800291a:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 800291c:	b119      	cbz	r1, 8002926 <xTaskIncrementTick+0xb6>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800291e:	f106 0018 	add.w	r0, r6, #24
 8002922:	f7fe ffce 	bl	80018c2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002926:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8002928:	f8da 1000 	ldr.w	r1, [sl]
 800292c:	4b14      	ldr	r3, [pc, #80]	; (8002980 <xTaskIncrementTick+0x110>)
 800292e:	4288      	cmp	r0, r1
 8002930:	f04f 0214 	mov.w	r2, #20
 8002934:	bf88      	it	hi
 8002936:	f8ca 0000 	strhi.w	r0, [sl]
 800293a:	4641      	mov	r1, r8
 800293c:	fb02 3000 	mla	r0, r2, r0, r3
 8002940:	f7fe ff9c 	bl	800187c <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002944:	6838      	ldr	r0, [r7, #0]
 8002946:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 8002948:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 800294a:	4291      	cmp	r1, r2
 800294c:	bf28      	it	cs
 800294e:	f04f 0b01 	movcs.w	fp, #1
 8002952:	e7bb      	b.n	80028cc <xTaskIncrementTick+0x5c>
		++uxPendedTicks;
 8002954:	4a0c      	ldr	r2, [pc, #48]	; (8002988 <xTaskIncrementTick+0x118>)
 8002956:	6813      	ldr	r3, [r2, #0]
 8002958:	3301      	adds	r3, #1
 800295a:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
 800295c:	f04f 0b00 	mov.w	fp, #0
 8002960:	e7c5      	b.n	80028ee <xTaskIncrementTick+0x7e>
 8002962:	bf00      	nop
 8002964:	20004780 	.word	0x20004780
 8002968:	200047fc 	.word	0x200047fc
 800296c:	2000430c 	.word	0x2000430c
 8002970:	20004310 	.word	0x20004310
 8002974:	200047b8 	.word	0x200047b8
 8002978:	200047b4 	.word	0x200047b4
 800297c:	20004308 	.word	0x20004308
 8002980:	20004314 	.word	0x20004314
 8002984:	20004800 	.word	0x20004800
 8002988:	2000477c 	.word	0x2000477c
 800298c:	20004788 	.word	0x20004788

08002990 <xTaskResumeAll>:
{
 8002990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
 8002994:	4c2f      	ldr	r4, [pc, #188]	; (8002a54 <xTaskResumeAll+0xc4>)
 8002996:	6823      	ldr	r3, [r4, #0]
 8002998:	b943      	cbnz	r3, 80029ac <xTaskResumeAll+0x1c>
 800299a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800299e:	f383 8811 	msr	BASEPRI, r3
 80029a2:	f3bf 8f6f 	isb	sy
 80029a6:	f3bf 8f4f 	dsb	sy
 80029aa:	e7fe      	b.n	80029aa <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 80029ac:	f7ff f802 	bl	80019b4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80029b0:	6823      	ldr	r3, [r4, #0]
 80029b2:	3b01      	subs	r3, #1
 80029b4:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80029b6:	6824      	ldr	r4, [r4, #0]
 80029b8:	b12c      	cbz	r4, 80029c6 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 80029ba:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80029bc:	f7ff f81c 	bl	80019f8 <vPortExitCritical>
}
 80029c0:	4620      	mov	r0, r4
 80029c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80029c6:	4b24      	ldr	r3, [pc, #144]	; (8002a58 <xTaskResumeAll+0xc8>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d0f5      	beq.n	80029ba <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80029ce:	4e23      	ldr	r6, [pc, #140]	; (8002a5c <xTaskResumeAll+0xcc>)
					prvAddTaskToReadyList( pxTCB );
 80029d0:	4f23      	ldr	r7, [pc, #140]	; (8002a60 <xTaskResumeAll+0xd0>)
 80029d2:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8002a74 <xTaskResumeAll+0xe4>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80029d6:	6833      	ldr	r3, [r6, #0]
 80029d8:	b9e3      	cbnz	r3, 8002a14 <xTaskResumeAll+0x84>
				if( pxTCB != NULL )
 80029da:	b10c      	cbz	r4, 80029e0 <xTaskResumeAll+0x50>
					prvResetNextTaskUnblockTime();
 80029dc:	f7ff fdaa 	bl	8002534 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80029e0:	4d20      	ldr	r5, [pc, #128]	; (8002a64 <xTaskResumeAll+0xd4>)
 80029e2:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80029e4:	b144      	cbz	r4, 80029f8 <xTaskResumeAll+0x68>
								xYieldPending = pdTRUE;
 80029e6:	4e20      	ldr	r6, [pc, #128]	; (8002a68 <xTaskResumeAll+0xd8>)
 80029e8:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 80029ea:	f7ff ff41 	bl	8002870 <xTaskIncrementTick>
 80029ee:	b100      	cbz	r0, 80029f2 <xTaskResumeAll+0x62>
								xYieldPending = pdTRUE;
 80029f0:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80029f2:	3c01      	subs	r4, #1
 80029f4:	d1f9      	bne.n	80029ea <xTaskResumeAll+0x5a>
						uxPendedTicks = 0;
 80029f6:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 80029f8:	4b1b      	ldr	r3, [pc, #108]	; (8002a68 <xTaskResumeAll+0xd8>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d0dc      	beq.n	80029ba <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8002a00:	4b1a      	ldr	r3, [pc, #104]	; (8002a6c <xTaskResumeAll+0xdc>)
 8002a02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a06:	601a      	str	r2, [r3, #0]
 8002a08:	f3bf 8f4f 	dsb	sy
 8002a0c:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8002a10:	2401      	movs	r4, #1
 8002a12:	e7d3      	b.n	80029bc <xTaskResumeAll+0x2c>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002a14:	68f3      	ldr	r3, [r6, #12]
 8002a16:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002a18:	1d25      	adds	r5, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002a1a:	f104 0018 	add.w	r0, r4, #24
 8002a1e:	f7fe ff50 	bl	80018c2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002a22:	4628      	mov	r0, r5
 8002a24:	f7fe ff4d 	bl	80018c2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002a28:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002a2a:	683a      	ldr	r2, [r7, #0]
 8002a2c:	2014      	movs	r0, #20
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	fb00 8003 	mla	r0, r0, r3, r8
 8002a34:	4629      	mov	r1, r5
 8002a36:	bf88      	it	hi
 8002a38:	603b      	strhi	r3, [r7, #0]
 8002a3a:	f7fe ff1f 	bl	800187c <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002a3e:	4b0c      	ldr	r3, [pc, #48]	; (8002a70 <xTaskResumeAll+0xe0>)
 8002a40:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a46:	429a      	cmp	r2, r3
						xYieldPending = pdTRUE;
 8002a48:	bf22      	ittt	cs
 8002a4a:	4b07      	ldrcs	r3, [pc, #28]	; (8002a68 <xTaskResumeAll+0xd8>)
 8002a4c:	2201      	movcs	r2, #1
 8002a4e:	601a      	strcs	r2, [r3, #0]
 8002a50:	e7c1      	b.n	80029d6 <xTaskResumeAll+0x46>
 8002a52:	bf00      	nop
 8002a54:	20004780 	.word	0x20004780
 8002a58:	20004774 	.word	0x20004774
 8002a5c:	200047bc 	.word	0x200047bc
 8002a60:	20004788 	.word	0x20004788
 8002a64:	2000477c 	.word	0x2000477c
 8002a68:	20004800 	.word	0x20004800
 8002a6c:	e000ed04 	.word	0xe000ed04
 8002a70:	20004308 	.word	0x20004308
 8002a74:	20004314 	.word	0x20004314

08002a78 <vTaskDelay>:
	{
 8002a78:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002a7a:	b940      	cbnz	r0, 8002a8e <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 8002a7c:	4b0e      	ldr	r3, [pc, #56]	; (8002ab8 <vTaskDelay+0x40>)
 8002a7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a82:	601a      	str	r2, [r3, #0]
 8002a84:	f3bf 8f4f 	dsb	sy
 8002a88:	f3bf 8f6f 	isb	sy
 8002a8c:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8002a8e:	4b0b      	ldr	r3, [pc, #44]	; (8002abc <vTaskDelay+0x44>)
 8002a90:	6819      	ldr	r1, [r3, #0]
 8002a92:	b141      	cbz	r1, 8002aa6 <vTaskDelay+0x2e>
 8002a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a98:	f383 8811 	msr	BASEPRI, r3
 8002a9c:	f3bf 8f6f 	isb	sy
 8002aa0:	f3bf 8f4f 	dsb	sy
 8002aa4:	e7fe      	b.n	8002aa4 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8002aa6:	f7ff fed5 	bl	8002854 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002aaa:	f7ff fded 	bl	8002688 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8002aae:	f7ff ff6f 	bl	8002990 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8002ab2:	2800      	cmp	r0, #0
 8002ab4:	d0e2      	beq.n	8002a7c <vTaskDelay+0x4>
 8002ab6:	bd08      	pop	{r3, pc}
 8002ab8:	e000ed04 	.word	0xe000ed04
 8002abc:	20004780 	.word	0x20004780

08002ac0 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002ac0:	4b18      	ldr	r3, [pc, #96]	; (8002b24 <vTaskSwitchContext+0x64>)
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	4b18      	ldr	r3, [pc, #96]	; (8002b28 <vTaskSwitchContext+0x68>)
{
 8002ac6:	b5f0      	push	{r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002ac8:	b112      	cbz	r2, 8002ad0 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8002aca:	2201      	movs	r2, #1
 8002acc:	601a      	str	r2, [r3, #0]
 8002ace:	bdf0      	pop	{r4, r5, r6, r7, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ad0:	4d16      	ldr	r5, [pc, #88]	; (8002b2c <vTaskSwitchContext+0x6c>)
		xYieldPending = pdFALSE;
 8002ad2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ad4:	4a16      	ldr	r2, [pc, #88]	; (8002b30 <vTaskSwitchContext+0x70>)
 8002ad6:	682b      	ldr	r3, [r5, #0]
 8002ad8:	2714      	movs	r7, #20
 8002ada:	4616      	mov	r6, r2
 8002adc:	fb07 f103 	mul.w	r1, r7, r3
 8002ae0:	1850      	adds	r0, r2, r1
 8002ae2:	5854      	ldr	r4, [r2, r1]
 8002ae4:	b18c      	cbz	r4, 8002b0a <vTaskSwitchContext+0x4a>
 8002ae6:	6844      	ldr	r4, [r0, #4]
 8002ae8:	3108      	adds	r1, #8
 8002aea:	6864      	ldr	r4, [r4, #4]
 8002aec:	6044      	str	r4, [r0, #4]
 8002aee:	440a      	add	r2, r1
 8002af0:	4294      	cmp	r4, r2
 8002af2:	bf04      	itt	eq
 8002af4:	6862      	ldreq	r2, [r4, #4]
 8002af6:	6042      	streq	r2, [r0, #4]
 8002af8:	2214      	movs	r2, #20
 8002afa:	fb02 6203 	mla	r2, r2, r3, r6
 8002afe:	6852      	ldr	r2, [r2, #4]
 8002b00:	68d1      	ldr	r1, [r2, #12]
 8002b02:	4a0c      	ldr	r2, [pc, #48]	; (8002b34 <vTaskSwitchContext+0x74>)
 8002b04:	6011      	str	r1, [r2, #0]
 8002b06:	602b      	str	r3, [r5, #0]
 8002b08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b0a:	b943      	cbnz	r3, 8002b1e <vTaskSwitchContext+0x5e>
 8002b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b10:	f383 8811 	msr	BASEPRI, r3
 8002b14:	f3bf 8f6f 	isb	sy
 8002b18:	f3bf 8f4f 	dsb	sy
 8002b1c:	e7fe      	b.n	8002b1c <vTaskSwitchContext+0x5c>
 8002b1e:	3b01      	subs	r3, #1
 8002b20:	e7dc      	b.n	8002adc <vTaskSwitchContext+0x1c>
 8002b22:	bf00      	nop
 8002b24:	20004780 	.word	0x20004780
 8002b28:	20004800 	.word	0x20004800
 8002b2c:	20004788 	.word	0x20004788
 8002b30:	20004314 	.word	0x20004314
 8002b34:	20004308 	.word	0x20004308

08002b38 <vTaskPlaceOnEventList>:
{
 8002b38:	b510      	push	{r4, lr}
 8002b3a:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8002b3c:	b940      	cbnz	r0, 8002b50 <vTaskPlaceOnEventList+0x18>
 8002b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b42:	f383 8811 	msr	BASEPRI, r3
 8002b46:	f3bf 8f6f 	isb	sy
 8002b4a:	f3bf 8f4f 	dsb	sy
 8002b4e:	e7fe      	b.n	8002b4e <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002b50:	4b05      	ldr	r3, [pc, #20]	; (8002b68 <vTaskPlaceOnEventList+0x30>)
 8002b52:	6819      	ldr	r1, [r3, #0]
 8002b54:	3118      	adds	r1, #24
 8002b56:	f7fe fe9d 	bl	8001894 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002b5a:	4620      	mov	r0, r4
 8002b5c:	2101      	movs	r1, #1
}
 8002b5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002b62:	f7ff bd91 	b.w	8002688 <prvAddCurrentTaskToDelayedList>
 8002b66:	bf00      	nop
 8002b68:	20004308 	.word	0x20004308

08002b6c <vTaskPlaceOnEventListRestricted>:
	{
 8002b6c:	b538      	push	{r3, r4, r5, lr}
 8002b6e:	460d      	mov	r5, r1
 8002b70:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 8002b72:	b940      	cbnz	r0, 8002b86 <vTaskPlaceOnEventListRestricted+0x1a>
 8002b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b78:	f383 8811 	msr	BASEPRI, r3
 8002b7c:	f3bf 8f6f 	isb	sy
 8002b80:	f3bf 8f4f 	dsb	sy
 8002b84:	e7fe      	b.n	8002b84 <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002b86:	4b07      	ldr	r3, [pc, #28]	; (8002ba4 <vTaskPlaceOnEventListRestricted+0x38>)
 8002b88:	6819      	ldr	r1, [r3, #0]
 8002b8a:	3118      	adds	r1, #24
 8002b8c:	f7fe fe76 	bl	800187c <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 8002b90:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002b92:	4621      	mov	r1, r4
 8002b94:	bf0c      	ite	eq
 8002b96:	4628      	moveq	r0, r5
 8002b98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
	}
 8002b9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002ba0:	f7ff bd72 	b.w	8002688 <prvAddCurrentTaskToDelayedList>
 8002ba4:	20004308 	.word	0x20004308

08002ba8 <xTaskRemoveFromEventList>:
{
 8002ba8:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002baa:	68c3      	ldr	r3, [r0, #12]
 8002bac:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8002bae:	b944      	cbnz	r4, 8002bc2 <xTaskRemoveFromEventList+0x1a>
 8002bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bb4:	f383 8811 	msr	BASEPRI, r3
 8002bb8:	f3bf 8f6f 	isb	sy
 8002bbc:	f3bf 8f4f 	dsb	sy
 8002bc0:	e7fe      	b.n	8002bc0 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002bc2:	f104 0518 	add.w	r5, r4, #24
 8002bc6:	4628      	mov	r0, r5
 8002bc8:	f7fe fe7b 	bl	80018c2 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002bcc:	4b10      	ldr	r3, [pc, #64]	; (8002c10 <xTaskRemoveFromEventList+0x68>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	b9db      	cbnz	r3, 8002c0a <xTaskRemoveFromEventList+0x62>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002bd2:	1d25      	adds	r5, r4, #4
 8002bd4:	4628      	mov	r0, r5
 8002bd6:	f7fe fe74 	bl	80018c2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002bda:	4a0e      	ldr	r2, [pc, #56]	; (8002c14 <xTaskRemoveFromEventList+0x6c>)
 8002bdc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002bde:	6811      	ldr	r1, [r2, #0]
 8002be0:	428b      	cmp	r3, r1
 8002be2:	bf88      	it	hi
 8002be4:	6013      	strhi	r3, [r2, #0]
 8002be6:	4a0c      	ldr	r2, [pc, #48]	; (8002c18 <xTaskRemoveFromEventList+0x70>)
 8002be8:	2014      	movs	r0, #20
 8002bea:	4629      	mov	r1, r5
 8002bec:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002bf0:	f7fe fe44 	bl	800187c <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002bf4:	4b09      	ldr	r3, [pc, #36]	; (8002c1c <xTaskRemoveFromEventList+0x74>)
 8002bf6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bfc:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 8002bfe:	bf83      	ittte	hi
 8002c00:	4b07      	ldrhi	r3, [pc, #28]	; (8002c20 <xTaskRemoveFromEventList+0x78>)
 8002c02:	2001      	movhi	r0, #1
 8002c04:	6018      	strhi	r0, [r3, #0]
		xReturn = pdFALSE;
 8002c06:	2000      	movls	r0, #0
}
 8002c08:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002c0a:	4629      	mov	r1, r5
 8002c0c:	4805      	ldr	r0, [pc, #20]	; (8002c24 <xTaskRemoveFromEventList+0x7c>)
 8002c0e:	e7ef      	b.n	8002bf0 <xTaskRemoveFromEventList+0x48>
 8002c10:	20004780 	.word	0x20004780
 8002c14:	20004788 	.word	0x20004788
 8002c18:	20004314 	.word	0x20004314
 8002c1c:	20004308 	.word	0x20004308
 8002c20:	20004800 	.word	0x20004800
 8002c24:	200047bc 	.word	0x200047bc

08002c28 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002c28:	4b03      	ldr	r3, [pc, #12]	; (8002c38 <vTaskInternalSetTimeOutState+0x10>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002c2e:	4b03      	ldr	r3, [pc, #12]	; (8002c3c <vTaskInternalSetTimeOutState+0x14>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	6043      	str	r3, [r0, #4]
 8002c34:	4770      	bx	lr
 8002c36:	bf00      	nop
 8002c38:	200047b8 	.word	0x200047b8
 8002c3c:	200047fc 	.word	0x200047fc

08002c40 <xTaskCheckForTimeOut>:
{
 8002c40:	b570      	push	{r4, r5, r6, lr}
 8002c42:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 8002c44:	4605      	mov	r5, r0
 8002c46:	b940      	cbnz	r0, 8002c5a <xTaskCheckForTimeOut+0x1a>
 8002c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c4c:	f383 8811 	msr	BASEPRI, r3
 8002c50:	f3bf 8f6f 	isb	sy
 8002c54:	f3bf 8f4f 	dsb	sy
 8002c58:	e7fe      	b.n	8002c58 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 8002c5a:	b941      	cbnz	r1, 8002c6e <xTaskCheckForTimeOut+0x2e>
 8002c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c60:	f383 8811 	msr	BASEPRI, r3
 8002c64:	f3bf 8f6f 	isb	sy
 8002c68:	f3bf 8f4f 	dsb	sy
 8002c6c:	e7fe      	b.n	8002c6c <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 8002c6e:	f7fe fea1 	bl	80019b4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8002c72:	4b0f      	ldr	r3, [pc, #60]	; (8002cb0 <xTaskCheckForTimeOut+0x70>)
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002c74:	6869      	ldr	r1, [r5, #4]
		const TickType_t xConstTickCount = xTickCount;
 8002c76:	681a      	ldr	r2, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8002c78:	6823      	ldr	r3, [r4, #0]
 8002c7a:	1c58      	adds	r0, r3, #1
 8002c7c:	d00e      	beq.n	8002c9c <xTaskCheckForTimeOut+0x5c>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002c7e:	480d      	ldr	r0, [pc, #52]	; (8002cb4 <xTaskCheckForTimeOut+0x74>)
 8002c80:	682e      	ldr	r6, [r5, #0]
 8002c82:	6800      	ldr	r0, [r0, #0]
 8002c84:	4286      	cmp	r6, r0
 8002c86:	d001      	beq.n	8002c8c <xTaskCheckForTimeOut+0x4c>
 8002c88:	428a      	cmp	r2, r1
 8002c8a:	d20e      	bcs.n	8002caa <xTaskCheckForTimeOut+0x6a>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002c8c:	1a52      	subs	r2, r2, r1
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d209      	bcs.n	8002ca6 <xTaskCheckForTimeOut+0x66>
			*pxTicksToWait -= xElapsedTime;
 8002c92:	1a9b      	subs	r3, r3, r2
 8002c94:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8002c96:	4628      	mov	r0, r5
 8002c98:	f7ff ffc6 	bl	8002c28 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 8002c9c:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8002c9e:	f7fe feab 	bl	80019f8 <vPortExitCritical>
}
 8002ca2:	4620      	mov	r0, r4
 8002ca4:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8002caa:	2401      	movs	r4, #1
 8002cac:	e7f7      	b.n	8002c9e <xTaskCheckForTimeOut+0x5e>
 8002cae:	bf00      	nop
 8002cb0:	200047fc 	.word	0x200047fc
 8002cb4:	200047b8 	.word	0x200047b8

08002cb8 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8002cb8:	4b01      	ldr	r3, [pc, #4]	; (8002cc0 <vTaskMissedYield+0x8>)
 8002cba:	2201      	movs	r2, #1
 8002cbc:	601a      	str	r2, [r3, #0]
 8002cbe:	4770      	bx	lr
 8002cc0:	20004800 	.word	0x20004800

08002cc4 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8002cc4:	4b05      	ldr	r3, [pc, #20]	; (8002cdc <xTaskGetSchedulerState+0x18>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	b133      	cbz	r3, 8002cd8 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002cca:	4b05      	ldr	r3, [pc, #20]	; (8002ce0 <xTaskGetSchedulerState+0x1c>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 8002cd0:	bf0c      	ite	eq
 8002cd2:	2002      	moveq	r0, #2
 8002cd4:	2000      	movne	r0, #0
 8002cd6:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002cd8:	2001      	movs	r0, #1
	}
 8002cda:	4770      	bx	lr
 8002cdc:	200047d0 	.word	0x200047d0
 8002ce0:	20004780 	.word	0x20004780

08002ce4 <xTaskPriorityDisinherit>:
	{
 8002ce4:	b538      	push	{r3, r4, r5, lr}
		if( pxMutexHolder != NULL )
 8002ce6:	4604      	mov	r4, r0
 8002ce8:	b908      	cbnz	r0, 8002cee <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 8002cea:	2000      	movs	r0, #0
 8002cec:	bd38      	pop	{r3, r4, r5, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8002cee:	4b1b      	ldr	r3, [pc, #108]	; (8002d5c <xTaskPriorityDisinherit+0x78>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4298      	cmp	r0, r3
 8002cf4:	d008      	beq.n	8002d08 <xTaskPriorityDisinherit+0x24>
 8002cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cfa:	f383 8811 	msr	BASEPRI, r3
 8002cfe:	f3bf 8f6f 	isb	sy
 8002d02:	f3bf 8f4f 	dsb	sy
 8002d06:	e7fe      	b.n	8002d06 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8002d08:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8002d0a:	b943      	cbnz	r3, 8002d1e <xTaskPriorityDisinherit+0x3a>
 8002d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d10:	f383 8811 	msr	BASEPRI, r3
 8002d14:	f3bf 8f6f 	isb	sy
 8002d18:	f3bf 8f4f 	dsb	sy
 8002d1c:	e7fe      	b.n	8002d1c <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002d1e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8002d20:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
			( pxTCB->uxMutexesHeld )--;
 8002d22:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002d24:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 8002d26:	6503      	str	r3, [r0, #80]	; 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002d28:	d0df      	beq.n	8002cea <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d1dd      	bne.n	8002cea <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002d2e:	1d05      	adds	r5, r0, #4
 8002d30:	4628      	mov	r0, r5
 8002d32:	f7fe fdc6 	bl	80018c2 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002d36:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002d38:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d3a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002d3e:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8002d40:	4a07      	ldr	r2, [pc, #28]	; (8002d60 <xTaskPriorityDisinherit+0x7c>)
 8002d42:	6811      	ldr	r1, [r2, #0]
 8002d44:	428b      	cmp	r3, r1
 8002d46:	bf88      	it	hi
 8002d48:	6013      	strhi	r3, [r2, #0]
 8002d4a:	4a06      	ldr	r2, [pc, #24]	; (8002d64 <xTaskPriorityDisinherit+0x80>)
 8002d4c:	2014      	movs	r0, #20
 8002d4e:	fb00 2003 	mla	r0, r0, r3, r2
 8002d52:	4629      	mov	r1, r5
 8002d54:	f7fe fd92 	bl	800187c <vListInsertEnd>
					xReturn = pdTRUE;
 8002d58:	2001      	movs	r0, #1
	}
 8002d5a:	bd38      	pop	{r3, r4, r5, pc}
 8002d5c:	20004308 	.word	0x20004308
 8002d60:	20004788 	.word	0x20004788
 8002d64:	20004314 	.word	0x20004314

08002d68 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8002d68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 8002d6a:	4c11      	ldr	r4, [pc, #68]	; (8002db0 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 8002d6c:	f7fe fe22 	bl	80019b4 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8002d70:	6825      	ldr	r5, [r4, #0]
 8002d72:	b9bd      	cbnz	r5, 8002da4 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 8002d74:	4f0f      	ldr	r7, [pc, #60]	; (8002db4 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 8002d76:	4e10      	ldr	r6, [pc, #64]	; (8002db8 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 8002d78:	4638      	mov	r0, r7
 8002d7a:	f7fe fd71 	bl	8001860 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8002d7e:	4630      	mov	r0, r6
 8002d80:	f7fe fd6e 	bl	8001860 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8002d84:	4b0d      	ldr	r3, [pc, #52]	; (8002dbc <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8002d86:	4a0e      	ldr	r2, [pc, #56]	; (8002dc0 <prvCheckForValidListAndQueue+0x58>)
			pxCurrentTimerList = &xActiveTimerList1;
 8002d88:	601f      	str	r7, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8002d8a:	4b0e      	ldr	r3, [pc, #56]	; (8002dc4 <prvCheckForValidListAndQueue+0x5c>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8002d8c:	2110      	movs	r1, #16
			pxOverflowTimerList = &xActiveTimerList2;
 8002d8e:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8002d90:	200a      	movs	r0, #10
 8002d92:	9500      	str	r5, [sp, #0]
 8002d94:	4b0c      	ldr	r3, [pc, #48]	; (8002dc8 <prvCheckForValidListAndQueue+0x60>)
 8002d96:	f7ff f90f 	bl	8001fb8 <xQueueGenericCreateStatic>
 8002d9a:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8002d9c:	b110      	cbz	r0, 8002da4 <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002d9e:	490b      	ldr	r1, [pc, #44]	; (8002dcc <prvCheckForValidListAndQueue+0x64>)
 8002da0:	f7ff fb14 	bl	80023cc <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 8002da4:	b003      	add	sp, #12
 8002da6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 8002daa:	f7fe be25 	b.w	80019f8 <vPortExitCritical>
 8002dae:	bf00      	nop
 8002db0:	20004928 	.word	0x20004928
 8002db4:	200048ac 	.word	0x200048ac
 8002db8:	200048c0 	.word	0x200048c0
 8002dbc:	20004804 	.word	0x20004804
 8002dc0:	2000480c 	.word	0x2000480c
 8002dc4:	20004808 	.word	0x20004808
 8002dc8:	200048d8 	.word	0x200048d8
 8002dcc:	0800367d 	.word	0x0800367d

08002dd0 <prvInsertTimerInActiveList>:
	if( xNextExpiryTime <= xTimeNow )
 8002dd0:	4291      	cmp	r1, r2
{
 8002dd2:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8002dd4:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002dd6:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 8002dd8:	d80a      	bhi.n	8002df0 <prvInsertTimerInActiveList+0x20>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002dda:	1ad2      	subs	r2, r2, r3
 8002ddc:	6983      	ldr	r3, [r0, #24]
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d20d      	bcs.n	8002dfe <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8002de2:	4b08      	ldr	r3, [pc, #32]	; (8002e04 <prvInsertTimerInActiveList+0x34>)
 8002de4:	1d01      	adds	r1, r0, #4
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002de6:	6818      	ldr	r0, [r3, #0]
 8002de8:	f7fe fd54 	bl	8001894 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8002dec:	2000      	movs	r0, #0
 8002dee:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d201      	bcs.n	8002df8 <prvInsertTimerInActiveList+0x28>
 8002df4:	4299      	cmp	r1, r3
 8002df6:	d202      	bcs.n	8002dfe <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002df8:	1d01      	adds	r1, r0, #4
 8002dfa:	4b03      	ldr	r3, [pc, #12]	; (8002e08 <prvInsertTimerInActiveList+0x38>)
 8002dfc:	e7f3      	b.n	8002de6 <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 8002dfe:	2001      	movs	r0, #1
}
 8002e00:	bd08      	pop	{r3, pc}
 8002e02:	bf00      	nop
 8002e04:	20004808 	.word	0x20004808
 8002e08:	20004804 	.word	0x20004804

08002e0c <xTimerCreateTimerTask>:
{
 8002e0c:	b510      	push	{r4, lr}
 8002e0e:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8002e10:	f7ff ffaa 	bl	8002d68 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8002e14:	4b13      	ldr	r3, [pc, #76]	; (8002e64 <xTimerCreateTimerTask+0x58>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	b943      	cbnz	r3, 8002e2c <xTimerCreateTimerTask+0x20>
 8002e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e1e:	f383 8811 	msr	BASEPRI, r3
 8002e22:	f3bf 8f6f 	isb	sy
 8002e26:	f3bf 8f4f 	dsb	sy
 8002e2a:	e7fe      	b.n	8002e2a <xTimerCreateTimerTask+0x1e>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8002e2c:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8002e2e:	aa07      	add	r2, sp, #28
 8002e30:	a906      	add	r1, sp, #24
 8002e32:	a805      	add	r0, sp, #20
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8002e34:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8002e36:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8002e38:	f7fe fd06 	bl	8001848 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8002e3c:	9b05      	ldr	r3, [sp, #20]
 8002e3e:	9302      	str	r3, [sp, #8]
 8002e40:	9b06      	ldr	r3, [sp, #24]
 8002e42:	9301      	str	r3, [sp, #4]
 8002e44:	2302      	movs	r3, #2
 8002e46:	9300      	str	r3, [sp, #0]
 8002e48:	9a07      	ldr	r2, [sp, #28]
 8002e4a:	4907      	ldr	r1, [pc, #28]	; (8002e68 <xTimerCreateTimerTask+0x5c>)
 8002e4c:	4807      	ldr	r0, [pc, #28]	; (8002e6c <xTimerCreateTimerTask+0x60>)
 8002e4e:	4623      	mov	r3, r4
 8002e50:	f7ff fc5d 	bl	800270e <xTaskCreateStatic>
 8002e54:	4b06      	ldr	r3, [pc, #24]	; (8002e70 <xTimerCreateTimerTask+0x64>)
 8002e56:	6018      	str	r0, [r3, #0]
	configASSERT( xReturn );
 8002e58:	2800      	cmp	r0, #0
 8002e5a:	d0de      	beq.n	8002e1a <xTimerCreateTimerTask+0xe>
}
 8002e5c:	2001      	movs	r0, #1
 8002e5e:	b008      	add	sp, #32
 8002e60:	bd10      	pop	{r4, pc}
 8002e62:	bf00      	nop
 8002e64:	20004928 	.word	0x20004928
 8002e68:	08003682 	.word	0x08003682
 8002e6c:	08002f4d 	.word	0x08002f4d
 8002e70:	2000492c 	.word	0x2000492c

08002e74 <xTimerGenericCommand>:
{
 8002e74:	b530      	push	{r4, r5, lr}
 8002e76:	4615      	mov	r5, r2
 8002e78:	b085      	sub	sp, #20
 8002e7a:	461a      	mov	r2, r3
	configASSERT( xTimer );
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	b940      	cbnz	r0, 8002e92 <xTimerGenericCommand+0x1e>
 8002e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e84:	f383 8811 	msr	BASEPRI, r3
 8002e88:	f3bf 8f6f 	isb	sy
 8002e8c:	f3bf 8f4f 	dsb	sy
 8002e90:	e7fe      	b.n	8002e90 <xTimerGenericCommand+0x1c>
	if( xTimerQueue != NULL )
 8002e92:	4c0d      	ldr	r4, [pc, #52]	; (8002ec8 <xTimerGenericCommand+0x54>)
 8002e94:	6820      	ldr	r0, [r4, #0]
 8002e96:	b180      	cbz	r0, 8002eba <xTimerGenericCommand+0x46>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8002e98:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8002e9a:	e88d 0022 	stmia.w	sp, {r1, r5}
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8002e9e:	9302      	str	r3, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8002ea0:	dc0d      	bgt.n	8002ebe <xTimerGenericCommand+0x4a>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002ea2:	f7ff ff0f 	bl	8002cc4 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8002ea6:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002ea8:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8002eaa:	bf08      	it	eq
 8002eac:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8002eae:	6820      	ldr	r0, [r4, #0]
 8002eb0:	bf18      	it	ne
 8002eb2:	461a      	movne	r2, r3
 8002eb4:	4669      	mov	r1, sp
 8002eb6:	f7ff f8cd 	bl	8002054 <xQueueGenericSend>
}
 8002eba:	b005      	add	sp, #20
 8002ebc:	bd30      	pop	{r4, r5, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	4669      	mov	r1, sp
 8002ec2:	f7ff f97d 	bl	80021c0 <xQueueGenericSendFromISR>
 8002ec6:	e7f8      	b.n	8002eba <xTimerGenericCommand+0x46>
 8002ec8:	20004928 	.word	0x20004928

08002ecc <prvSwitchTimerLists>:
{
 8002ecc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002ed0:	4d1c      	ldr	r5, [pc, #112]	; (8002f44 <prvSwitchTimerLists+0x78>)
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002ed2:	f04f 0800 	mov.w	r8, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8002ed6:	682b      	ldr	r3, [r5, #0]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	b932      	cbnz	r2, 8002eea <prvSwitchTimerLists+0x1e>
	pxCurrentTimerList = pxOverflowTimerList;
 8002edc:	4a1a      	ldr	r2, [pc, #104]	; (8002f48 <prvSwitchTimerLists+0x7c>)
 8002ede:	6811      	ldr	r1, [r2, #0]
 8002ee0:	6029      	str	r1, [r5, #0]
	pxOverflowTimerList = pxTemp;
 8002ee2:	6013      	str	r3, [r2, #0]
}
 8002ee4:	b002      	add	sp, #8
 8002ee6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002eea:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002eec:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8002eee:	681e      	ldr	r6, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002ef0:	1d27      	adds	r7, r4, #4
 8002ef2:	4638      	mov	r0, r7
 8002ef4:	f7fe fce5 	bl	80018c2 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002ef8:	6a23      	ldr	r3, [r4, #32]
 8002efa:	4620      	mov	r0, r4
 8002efc:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002efe:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8002f02:	075b      	lsls	r3, r3, #29
 8002f04:	d5e7      	bpl.n	8002ed6 <prvSwitchTimerLists+0xa>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8002f06:	69a3      	ldr	r3, [r4, #24]
 8002f08:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 8002f0a:	429e      	cmp	r6, r3
 8002f0c:	d206      	bcs.n	8002f1c <prvSwitchTimerLists+0x50>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8002f0e:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002f10:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002f12:	4639      	mov	r1, r7
 8002f14:	6828      	ldr	r0, [r5, #0]
 8002f16:	f7fe fcbd 	bl	8001894 <vListInsert>
 8002f1a:	e7dc      	b.n	8002ed6 <prvSwitchTimerLists+0xa>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	f8cd 8000 	str.w	r8, [sp]
 8002f22:	4632      	mov	r2, r6
 8002f24:	4619      	mov	r1, r3
 8002f26:	4620      	mov	r0, r4
 8002f28:	f7ff ffa4 	bl	8002e74 <xTimerGenericCommand>
				configASSERT( xResult );
 8002f2c:	2800      	cmp	r0, #0
 8002f2e:	d1d2      	bne.n	8002ed6 <prvSwitchTimerLists+0xa>
 8002f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f34:	f383 8811 	msr	BASEPRI, r3
 8002f38:	f3bf 8f6f 	isb	sy
 8002f3c:	f3bf 8f4f 	dsb	sy
 8002f40:	e7fe      	b.n	8002f40 <prvSwitchTimerLists+0x74>
 8002f42:	bf00      	nop
 8002f44:	20004804 	.word	0x20004804
 8002f48:	20004808 	.word	0x20004808

08002f4c <prvTimerTask>:
{
 8002f4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002f50:	4d7d      	ldr	r5, [pc, #500]	; (8003148 <prvTimerTask+0x1fc>)
					portYIELD_WITHIN_API();
 8002f52:	f8df 8200 	ldr.w	r8, [pc, #512]	; 8003154 <prvTimerTask+0x208>
{
 8002f56:	b087      	sub	sp, #28
 8002f58:	462f      	mov	r7, r5
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8002f5a:	682b      	ldr	r3, [r5, #0]
 8002f5c:	681c      	ldr	r4, [r3, #0]
 8002f5e:	2c00      	cmp	r4, #0
 8002f60:	f040 80ed 	bne.w	800313e <prvTimerTask+0x1f2>
 8002f64:	f04f 0a01 	mov.w	sl, #1
	if( xTimeNow < xLastTime )
 8002f68:	f8df b1ec 	ldr.w	fp, [pc, #492]	; 8003158 <prvTimerTask+0x20c>
	vTaskSuspendAll();
 8002f6c:	f7ff fc72 	bl	8002854 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 8002f70:	f7ff fc78 	bl	8002864 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8002f74:	f8db 3000 	ldr.w	r3, [fp]
 8002f78:	4298      	cmp	r0, r3
	xTimeNow = xTaskGetTickCount();
 8002f7a:	4681      	mov	r9, r0
 8002f7c:	465e      	mov	r6, fp
	if( xTimeNow < xLastTime )
 8002f7e:	d235      	bcs.n	8002fec <prvTimerTask+0xa0>
		prvSwitchTimerLists();
 8002f80:	f7ff ffa4 	bl	8002ecc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8002f84:	2201      	movs	r2, #1
	xLastTime = xTimeNow;
 8002f86:	f8cb 9000 	str.w	r9, [fp]
		if( xTimerListsWereSwitched == pdFALSE )
 8002f8a:	2a00      	cmp	r2, #0
 8002f8c:	f040 8081 	bne.w	8003092 <prvTimerTask+0x146>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8002f90:	f1ba 0f00 	cmp.w	sl, #0
 8002f94:	d164      	bne.n	8003060 <prvTimerTask+0x114>
 8002f96:	454c      	cmp	r4, r9
 8002f98:	d868      	bhi.n	800306c <prvTimerTask+0x120>
				( void ) xTaskResumeAll();
 8002f9a:	f7ff fcf9 	bl	8002990 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	f8d3 b00c 	ldr.w	fp, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8002fa6:	f10b 0004 	add.w	r0, fp, #4
 8002faa:	f7fe fc8a 	bl	80018c2 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8002fae:	f89b 3028 	ldrb.w	r3, [fp, #40]	; 0x28
 8002fb2:	0758      	lsls	r0, r3, #29
 8002fb4:	d51c      	bpl.n	8002ff0 <prvTimerTask+0xa4>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8002fb6:	f8db 1018 	ldr.w	r1, [fp, #24]
 8002fba:	4623      	mov	r3, r4
 8002fbc:	464a      	mov	r2, r9
 8002fbe:	4421      	add	r1, r4
 8002fc0:	4658      	mov	r0, fp
 8002fc2:	f7ff ff05 	bl	8002dd0 <prvInsertTimerInActiveList>
 8002fc6:	b1b8      	cbz	r0, 8002ff8 <prvTimerTask+0xac>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8002fc8:	f8cd a000 	str.w	sl, [sp]
 8002fcc:	4653      	mov	r3, sl
 8002fce:	4622      	mov	r2, r4
 8002fd0:	4651      	mov	r1, sl
 8002fd2:	4658      	mov	r0, fp
 8002fd4:	f7ff ff4e 	bl	8002e74 <xTimerGenericCommand>
			configASSERT( xResult );
 8002fd8:	b970      	cbnz	r0, 8002ff8 <prvTimerTask+0xac>
 8002fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fde:	f383 8811 	msr	BASEPRI, r3
 8002fe2:	f3bf 8f6f 	isb	sy
 8002fe6:	f3bf 8f4f 	dsb	sy
 8002fea:	e7fe      	b.n	8002fea <prvTimerTask+0x9e>
		*pxTimerListsWereSwitched = pdFALSE;
 8002fec:	2200      	movs	r2, #0
 8002fee:	e7ca      	b.n	8002f86 <prvTimerTask+0x3a>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8002ff0:	f023 0301 	bic.w	r3, r3, #1
 8002ff4:	f88b 3028 	strb.w	r3, [fp, #40]	; 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8002ff8:	f8db 3020 	ldr.w	r3, [fp, #32]
 8002ffc:	4658      	mov	r0, fp
 8002ffe:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003000:	f8df 914c 	ldr.w	r9, [pc, #332]	; 8003150 <prvTimerTask+0x204>
 8003004:	f04f 0a00 	mov.w	sl, #0
 8003008:	2200      	movs	r2, #0
 800300a:	a902      	add	r1, sp, #8
 800300c:	f8d9 0000 	ldr.w	r0, [r9]
 8003010:	f7ff f938 	bl	8002284 <xQueueReceive>
 8003014:	2800      	cmp	r0, #0
 8003016:	d0a0      	beq.n	8002f5a <prvTimerTask+0xe>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003018:	9b02      	ldr	r3, [sp, #8]
 800301a:	2b00      	cmp	r3, #0
 800301c:	da03      	bge.n	8003026 <prvTimerTask+0xda>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800301e:	9905      	ldr	r1, [sp, #20]
 8003020:	9804      	ldr	r0, [sp, #16]
 8003022:	9b03      	ldr	r3, [sp, #12]
 8003024:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003026:	9b02      	ldr	r3, [sp, #8]
 8003028:	2b00      	cmp	r3, #0
 800302a:	dbed      	blt.n	8003008 <prvTimerTask+0xbc>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800302c:	9c04      	ldr	r4, [sp, #16]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800302e:	6963      	ldr	r3, [r4, #20]
 8003030:	b113      	cbz	r3, 8003038 <prvTimerTask+0xec>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003032:	1d20      	adds	r0, r4, #4
 8003034:	f7fe fc45 	bl	80018c2 <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 8003038:	f7ff fc14 	bl	8002864 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800303c:	6833      	ldr	r3, [r6, #0]
 800303e:	4298      	cmp	r0, r3
	xTimeNow = xTaskGetTickCount();
 8003040:	4683      	mov	fp, r0
	if( xTimeNow < xLastTime )
 8003042:	d201      	bcs.n	8003048 <prvTimerTask+0xfc>
		prvSwitchTimerLists();
 8003044:	f7ff ff42 	bl	8002ecc <prvSwitchTimerLists>
			switch( xMessage.xMessageID )
 8003048:	9b02      	ldr	r3, [sp, #8]
	xLastTime = xTimeNow;
 800304a:	f8c6 b000 	str.w	fp, [r6]
			switch( xMessage.xMessageID )
 800304e:	2b09      	cmp	r3, #9
 8003050:	d8da      	bhi.n	8003008 <prvTimerTask+0xbc>
 8003052:	e8df f003 	tbb	[pc, r3]
 8003056:	2121      	.short	0x2121
 8003058:	6c534c21 	.word	0x6c534c21
 800305c:	534c2121 	.word	0x534c2121
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003060:	4b3a      	ldr	r3, [pc, #232]	; (800314c <prvTimerTask+0x200>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	fab2 f282 	clz	r2, r2
 800306a:	0952      	lsrs	r2, r2, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800306c:	4b38      	ldr	r3, [pc, #224]	; (8003150 <prvTimerTask+0x204>)
 800306e:	eba4 0109 	sub.w	r1, r4, r9
 8003072:	6818      	ldr	r0, [r3, #0]
 8003074:	f7ff f9bc 	bl	80023f0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003078:	f7ff fc8a 	bl	8002990 <xTaskResumeAll>
 800307c:	2800      	cmp	r0, #0
 800307e:	d1bf      	bne.n	8003000 <prvTimerTask+0xb4>
					portYIELD_WITHIN_API();
 8003080:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003084:	f8c8 3000 	str.w	r3, [r8]
 8003088:	f3bf 8f4f 	dsb	sy
 800308c:	f3bf 8f6f 	isb	sy
 8003090:	e7b6      	b.n	8003000 <prvTimerTask+0xb4>
			( void ) xTaskResumeAll();
 8003092:	f7ff fc7d 	bl	8002990 <xTaskResumeAll>
 8003096:	e7b3      	b.n	8003000 <prvTimerTask+0xb4>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003098:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800309c:	69a1      	ldr	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800309e:	f043 0301 	orr.w	r3, r3, #1
 80030a2:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80030a6:	9b03      	ldr	r3, [sp, #12]
 80030a8:	465a      	mov	r2, fp
 80030aa:	4419      	add	r1, r3
 80030ac:	4620      	mov	r0, r4
 80030ae:	f7ff fe8f 	bl	8002dd0 <prvInsertTimerInActiveList>
 80030b2:	2800      	cmp	r0, #0
 80030b4:	d0a8      	beq.n	8003008 <prvTimerTask+0xbc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80030b6:	6a23      	ldr	r3, [r4, #32]
 80030b8:	4620      	mov	r0, r4
 80030ba:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80030bc:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 80030c0:	0759      	lsls	r1, r3, #29
 80030c2:	d5a1      	bpl.n	8003008 <prvTimerTask+0xbc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80030c4:	69a2      	ldr	r2, [r4, #24]
 80030c6:	9903      	ldr	r1, [sp, #12]
 80030c8:	f8cd a000 	str.w	sl, [sp]
 80030cc:	2300      	movs	r3, #0
 80030ce:	440a      	add	r2, r1
 80030d0:	4620      	mov	r0, r4
 80030d2:	4619      	mov	r1, r3
 80030d4:	f7ff fece 	bl	8002e74 <xTimerGenericCommand>
							configASSERT( xResult );
 80030d8:	2800      	cmp	r0, #0
 80030da:	d195      	bne.n	8003008 <prvTimerTask+0xbc>
 80030dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030e0:	f383 8811 	msr	BASEPRI, r3
 80030e4:	f3bf 8f6f 	isb	sy
 80030e8:	f3bf 8f4f 	dsb	sy
 80030ec:	e7fe      	b.n	80030ec <prvTimerTask+0x1a0>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80030ee:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80030f2:	f023 0301 	bic.w	r3, r3, #1
 80030f6:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 80030fa:	e785      	b.n	8003008 <prvTimerTask+0xbc>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80030fc:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003100:	9903      	ldr	r1, [sp, #12]
 8003102:	61a1      	str	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003104:	f043 0301 	orr.w	r3, r3, #1
 8003108:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800310c:	b941      	cbnz	r1, 8003120 <prvTimerTask+0x1d4>
 800310e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003112:	f383 8811 	msr	BASEPRI, r3
 8003116:	f3bf 8f6f 	isb	sy
 800311a:	f3bf 8f4f 	dsb	sy
 800311e:	e7fe      	b.n	800311e <prvTimerTask+0x1d2>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003120:	465b      	mov	r3, fp
 8003122:	465a      	mov	r2, fp
 8003124:	4459      	add	r1, fp
 8003126:	4620      	mov	r0, r4
 8003128:	f7ff fe52 	bl	8002dd0 <prvInsertTimerInActiveList>
 800312c:	e76c      	b.n	8003008 <prvTimerTask+0xbc>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800312e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8003132:	079a      	lsls	r2, r3, #30
 8003134:	d4dd      	bmi.n	80030f2 <prvTimerTask+0x1a6>
							vPortFree( pxTimer );
 8003136:	4620      	mov	r0, r4
 8003138:	f7fe fe3a 	bl	8001db0 <vPortFree>
 800313c:	e764      	b.n	8003008 <prvTimerTask+0xbc>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800313e:	68db      	ldr	r3, [r3, #12]
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003140:	f04f 0a00 	mov.w	sl, #0
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003144:	681c      	ldr	r4, [r3, #0]
 8003146:	e70f      	b.n	8002f68 <prvTimerTask+0x1c>
 8003148:	20004804 	.word	0x20004804
 800314c:	20004808 	.word	0x20004808
 8003150:	20004928 	.word	0x20004928
 8003154:	e000ed04 	.word	0xe000ed04
 8003158:	200048d4 	.word	0x200048d4

0800315c <vTaskBlinker>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


//HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState);
void vTaskBlinker(void *pBlinker) {
 800315c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int delay_ms = 500;
	TickType_t delay_ticks = delay_ms / portTICK_PERIOD_MS;
	while(1) {
		for(int pin = 12; pin < 16; pin++) {
			HAL_GPIO_TogglePin(GPIOD, (1 << pin));
 800315e:	4e0d      	ldr	r6, [pc, #52]	; (8003194 <vTaskBlinker+0x38>)
 8003160:	2701      	movs	r7, #1
		for(int pin = 12; pin < 16; pin++) {
 8003162:	240c      	movs	r4, #12
			HAL_GPIO_TogglePin(GPIOD, (1 << pin));
 8003164:	fa07 f504 	lsl.w	r5, r7, r4
 8003168:	b2ad      	uxth	r5, r5
 800316a:	4629      	mov	r1, r5
 800316c:	4630      	mov	r0, r6
 800316e:	f7fd fcb6 	bl	8000ade <HAL_GPIO_TogglePin>
			vTaskDelay(delay_ticks);
 8003172:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003176:	f7ff fc7f 	bl	8002a78 <vTaskDelay>
			HAL_GPIO_TogglePin(GPIOD, (1 << pin));
 800317a:	4629      	mov	r1, r5
 800317c:	4630      	mov	r0, r6
 800317e:	f7fd fcae 	bl	8000ade <HAL_GPIO_TogglePin>
		for(int pin = 12; pin < 16; pin++) {
 8003182:	3401      	adds	r4, #1
			vTaskDelay(delay_ticks);
 8003184:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003188:	f7ff fc76 	bl	8002a78 <vTaskDelay>
		for(int pin = 12; pin < 16; pin++) {
 800318c:	2c10      	cmp	r4, #16
 800318e:	d1e9      	bne.n	8003164 <vTaskBlinker+0x8>
 8003190:	e7e7      	b.n	8003162 <vTaskBlinker+0x6>
 8003192:	bf00      	nop
 8003194:	40020c00 	.word	0x40020c00

08003198 <vTaskSendUART2_DMA>:
//		HAL_UART_Transmit(&huart2, (uint8_t *)&data, 1, 0);
//		vTaskDelay(delay_ticks);
//	}
//
//}
void vTaskSendUART2_DMA (void *pSenderUART2_DMA) {
 8003198:	b538      	push	{r3, r4, r5, lr}
	while(1) {
		//HAL_StatusTypeDef HAL_DMA_Start (DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength);
		//HAL_DMA_Start(&hdma_usart2_tx, (uint32_t)pvText, USART2_BASE, buf_size);

		//HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size);
		HAL_UART_Transmit_DMA(&huart2, (uint8_t*)pvText, buf_size);
 800319a:	4d06      	ldr	r5, [pc, #24]	; (80031b4 <vTaskSendUART2_DMA+0x1c>)
 800319c:	4c06      	ldr	r4, [pc, #24]	; (80031b8 <vTaskSendUART2_DMA+0x20>)
 800319e:	2244      	movs	r2, #68	; 0x44
 80031a0:	4629      	mov	r1, r5
 80031a2:	4620      	mov	r0, r4
 80031a4:	f7fe f934 	bl	8001410 <HAL_UART_Transmit_DMA>
		vTaskDelay(delay_ticks);
 80031a8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80031ac:	f7ff fc64 	bl	8002a78 <vTaskDelay>
 80031b0:	e7f5      	b.n	800319e <vTaskSendUART2_DMA+0x6>
 80031b2:	bf00      	nop
 80031b4:	080036c2 	.word	0x080036c2
 80031b8:	20004a38 	.word	0x20004a38

080031bc <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80031bc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80031be:	2001      	movs	r0, #1
 80031c0:	f7fe fb1e 	bl	8001800 <osDelay>
 80031c4:	e7fb      	b.n	80031be <StartDefaultTask+0x2>
	...

080031c8 <SystemClock_Config>:
{
 80031c8:	b510      	push	{r4, lr}
 80031ca:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80031cc:	2230      	movs	r2, #48	; 0x30
 80031ce:	2100      	movs	r1, #0
 80031d0:	a808      	add	r0, sp, #32
 80031d2:	f000 fa38 	bl	8003646 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80031d6:	2100      	movs	r1, #0
 80031d8:	2214      	movs	r2, #20
 80031da:	a803      	add	r0, sp, #12
 80031dc:	f000 fa33 	bl	8003646 <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 80031e0:	2400      	movs	r4, #0
 80031e2:	4b16      	ldr	r3, [pc, #88]	; (800323c <SystemClock_Config+0x74>)
 80031e4:	9401      	str	r4, [sp, #4]
 80031e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031e8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80031ec:	641a      	str	r2, [r3, #64]	; 0x40
 80031ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031f4:	9301      	str	r3, [sp, #4]
 80031f6:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80031f8:	4b11      	ldr	r3, [pc, #68]	; (8003240 <SystemClock_Config+0x78>)
 80031fa:	9402      	str	r4, [sp, #8]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003202:	601a      	str	r2, [r3, #0]
 8003204:	681b      	ldr	r3, [r3, #0]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003206:	940e      	str	r4, [sp, #56]	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003208:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800320c:	9302      	str	r3, [sp, #8]
 800320e:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003210:	2302      	movs	r3, #2
 8003212:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003214:	2301      	movs	r3, #1
 8003216:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003218:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800321a:	2310      	movs	r3, #16
 800321c:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800321e:	f7fd fc65 	bl	8000aec <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003222:	230f      	movs	r3, #15
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003224:	4621      	mov	r1, r4
 8003226:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003228:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800322a:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800322c:	9405      	str	r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800322e:	9406      	str	r4, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003230:	9407      	str	r4, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003232:	f7fd fe2f 	bl	8000e94 <HAL_RCC_ClockConfig>
}
 8003236:	b014      	add	sp, #80	; 0x50
 8003238:	bd10      	pop	{r4, pc}
 800323a:	bf00      	nop
 800323c:	40023800 	.word	0x40023800
 8003240:	40007000 	.word	0x40007000

08003244 <main>:
{
 8003244:	b500      	push	{lr}
 8003246:	b08b      	sub	sp, #44	; 0x2c
  HAL_Init();
 8003248:	f7fd f94a 	bl	80004e0 <HAL_Init>
  SystemClock_Config();
 800324c:	f7ff ffbc 	bl	80031c8 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003250:	2214      	movs	r2, #20
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003252:	2400      	movs	r4, #0
 8003254:	4d39      	ldr	r5, [pc, #228]	; (800333c <main+0xf8>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003256:	2100      	movs	r1, #0
 8003258:	eb0d 0002 	add.w	r0, sp, r2
 800325c:	f000 f9f3 	bl	8003646 <memset>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003260:	9403      	str	r4, [sp, #12]
 8003262:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8003264:	4836      	ldr	r0, [pc, #216]	; (8003340 <main+0xfc>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003266:	f043 0301 	orr.w	r3, r3, #1
 800326a:	632b      	str	r3, [r5, #48]	; 0x30
 800326c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800326e:	f003 0301 	and.w	r3, r3, #1
 8003272:	9303      	str	r3, [sp, #12]
 8003274:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003276:	9404      	str	r4, [sp, #16]
 8003278:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800327a:	f043 0308 	orr.w	r3, r3, #8
 800327e:	632b      	str	r3, [r5, #48]	; 0x30
 8003280:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003282:	f003 0308 	and.w	r3, r3, #8
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8003286:	4622      	mov	r2, r4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003288:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800328a:	f44f 4170 	mov.w	r1, #61440	; 0xf000
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800328e:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8003290:	f7fd fc20 	bl	8000ad4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003294:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8003298:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800329a:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800329c:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800329e:	4828      	ldr	r0, [pc, #160]	; (8003340 <main+0xfc>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032a0:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032a2:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032a4:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80032a6:	f7fd fb35 	bl	8000914 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80032aa:	9405      	str	r4, [sp, #20]
 80032ac:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80032ae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80032b2:	632b      	str	r3, [r5, #48]	; 0x30
 80032b4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80032b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80032ba:	4622      	mov	r2, r4
 80032bc:	2105      	movs	r1, #5
  __HAL_RCC_DMA1_CLK_ENABLE();
 80032be:	9305      	str	r3, [sp, #20]
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80032c0:	2010      	movs	r0, #16
  __HAL_RCC_DMA1_CLK_ENABLE();
 80032c2:	9b05      	ldr	r3, [sp, #20]
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80032c4:	f7fd f94a 	bl	800055c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80032c8:	2010      	movs	r0, #16
 80032ca:	f7fd f97b 	bl	80005c4 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 80032ce:	2105      	movs	r1, #5
 80032d0:	4622      	mov	r2, r4
 80032d2:	2011      	movs	r0, #17
 80032d4:	f7fd f942 	bl	800055c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80032d8:	2011      	movs	r0, #17
 80032da:	f7fd f973 	bl	80005c4 <HAL_NVIC_EnableIRQ>
  huart2.Instance = USART2;
 80032de:	4819      	ldr	r0, [pc, #100]	; (8003344 <main+0x100>)
  huart2.Init.BaudRate = 9600;
 80032e0:	4a19      	ldr	r2, [pc, #100]	; (8003348 <main+0x104>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80032e2:	6084      	str	r4, [r0, #8]
  huart2.Init.BaudRate = 9600;
 80032e4:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80032e8:	e880 000c 	stmia.w	r0, {r2, r3}
  huart2.Init.Parity = UART_PARITY_EVEN;
 80032ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032f0:	6103      	str	r3, [r0, #16]
  xTaskCreate(
 80032f2:	2502      	movs	r5, #2
  huart2.Init.Mode = UART_MODE_TX_RX;
 80032f4:	230c      	movs	r3, #12
 80032f6:	6143      	str	r3, [r0, #20]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80032f8:	60c4      	str	r4, [r0, #12]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80032fa:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80032fc:	61c4      	str	r4, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80032fe:	f7fe f859 	bl	80013b4 <HAL_UART_Init>
  xTaskCreate(
 8003302:	4623      	mov	r3, r4
 8003304:	2280      	movs	r2, #128	; 0x80
 8003306:	4911      	ldr	r1, [pc, #68]	; (800334c <main+0x108>)
 8003308:	9401      	str	r4, [sp, #4]
 800330a:	9500      	str	r5, [sp, #0]
 800330c:	4810      	ldr	r0, [pc, #64]	; (8003350 <main+0x10c>)
 800330e:	f7ff fa2f 	bl	8002770 <xTaskCreate>
  xTaskCreate(
 8003312:	4623      	mov	r3, r4
 8003314:	2280      	movs	r2, #128	; 0x80
 8003316:	490f      	ldr	r1, [pc, #60]	; (8003354 <main+0x110>)
 8003318:	9401      	str	r4, [sp, #4]
 800331a:	9500      	str	r5, [sp, #0]
 800331c:	480e      	ldr	r0, [pc, #56]	; (8003358 <main+0x114>)
 800331e:	f7ff fa27 	bl	8002770 <xTaskCreate>
  osKernelInitialize();
 8003322:	f7fe f9db 	bl	80016dc <osKernelInitialize>
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8003326:	4a0d      	ldr	r2, [pc, #52]	; (800335c <main+0x118>)
 8003328:	480d      	ldr	r0, [pc, #52]	; (8003360 <main+0x11c>)
 800332a:	4621      	mov	r1, r4
 800332c:	f7fe fa10 	bl	8001750 <osThreadNew>
 8003330:	4b0c      	ldr	r3, [pc, #48]	; (8003364 <main+0x120>)
 8003332:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8003334:	f7fe f9ec 	bl	8001710 <osKernelStart>
 8003338:	e7fe      	b.n	8003338 <main+0xf4>
 800333a:	bf00      	nop
 800333c:	40023800 	.word	0x40023800
 8003340:	40020c00 	.word	0x40020c00
 8003344:	20004a38 	.word	0x20004a38
 8003348:	40004400 	.word	0x40004400
 800334c:	080036b0 	.word	0x080036b0
 8003350:	0800315d 	.word	0x0800315d
 8003354:	080036b8 	.word	0x080036b8
 8003358:	08003199 	.word	0x08003199
 800335c:	0800368c 	.word	0x0800368c
 8003360:	080031bd 	.word	0x080031bd
 8003364:	20004974 	.word	0x20004974

08003368 <HAL_UART_TxCpltCallback>:
 8003368:	bf00      	nop
 800336a:	4770      	bx	lr

0800336c <HAL_UART_RxCpltCallback>:
	__NOP();
 800336c:	bf00      	nop
 800336e:	4770      	bx	lr

08003370 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8003370:	6802      	ldr	r2, [r0, #0]
 8003372:	4b03      	ldr	r3, [pc, #12]	; (8003380 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8003374:	429a      	cmp	r2, r3
 8003376:	d101      	bne.n	800337c <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8003378:	f7fd b8cc 	b.w	8000514 <HAL_IncTick>
 800337c:	4770      	bx	lr
 800337e:	bf00      	nop
 8003380:	40001000 	.word	0x40001000

08003384 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003384:	4770      	bx	lr
	...

08003388 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003388:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800338a:	4b0f      	ldr	r3, [pc, #60]	; (80033c8 <HAL_MspInit+0x40>)
 800338c:	2200      	movs	r2, #0
 800338e:	9200      	str	r2, [sp, #0]
 8003390:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8003392:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8003396:	6459      	str	r1, [r3, #68]	; 0x44
 8003398:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800339a:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 800339e:	9100      	str	r1, [sp, #0]
 80033a0:	9900      	ldr	r1, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80033a2:	9201      	str	r2, [sp, #4]
 80033a4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80033a6:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 80033aa:	6419      	str	r1, [r3, #64]	; 0x40
 80033ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033b2:	9301      	str	r3, [sp, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80033b4:	210f      	movs	r1, #15
 80033b6:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_PWR_CLK_ENABLE();
 80033ba:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80033bc:	f7fd f8ce 	bl	800055c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80033c0:	b003      	add	sp, #12
 80033c2:	f85d fb04 	ldr.w	pc, [sp], #4
 80033c6:	bf00      	nop
 80033c8:	40023800 	.word	0x40023800

080033cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80033cc:	b570      	push	{r4, r5, r6, lr}
 80033ce:	4606      	mov	r6, r0
 80033d0:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033d2:	2214      	movs	r2, #20
 80033d4:	2100      	movs	r1, #0
 80033d6:	a803      	add	r0, sp, #12
 80033d8:	f000 f935 	bl	8003646 <memset>
  if(huart->Instance==USART2)
 80033dc:	6832      	ldr	r2, [r6, #0]
 80033de:	4b33      	ldr	r3, [pc, #204]	; (80034ac <HAL_UART_MspInit+0xe0>)
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d160      	bne.n	80034a6 <HAL_UART_MspInit+0xda>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */
	  //hdma_usart2_tx.StreamBaseAddress = pvText;
  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80033e4:	2500      	movs	r5, #0
 80033e6:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 80033ea:	9501      	str	r5, [sp, #4]
 80033ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033ee:	4830      	ldr	r0, [pc, #192]	; (80034b0 <HAL_UART_MspInit+0xe4>)

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80033f0:	4c30      	ldr	r4, [pc, #192]	; (80034b4 <HAL_UART_MspInit+0xe8>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80033f2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80033f6:	641a      	str	r2, [r3, #64]	; 0x40
 80033f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033fa:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80033fe:	9201      	str	r2, [sp, #4]
 8003400:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003402:	9502      	str	r5, [sp, #8]
 8003404:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003406:	f042 0201 	orr.w	r2, r2, #1
 800340a:	631a      	str	r2, [r3, #48]	; 0x30
 800340c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340e:	f003 0301 	and.w	r3, r3, #1
 8003412:	9302      	str	r3, [sp, #8]
 8003414:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003416:	230c      	movs	r3, #12
 8003418:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800341a:	2302      	movs	r3, #2
 800341c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800341e:	2303      	movs	r3, #3
 8003420:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003422:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003424:	2307      	movs	r3, #7
 8003426:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003428:	f7fd fa74 	bl	8000914 <HAL_GPIO_Init>
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800342c:	4b22      	ldr	r3, [pc, #136]	; (80034b8 <HAL_UART_MspInit+0xec>)
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800342e:	60e5      	str	r5, [r4, #12]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003430:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
 8003434:	f04f 0e40 	mov.w	lr, #64	; 0x40
 8003438:	e884 5008 	stmia.w	r4, {r3, ip, lr}
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800343c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003440:	6123      	str	r3, [r4, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003442:	4620      	mov	r0, r4
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003444:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003448:	6165      	str	r5, [r4, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800344a:	61a5      	str	r5, [r4, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800344c:	61e5      	str	r5, [r4, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800344e:	6223      	str	r3, [r4, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003450:	6265      	str	r5, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003452:	f7fd f8db 	bl	800060c <HAL_DMA_Init>
 8003456:	b108      	cbz	r0, 800345c <HAL_UART_MspInit+0x90>
    {
      Error_Handler();
 8003458:	f7ff ff94 	bl	8003384 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800345c:	6334      	str	r4, [r6, #48]	; 0x30

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800345e:	4817      	ldr	r0, [pc, #92]	; (80034bc <HAL_UART_MspInit+0xf0>)
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8003460:	63a6      	str	r6, [r4, #56]	; 0x38
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003462:	4c17      	ldr	r4, [pc, #92]	; (80034c0 <HAL_UART_MspInit+0xf4>)
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003464:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003468:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800346c:	e884 0009 	stmia.w	r4, {r0, r3}
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003470:	6122      	str	r2, [r4, #16]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003472:	2300      	movs	r3, #0
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003474:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003478:	4620      	mov	r0, r4
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800347a:	60a3      	str	r3, [r4, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800347c:	60e3      	str	r3, [r4, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800347e:	6163      	str	r3, [r4, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003480:	61a3      	str	r3, [r4, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003482:	61e3      	str	r3, [r4, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003484:	6222      	str	r2, [r4, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003486:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003488:	f7fd f8c0 	bl	800060c <HAL_DMA_Init>
 800348c:	b108      	cbz	r0, 8003492 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 800348e:	f7ff ff79 	bl	8003384 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003492:	6374      	str	r4, [r6, #52]	; 0x34

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8003494:	2026      	movs	r0, #38	; 0x26
 8003496:	2200      	movs	r2, #0
 8003498:	2105      	movs	r1, #5
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800349a:	63a6      	str	r6, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800349c:	f7fd f85e 	bl	800055c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80034a0:	2026      	movs	r0, #38	; 0x26
 80034a2:	f7fd f88f 	bl	80005c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80034a6:	b008      	add	sp, #32
 80034a8:	bd70      	pop	{r4, r5, r6, pc}
 80034aa:	bf00      	nop
 80034ac:	40004400 	.word	0x40004400
 80034b0:	40020000 	.word	0x40020000
 80034b4:	200049d8 	.word	0x200049d8
 80034b8:	400260a0 	.word	0x400260a0
 80034bc:	40026088 	.word	0x40026088
 80034c0:	20004978 	.word	0x20004978

080034c4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80034c4:	b530      	push	{r4, r5, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 80034c6:	4601      	mov	r1, r0
{
 80034c8:	b089      	sub	sp, #36	; 0x24
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 80034ca:	2200      	movs	r2, #0
 80034cc:	2036      	movs	r0, #54	; 0x36
 80034ce:	f7fd f845 	bl	800055c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 80034d2:	2036      	movs	r0, #54	; 0x36
 80034d4:	f7fd f876 	bl	80005c4 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80034d8:	2500      	movs	r5, #0
 80034da:	4b14      	ldr	r3, [pc, #80]	; (800352c <HAL_InitTick+0x68>)
 80034dc:	9502      	str	r5, [sp, #8]
 80034de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80034e0:	4c13      	ldr	r4, [pc, #76]	; (8003530 <HAL_InitTick+0x6c>)
  __HAL_RCC_TIM6_CLK_ENABLE();
 80034e2:	f042 0210 	orr.w	r2, r2, #16
 80034e6:	641a      	str	r2, [r3, #64]	; 0x40
 80034e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ea:	f003 0310 	and.w	r3, r3, #16
 80034ee:	9302      	str	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80034f0:	a901      	add	r1, sp, #4
 80034f2:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 80034f4:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80034f6:	f7fd fd89 	bl	800100c <HAL_RCC_GetClockConfig>
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80034fa:	f7fd fd67 	bl	8000fcc <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 80034fe:	4b0d      	ldr	r3, [pc, #52]	; (8003534 <HAL_InitTick+0x70>)
 8003500:	6023      	str	r3, [r4, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8003502:	f240 33e7 	movw	r3, #999	; 0x3e7
 8003506:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8003508:	4b0b      	ldr	r3, [pc, #44]	; (8003538 <HAL_InitTick+0x74>)
 800350a:	fbb0 f0f3 	udiv	r0, r0, r3
 800350e:	3801      	subs	r0, #1
  htim6.Init.Prescaler = uwPrescalerValue;
 8003510:	6060      	str	r0, [r4, #4]
  htim6.Init.ClockDivision = 0;
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003512:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 8003514:	6125      	str	r5, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003516:	60a5      	str	r5, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8003518:	f7fd feb4 	bl	8001284 <HAL_TIM_Base_Init>
 800351c:	b920      	cbnz	r0, 8003528 <HAL_InitTick+0x64>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 800351e:	4620      	mov	r0, r4
 8003520:	f7fd fd93 	bl	800104a <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 8003524:	b009      	add	sp, #36	; 0x24
 8003526:	bd30      	pop	{r4, r5, pc}
  return HAL_ERROR;
 8003528:	2001      	movs	r0, #1
 800352a:	e7fb      	b.n	8003524 <HAL_InitTick+0x60>
 800352c:	40023800 	.word	0x40023800
 8003530:	20004a78 	.word	0x20004a78
 8003534:	40001000 	.word	0x40001000
 8003538:	000f4240 	.word	0x000f4240

0800353c <NMI_Handler>:
 800353c:	4770      	bx	lr

0800353e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800353e:	e7fe      	b.n	800353e <HardFault_Handler>

08003540 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003540:	e7fe      	b.n	8003540 <MemManage_Handler>

08003542 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003542:	e7fe      	b.n	8003542 <BusFault_Handler>

08003544 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003544:	e7fe      	b.n	8003544 <UsageFault_Handler>

08003546 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003546:	4770      	bx	lr

08003548 <DMA1_Stream5_IRQHandler>:
void DMA1_Stream5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003548:	4801      	ldr	r0, [pc, #4]	; (8003550 <DMA1_Stream5_IRQHandler+0x8>)
 800354a:	f7fd b929 	b.w	80007a0 <HAL_DMA_IRQHandler>
 800354e:	bf00      	nop
 8003550:	20004978 	.word	0x20004978

08003554 <DMA1_Stream6_IRQHandler>:
void DMA1_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003554:	4801      	ldr	r0, [pc, #4]	; (800355c <DMA1_Stream6_IRQHandler+0x8>)
 8003556:	f7fd b923 	b.w	80007a0 <HAL_DMA_IRQHandler>
 800355a:	bf00      	nop
 800355c:	200049d8 	.word	0x200049d8

08003560 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003560:	4801      	ldr	r0, [pc, #4]	; (8003568 <USART2_IRQHandler+0x8>)
 8003562:	f7fe b811 	b.w	8001588 <HAL_UART_IRQHandler>
 8003566:	bf00      	nop
 8003568:	20004a38 	.word	0x20004a38

0800356c <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800356c:	4801      	ldr	r0, [pc, #4]	; (8003574 <TIM6_DAC_IRQHandler+0x8>)
 800356e:	f7fd bd80 	b.w	8001072 <HAL_TIM_IRQHandler>
 8003572:	bf00      	nop
 8003574:	20004a78 	.word	0x20004a78

08003578 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003578:	4b05      	ldr	r3, [pc, #20]	; (8003590 <SystemInit+0x18>)
 800357a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800357e:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8003582:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003586:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800358a:	609a      	str	r2, [r3, #8]
 800358c:	4770      	bx	lr
 800358e:	bf00      	nop
 8003590:	e000ed00 	.word	0xe000ed00

08003594 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003594:	f8df d034 	ldr.w	sp, [pc, #52]	; 80035cc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003598:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800359a:	e003      	b.n	80035a4 <LoopCopyDataInit>

0800359c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800359c:	4b0c      	ldr	r3, [pc, #48]	; (80035d0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800359e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80035a0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80035a2:	3104      	adds	r1, #4

080035a4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80035a4:	480b      	ldr	r0, [pc, #44]	; (80035d4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80035a6:	4b0c      	ldr	r3, [pc, #48]	; (80035d8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80035a8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80035aa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80035ac:	d3f6      	bcc.n	800359c <CopyDataInit>
  ldr  r2, =_sbss
 80035ae:	4a0b      	ldr	r2, [pc, #44]	; (80035dc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80035b0:	e002      	b.n	80035b8 <LoopFillZerobss>

080035b2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80035b2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80035b4:	f842 3b04 	str.w	r3, [r2], #4

080035b8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80035b8:	4b09      	ldr	r3, [pc, #36]	; (80035e0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80035ba:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80035bc:	d3f9      	bcc.n	80035b2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80035be:	f7ff ffdb 	bl	8003578 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80035c2:	f000 f811 	bl	80035e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80035c6:	f7ff fe3d 	bl	8003244 <main>
  bx  lr    
 80035ca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80035cc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80035d0:	0800373c 	.word	0x0800373c
  ldr  r0, =_sdata
 80035d4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80035d8:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 80035dc:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 80035e0:	20004ab8 	.word	0x20004ab8

080035e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80035e4:	e7fe      	b.n	80035e4 <ADC_IRQHandler>
	...

080035e8 <__libc_init_array>:
 80035e8:	b570      	push	{r4, r5, r6, lr}
 80035ea:	4e0d      	ldr	r6, [pc, #52]	; (8003620 <__libc_init_array+0x38>)
 80035ec:	4c0d      	ldr	r4, [pc, #52]	; (8003624 <__libc_init_array+0x3c>)
 80035ee:	1ba4      	subs	r4, r4, r6
 80035f0:	10a4      	asrs	r4, r4, #2
 80035f2:	2500      	movs	r5, #0
 80035f4:	42a5      	cmp	r5, r4
 80035f6:	d109      	bne.n	800360c <__libc_init_array+0x24>
 80035f8:	4e0b      	ldr	r6, [pc, #44]	; (8003628 <__libc_init_array+0x40>)
 80035fa:	4c0c      	ldr	r4, [pc, #48]	; (800362c <__libc_init_array+0x44>)
 80035fc:	f000 f82c 	bl	8003658 <_init>
 8003600:	1ba4      	subs	r4, r4, r6
 8003602:	10a4      	asrs	r4, r4, #2
 8003604:	2500      	movs	r5, #0
 8003606:	42a5      	cmp	r5, r4
 8003608:	d105      	bne.n	8003616 <__libc_init_array+0x2e>
 800360a:	bd70      	pop	{r4, r5, r6, pc}
 800360c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003610:	4798      	blx	r3
 8003612:	3501      	adds	r5, #1
 8003614:	e7ee      	b.n	80035f4 <__libc_init_array+0xc>
 8003616:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800361a:	4798      	blx	r3
 800361c:	3501      	adds	r5, #1
 800361e:	e7f2      	b.n	8003606 <__libc_init_array+0x1e>
 8003620:	08003734 	.word	0x08003734
 8003624:	08003734 	.word	0x08003734
 8003628:	08003734 	.word	0x08003734
 800362c:	08003738 	.word	0x08003738

08003630 <memcpy>:
 8003630:	b510      	push	{r4, lr}
 8003632:	1e43      	subs	r3, r0, #1
 8003634:	440a      	add	r2, r1
 8003636:	4291      	cmp	r1, r2
 8003638:	d100      	bne.n	800363c <memcpy+0xc>
 800363a:	bd10      	pop	{r4, pc}
 800363c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003640:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003644:	e7f7      	b.n	8003636 <memcpy+0x6>

08003646 <memset>:
 8003646:	4402      	add	r2, r0
 8003648:	4603      	mov	r3, r0
 800364a:	4293      	cmp	r3, r2
 800364c:	d100      	bne.n	8003650 <memset+0xa>
 800364e:	4770      	bx	lr
 8003650:	f803 1b01 	strb.w	r1, [r3], #1
 8003654:	e7f9      	b.n	800364a <memset+0x4>
	...

08003658 <_init>:
 8003658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800365a:	bf00      	nop
 800365c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800365e:	bc08      	pop	{r3}
 8003660:	469e      	mov	lr, r3
 8003662:	4770      	bx	lr

08003664 <_fini>:
 8003664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003666:	bf00      	nop
 8003668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800366a:	bc08      	pop	{r3}
 800366c:	469e      	mov	lr, r3
 800366e:	4770      	bx	lr
